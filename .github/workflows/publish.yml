on:
  workflow_dispatch:
  push:
    branches: acm

name: Quarto Publish

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: nschloe/action-cached-lfs-checkout@v1
      
      - name: Ensure .zip files are tracked by Git LFS
        run: |
          git lfs install
          git lfs track "*.zip"
          git add .gitattributes
          
      - name: Verify .zip files are tracked by Git LFS
        run: |
          if ! grep -q '*.zip filter=lfs diff=lfs merge=lfs' .gitattributes; then
            echo "Error: .zip files are not tracked by Git LFS in .gitattributes"
            exit 1
          fi
          
          # Check if any .zip files exist
          if ls *.zip 1> /dev/null 2>&1; then
            # Check if .zip files are LFS pointers
            if ! git lfs ls-files | grep -q '\.zip'; then
              echo "Error: .zip files exist but are not LFS pointers"
              exit 1
            fi
          else
            echo "No .zip files found in the repository"
          fi
          
          echo "Verification passed: .zip files are correctly tracked by Git LFS"

        
      - name: Ensure OpenSSL is installed
        run: |
          sudo apt-get update
          sudo apt-get install -y openssl
          sudo apt-get install -y ca-certificates

      - name: Set up Quarto
        uses: quarto-dev/quarto-actions/setup@v2
        with:
          version: pre-release
          tinytex: true
          
      - uses: r-lib/actions/setup-r@v2
        with:
          r-version: '4.3.2' 
      
      - name: Install R packages
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Set the token for use in R
          Sys.setenv(GITHUB_PAT = Sys.getenv("GITHUB_TOKEN"))
          
          # Function to extract package names from the qmd file
          extract_packages <- function(file_path) {
            content <- readLines(file_path)
            # Find library/require calls
            library_calls <- grep("^library\\(|^require\\(", content, value = TRUE)
            lib_packages <- gsub("^library\\(|^require\\(|\\)$", "", library_calls)
            
            # Find package::function calls
            direct_calls <- grep("::", content, value = TRUE)
            direct_packages <- unique(gsub("::.*$", "", direct_calls))
            
            # Combine and return unique package names
            unique(c(lib_packages, direct_packages))
          }

          # List of packages available in Stan universe (excluding brms)
          stan_packages <- c("rstan", "rstanarm", "cmdstanr", "bayesplot", "shinystan", "loo", "projpred", "posterior")

          # Extract packages from index.qmd
          qmd_file <- "index.qmd"
          if (!file.exists(qmd_file)) {
            stop("index.qmd not found in the current directory")
          }
          packages <- extract_packages(qmd_file)

          # Separate Stan, brms, and CRAN packages
          stan_to_install <- intersect(packages, stan_packages)
          brms_to_install <- "brms" %in% packages
          cran_to_install <- setdiff(packages, c(stan_packages, "brms"))

          # Install Stan packages from R-universe
          if (length(stan_to_install) > 0) {
            install.packages(stan_to_install, repos = c("https://stan-dev.r-universe.dev", getOption("repos")))
          }

          # Install brms from GitHub
          if (brms_to_install) {
            install.packages("remotes")
            remotes::install_github("paul-buerkner/brms", auth_token = Sys.getenv("GITHUB_PAT"))
          }

          # Install CRAN packages
          if (length(cran_to_install) > 0) {
            install.packages(c("knitr", "rmarkdown", cran_to_install))
          }

          # Print installed packages for debugging
          print("Installed packages:")
          print(installed.packages()[,"Package"])
        shell: Rscript {0}

      - name: Render and Publish
        uses: quarto-dev/quarto-actions/publish@v2
        with:
          target: gh-pages
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
