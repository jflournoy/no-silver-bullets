@article{agrawalSoftwareEffortQuality2007,
  title = {Software {{Effort}}, {{Quality}}, and {{Cycle Time}}: {{A Study}} of {{CMM Level}} 5 {{Projects}}},
  shorttitle = {Software {{Effort}}, {{Quality}}, and {{Cycle Time}}},
  author = {Agrawal, Manish and Chari, Kaushal},
  year = {2007},
  month = mar,
  journal = {IEEE Transactions on Software Engineering},
  volume = {33},
  number = {3},
  pages = {145--156},
  issn = {1939-3520},
  doi = {10.1109/TSE.2007.29},
  urldate = {2025-02-06},
  abstract = {The Capability Maturity Model (CMM) has become a popular methodology for improving software development processes with the goal of developing high-quality software within budget and planned cycle time. Prior research literature, while not exclusively focusing on CMM level 5 projects, has identified a host of factors as determinants of software development effort, quality, and cycle time. In this study, we focus exclusively on CMM level 5 projects from multiple organizations to study the impacts of highly mature processes on effort, quality, and cycle time. Using a linear regression model based on data collected from 37 CMM level 5 projects of four organizations, we find that high levels of process maturity, as indicated by CMM level 5 rating, reduce the effects of most factors that were previously believed to impact software development effort, quality, and cycle time. The only factor found to be significant in determining effort, cycle time, and quality was software size. On the average, the developed models predicted effort and cycle time around 12 percent and defects to about 49 percent of the actuals, across organizations. Overall, the results in this paper indicate that some of the biggest rewards from high levels of process maturity come from the reduction in variance of software development outcomes that were caused by factors other than software size},
  keywords = {Best practices,Capability maturity model,Coordinate measuring machines,Cost estimation,Costs,ISO standards,Object oriented modeling,Productivity,productivity.,Programming,Six sigma,software quality,Software quality,time estimation},
  file = {/Users/john-flournoy/Zotero/storage/HBFUH7EH/Agrawal and Chari - 2007 - Software Effort, Quality, and Cycle Time A Study of CMM Level 5 Projects.pdf;/Users/john-flournoy/Zotero/storage/V9M4F4IV/4084133.html}
}

@article{ahmadPandorasBoxSocial2024,
  title = {The {{Pandora}}'s Box of Social, Process, and People Debts in Software Engineering},
  author = {Ahmad, Muhammad Ovais and Gustavsson, Tomas},
  year = {2024},
  journal = {Journal of Software: Evolution and Process},
  volume = {36},
  number = {2},
  pages = {e2516},
  issn = {2047-7481},
  doi = {10.1002/smr.2516},
  urldate = {2025-02-14},
  abstract = {In software engineering, technical debt (TD) has been widely investigated, but debt regarding social issues, people, and processes has not been explored as much. It should be noted here that we use nontechnical debt (NTD) as an umbrella term to cover social, process, and people debts. Although the number of studies on NTD in software is increasing, the majority of them are descriptive rather than rigorous, and there is no systematic development of cumulative knowledge. As a result, identifying the fundamental causes of NTD and the associated mitigation techniques in software engineering is challenging. Therefore, this study investigates the scientific evidence regarding NTD till date by conducting a systematic mapping review of software engineering research between January 2000 and October 2021. The search strategy resulted in 175 studies, 17 of which were identified as unique and relevant primary papers. The primary studies show that NTD and TD are inextricably linked. In addition, this study also captured a plethora of causes and mitigation strategies for managing NTD and thus makes four important contributions: (i) highlighting state-of-the-art NTD research; (ii) identification of the reported causes and mitigation strategies in the primary papers; and (iii) determination of opportunities for future NTD research.},
  copyright = {{\copyright} 2022 The Authors. Journal of Software: Evolution and Process published by John Wiley \& Sons Ltd.},
  langid = {english},
  keywords = {agile,people debt,process debt,social debt,software development,systematic mapping review},
  file = {/Users/john-flournoy/Zotero/storage/EPCDYZP9/Ahmad and Gustavsson - 2024 - The Pandora's box of social, process, and people debts in software engineering.pdf;/Users/john-flournoy/Zotero/storage/BUMLM6HM/smr.html}
}

@manual{arel-bundockMarginaleffectsPredictionsComparisons2024,
  type = {Manual},
  title = {Marginaleffects: {{Predictions}}, Comparisons, Slopes, Marginal Means, and Hypothesis Tests},
  author = {{Arel-Bundock}, Vincent},
  year = {2024}
}

@article{ballWorkplaceSurveillanceOverview2010,
  title = {Workplace Surveillance: An Overview},
  shorttitle = {Workplace Surveillance},
  author = {Ball, Kirstie},
  year = {2010},
  month = feb,
  journal = {Labor History},
  volume = {51},
  number = {1},
  pages = {87--106},
  publisher = {Routledge},
  issn = {0023-656X},
  doi = {10.1080/00236561003654776},
  urldate = {2025-02-06},
  abstract = {This article attempts to review the proliferation of research findings about surveillance in the workplace and the issues surrounding it. It establishes a number of points of departure when considering the issue of workplace surveillance, before reviewing some of the more critical issues. First, it establishes that organizations and surveillance go hand in hand; and that workplace surveillance can take social and technological forms. Personal data gathering, Internet and email monitoring, location tracking, biometrics and covert surveillance are all areas of development. There is also evidence that groups of employees are appropriating information and communication technologies to stare back at their employers, exposing unsavoury practices and organizing collectively, prompting new thinking about resistance. Organizations watch employees primarily to protect their assets, although the nature and intensity of surveillance says much about how a company views its employees. Workplace surveillance has consequences for employees, affecting employee well-being, work culture, productivity, creativity and motivation. If no alternative can be found, managerial attention to task design, supervisory processes, employees' expectations about monitoring, and an appraisal of the company's operating environment can mediate its downsides. It is argued that in many ways the normality of workplace surveillance, and the prevalence of arguments about how to `do it better', make it difficult to radicalize. As part of what is seen as `good' management practice, it can confer benefits on the employee if conducted in a humane, balanced way, and is considered on a case-by-case--organization-by-organization--basis. However, the introduction of broader debates around information use, rights, power and social structure highlights how surveillance in the workplace may serve to perpetuate existing inequalities and create new ones.}
}

@misc{baltesSamplingSoftwareEngineering2021a,
  title = {Sampling in {{Software Engineering Research}}: {{A Critical Review}} and {{Guidelines}}},
  shorttitle = {Sampling in {{Software Engineering Research}}},
  author = {Baltes, Sebastian and Ralph, Paul},
  year = {2021},
  month = oct,
  number = {arXiv:2002.07764},
  eprint = {2002.07764},
  primaryclass = {cs},
  publisher = {arXiv},
  doi = {10.48550/arXiv.2002.07764},
  urldate = {2025-02-28},
  abstract = {Representative sampling appears rare in empirical software engineering research. Not all studies need representative samples, but a general lack of representative sampling undermines a scientific field. This article therefore reports a critical review of the state of sampling in recent, high-quality software engineering research. The key findings are: (1) random sampling is rare; (2) sophisticated sampling strategies are very rare; (3) sampling, representativeness and randomness often appear misunderstood. These findings suggest that software engineering research has a generalizability crisis. To address these problems, this paper synthesizes existing knowledge of sampling into a succinct primer and proposes extensive guidelines for improving the conduct, presentation and evaluation of sampling in software engineering research. It is further recommended that while researchers should strive for more representative samples, disparaging non-probability sampling is generally capricious and particularly misguided for predominately qualitative research.},
  archiveprefix = {arXiv},
  keywords = {Computer Science - Software Engineering},
  file = {/Users/john-flournoy/Zotero/storage/VMYCBVCJ/Baltes and Ralph - 2021 - Sampling in Software Engineering Research A Critical Review and Guidelines.pdf;/Users/john-flournoy/Zotero/storage/RQTNAIZD/2002.html}
}

@manual{barrettDatatableExtensionDataframe2024,
  type = {Manual},
  title = {Data.Table: {{Extension}} of `data.Frame`},
  author = {Barrett, Tyson and Dowle, Matt and Srinivasan, Arun and Gorecki, Jan and Chirico, Michael and Hocking, Toby},
  year = {2024}
}

@inproceedings{beskerTechnicalDebtCripples2018,
  title = {Technical Debt Cripples Software Developer Productivity: A Longitudinal Study on Developers' Daily Software Development Work},
  shorttitle = {Technical Debt Cripples Software Developer Productivity},
  booktitle = {Proceedings of the 2018 {{International Conference}} on {{Technical Debt}}},
  author = {Besker, Terese and Martini, Antonio and Bosch, Jan},
  year = {2018},
  month = may,
  pages = {105--114},
  publisher = {ACM},
  address = {Gothenburg Sweden},
  doi = {10.1145/3194164.3194178},
  urldate = {2024-10-02},
  abstract = {Software companies need to continuously deliver customer value, both from a short- and long-term perspective. However, software development can be impeded by what has been described as Technical Debt (TD). The aim of this study is to explore the negative consequences of TD in terms of wasted software development time. This study also investigates on which additional activities this wasted time is spent and whether different types of TD impact the wasted time differently. This study also sets out to examine the benefits of tracking and communicating the amount of wasted time, both from a developer's and manager's perspective. This paper reports the results of a longitudinal study, surveying 43 software developers, together with follow-up interviews with 16 industrial software practitioners. The analysis of the reported wasted time revealed that developers waste, on average, 23\% of their development time due to TD and that they are frequently forced to introduce new TD due to already existing TD. The most common activity on which additional time is spent is performing additional testing.},
  isbn = {978-1-4503-5713-5},
  langid = {english},
  file = {/Users/john-flournoy/Zotero/storage/CU5HBZ7E/Besker et al. - 2018 - Technical debt cripples software developer productivity a longitudinal study on developers' daily s.pdf}
}

@article{blackburnImprovingSpeedProductivity1996,
  title = {Improving Speed and Productivity of Software Development: A Global Survey of Software Developers},
  shorttitle = {Improving Speed and Productivity of Software Development},
  author = {Blackburn, J.D. and Scudder, G.D. and Van Wassenhove, L.N.},
  year = {1996},
  month = dec,
  journal = {IEEE Transactions on Software Engineering},
  volume = {22},
  number = {12},
  pages = {875--885},
  issn = {1939-3520},
  doi = {10.1109/32.553636},
  urldate = {2025-02-05},
  abstract = {Time is an essential measure of performance in software development because time delays tend to fall directly to the bottom line. To address this issue, this research seeks to distinguish time-based software development practices: those managerial actions that result in faster development speed and higher productivity. This study is based upon a survey of software management practices in Western Europe and builds upon an earlier study we carried out in the United States and Japan (Integrated Manufacturing Systems, vol. 7, no. 2, 1996). We measure the extent to which managers in the USA, Japan and Europe differ in their management of software projects and also determine the tools, technology and practices that separate fast and slow developers in Western Europe.},
  keywords = {Delay effects,Europe,Productivity,Programming,Project management,Research and development management,Software development management,Software measurement,Technology management,Time measurement},
  file = {/Users/john-flournoy/Zotero/storage/LFTRU6VG/96-11.pdf;/Users/john-flournoy/Zotero/storage/GQDDRNP3/553636.html}
}

@article{bonosAreGhostEngineers2024,
  title = {Are `Ghost Engineers' Real? {{Seeking Silicon Valley}}'s Least Productive Coders.},
  shorttitle = {Are `Ghost Engineers' Real?},
  author = {Bonos, Lisa},
  year = {2024},
  month = dec,
  journal = {Washington Post},
  issn = {0190-8286},
  urldate = {2024-12-09},
  abstract = {A Stanford researcher says data on programmer productivity suggests 14 percent of remote software engineers get barely anything done.},
  langid = {american},
  file = {/Users/john-flournoy/Zotero/storage/XW2CD9ZF/ghost-engineers-programming-productivity-coding.html}
}

@inproceedings{bouwersSoftwareMetricsPitfalls2013,
  title = {Software Metrics: {{Pitfalls}} and Best Practices},
  shorttitle = {Software Metrics},
  booktitle = {2013 35th {{International Conference}} on {{Software Engineering}} ({{ICSE}})},
  author = {Bouwers, Eric and {van Deursen}, Arie and Visser, Joost},
  year = {2013},
  month = may,
  pages = {1491--1492},
  issn = {1558-1225},
  doi = {10.1109/ICSE.2013.6606755},
  urldate = {2025-02-14},
  abstract = {Using software metrics to keep track of the progress and quality of products and processes is a common practice in industry. Additionally, designing, validating and improving metrics is an important research area. Although using software metrics can help in reaching goals, the effects of using metrics incorrectly can be devastating. In this tutorial we leverage 10 years of metrics-based risk assessment experience to illustrate the benefits of software metrics, discuss different types of metrics and explain typical usage scenario's. Additionally, we explore various ways in which metrics can be interpreted using examples solicited from participants and practical assignments based on industry cases. During this process we will present the four common pitfalls of using software metrics. In particular, we explain why metrics should be placed in a context in order to maximize their benefits. A methodology based on benchmarking to provide such a context is discussed and illustrated by a model designed to quantify the technical quality of a software system. Examples of applying this model in industry are given and challenges involved in interpreting such a model are discussed. This tutorial provides an in-depth overview of the benefits and challenges involved in applying software metrics. At the end you will have all the information you need to use, develop and evaluate metrics constructively.},
  keywords = {Benchmark testing,Educational institutions,Software metrics,Software quality,Tutorials}
}

@article{brocknerInteractiveEffectsProcedural1994,
  title = {Interactive {{Effects}} of {{Procedural Justice}} and {{Outcome Negativity}} on {{Victims}} and {{Survivors}} of {{Job Loss}}},
  author = {Brockner, Joel and Konovsky, Mary and {Cooper-Schneider}, Rochelle and Folger, Robert and Martin, Christopher and Bies, Robert J.},
  year = {1994},
  month = apr,
  journal = {Academy of Management Journal},
  volume = {37},
  number = {2},
  pages = {397--409},
  publisher = {Academy of Management},
  issn = {0001-4273},
  doi = {10.5465/256835},
  urldate = {2025-02-14},
  abstract = {Three studies respectively explored the interactive effects of procedural justice and outcome negativity on the victims of job layoffs, on survivors, and on lame ducks, employees who knew they would soon be laid off. Consistent results emerged for all three types. When procedural justice was perceived to be low, individuals reacted more adversely to the extent that outcomes were perceived to be negative. When individuals felt that procedural justice was relatively high, however, perceived outcome negativity was not related to their reactions.},
  keywords = {ADMINISTRATIVE procedure,DOWNSIZING of organizations,EMPLOYEES - Dismissal of,FAIRNESS,JUSTICE,LAYOFFS,NEGATIVITY (Philosophy),ORGANIZATIONAL sociology,PERSONNEL management,PROCEDURE (Law)}
}

@article{brocknerProceduralFairnessOutcome2007,
  title = {Procedural Fairness, Outcome Favorability, and Judgments of an Authority's Responsibility},
  author = {Brockner, Joel and Fishman, Ariel Y. and Reb, Jochen and Goldman, Barry and Spiegel, Scott and Garden, Charlee},
  year = {2007},
  journal = {Journal of Applied Psychology},
  volume = {92},
  number = {6},
  pages = {1657--1671},
  publisher = {American Psychological Association},
  address = {US},
  issn = {1939-1854},
  doi = {10.1037/0021-9010.92.6.1657},
  abstract = {Fairness theory (R. Folger \& R. Cropanzano, 1998, 2001) postulates that, particularly in the face of unfavorable outcomes, employees judge an organizational authority to be more responsible for their outcomes when the authority exhibits lower procedural fairness. Three studies lent empirical support to this notion. Furthermore, 2 of the studies showed that attributions of responsibility to the authority mediated the relationship between the authority's procedural fairness and employees' reactions to unfavorable outcomes. The findings (a) provide support for a key assumption of fairness theory, (b) help to account for the pervasive interactive effect of procedural fairness and outcome favorability on employees' attitudes and behaviors, and (c) contribute to an emerging trend in justice research concerned with how people use procedural fairness information to make attributions of responsibility for their outcomes. Practical implications, limitations, and suggestions for future research also are discussed. (PsycInfo Database Record (c) 2020 APA, all rights reserved)},
  keywords = {Attribution,Employee Attitudes,Fairness,Judgment,Procedural Justice},
  file = {/Users/john-flournoy/Zotero/storage/ZQUUF68E/Brockner et al. - 2007 - Procedural fairness, outcome favorability, and judgments of an authority's responsibility.pdf;/Users/john-flournoy/Zotero/storage/GE9QEZ3U/2007-16921-014.html}
}

@book{brooksMythicalManmonthEssays1975,
  title = {The Mythical Man-Month: Essays on Software Engineering},
  shorttitle = {The Mythical Man-Month},
  author = {Brooks, Frederick P.},
  year = {1975},
  publisher = {Addison-Wesley Pub. Co.},
  address = {Reading, Mass.},
  abstract = {The orderly Sweet-Williams are dismayed at their son's fondness for the messy pastime of gardening.},
  isbn = {978-0-201-00650-6},
  langid = {english},
  lccn = {QA76.6 .B75},
  keywords = {Computer programming,Management,Software engineering},
  annotation = {HOLLIS number: 990009512450203941},
  file = {/Users/john-flournoy/Zotero/storage/GAAZQCDA/Brooks - The Mythical Man Month.pdf}
}

@misc{bruneauxWhatMcKinseyHas2024,
  title = {What {{McKinsey}} Has to Say about Developer Productivity},
  author = {Bruneaux, Taylor},
  year = {2024},
  month = may,
  urldate = {2025-02-06},
  abstract = {Explore alternative perspectives on McKinsey's developer productivity framework. Learn key strategies and metrics for building high-performing engineering teams.},
  howpublished = {https://getdx.com/blog/mckinsey-developer-productivity/},
  langid = {english},
  annotation = {https://web.archive.org/web/20240915004949/https://getdx.com/blog/mckinsey-developer-productivity/},
  file = {/Users/john-flournoy/Zotero/storage/E6QUFMEG/mckinsey-developer-productivity.html}
}

@article{burknerAdvancedBayesianMultilevel2018,
  ids = {burkner2018},
  title = {Advanced {{Bayesian}} Multilevel Modeling with the {{R}} Package {{brms}}},
  author = {B{\"u}rkner, Paul-Christian},
  year = {2018},
  journal = {The R Journal},
  volume = {10},
  number = {1},
  pages = {395--411},
  doi = {10.32614/RJ-2018-017},
  encoding = {UTF-8},
  file = {/Users/john-flournoy/Zotero/storage/3DIFFMKE/Bürkner-2018-Advanced_Bayesian_multilevel_modeling_with_the_R_package_span.pdf}
}

@article{burknerBayesianItemResponse2021,
  title = {Bayesian {{Item Response Modeling}} in {{R}} with Brms and {{Stan}}},
  author = {B{\"u}rkner, Paul-Christian},
  year = {2021},
  month = nov,
  journal = {Journal of Statistical Software},
  volume = {100},
  pages = {1--54},
  issn = {1548-7660},
  doi = {10.18637/jss.v100.i05},
  urldate = {2025-02-11},
  abstract = {Item response theory (IRT) is widely applied in the human sciences to model persons' responses on a set of items measuring one or more latent constructs. While several R packages have been developed that implement IRT models, they tend to be restricted to respective pre-specified classes of models. Further, most implementations are frequentist while the availability of Bayesian methods remains comparably limited. I demonstrate how to use the R package brms together with the probabilistic programming language Stan to specify and fit a wide range of Bayesian IRT models using flexible and intuitive multilevel formula syntax. Further, item and person parameters can be related in both a linear or non-linear manner. Various distributions for categorical, ordinal, and continuous responses are supported. Users may even define their own custom response distribution for use in the presented framework. Common IRT model classes that can be specified natively in the presented framework include 1PL and 2PL logistic models optionally also containing guessing parameters, graded response and partial credit ordinal models, as well as drift diffusion models of response times coupled with binary decisions. Posterior distributions of item and person parameters can be conveniently extracted and postprocessed. Model fit can be evaluated and compared using Bayes factors and efficient cross-validation procedures.},
  copyright = {Copyright (c) 2021 Paul-Christian B{\"u}rkner},
  langid = {english},
  keywords = {Bayesian Statistics,brms,Item Response Theory,R,Stan},
  file = {/Users/john-flournoy/Zotero/storage/VRG24YJM/Bürkner - 2021 - Bayesian Item Response Modeling in R with brms and Stan.pdf}
}

@article{burknerBrmsPackageBayesian2017,
  ids = {burkner2017a},
  title = {Brms: {{An R Package}} for {{Bayesian Multilevel Models Using Stan}}},
  shorttitle = {Brms},
  author = {B{\"u}rkner, Paul-Christian},
  year = {2017},
  month = aug,
  journal = {Journal of Statistical Software},
  volume = {80},
  number = {1},
  pages = {1--28},
  issn = {1548-7660},
  doi = {10.18637/jss.v080.i01},
  urldate = {2021-03-26},
  copyright = {Copyright (c) 2017 Paul-Christian B{\"u}rkner},
  encoding = {UTF-8},
  langid = {english},
  keywords = {Bayesian inference,MCMC,multilevel model,ordinal data,R,Stan},
  file = {/Users/john-flournoy/Zotero/storage/WWDWSX92/Bürkner_2017_brms.pdf;/Users/john-flournoy/Zotero/storage/B9RWF7R5/v080i01.html}
}

@misc{burknerPosteriorToolsWorking2023,
  title = {Posterior: {{Tools}} for Working with Posterior Distributions},
  author = {B{\"u}rkner, Paul-Christian and Gabry, Jonah and Kay, Matthew and Vehtari, Aki},
  year = {2023}
}

@article{caesensPerceivedOrganizationalSupport2017,
  title = {Perceived Organizational Support and Employees' Well-Being: The Mediating Role of Organizational Dehumanization},
  shorttitle = {Perceived Organizational Support and Employees' Well-Being},
  author = {Caesens, Ga{\"e}tane and Stinglhamber, Florence and Demoulin, St{\'e}phanie and De Wilde, Matthias},
  year = {2017},
  month = jul,
  journal = {European Journal of Work and Organizational Psychology},
  volume = {26},
  number = {4},
  pages = {527--540},
  publisher = {Routledge},
  issn = {1359-432X},
  doi = {10.1080/1359432X.2017.1319817},
  urldate = {2025-02-14},
  abstract = {Perceived organizational support (POS) has been found to predict important organizational outcomes such as increasing employees' well-being. In this research, we examine a new underlying mechanism of the relationship between POS and employees' well-being, that is, employees' perceptions that their organization dehumanizes them. This proposition was tested across two studies. Using an experimental design manipulating POS in a laboratory setting, Study 1 indicated that in the high POS condition, the subsequent feelings of being dehumanized by the organization were lower than in the low POS condition. More importantly, organizational dehumanization perceptions were found to mediate the POS condition and satisfaction link. Furthermore, using a sample of 1209 employees, results of Study 2 indicated that organizational dehumanization mediates the relationship between POS and three indicators of employees' well-being (i.e., job satisfaction, emotional exhaustion, and psychosomatic strains). Implications for research on both organizational support theory and dehumanization theory are discussed.},
  keywords = {emotional exhaustion,job satisfaction,organizational dehumanization,Perceived organizational support,psychosomatic strains}
}

@misc{careyWhy70Engineers2024,
  title = {Why 70\% of Engineers Avoid Measuring Lines of Code},
  author = {Carey, Scott},
  year = {2024},
  month = dec,
  journal = {LeadDev},
  urldate = {2024-12-05},
  abstract = {And four other key findings from the 2024 LeadDev Engineering Team Performance report.},
  howpublished = {https://leaddev.com/reporting/why-70-of-engineers-avoid-measuring-lines-of-code},
  langid = {american},
  file = {/Users/john-flournoy/Zotero/storage/XFJUQBFT/why-70-of-engineers-avoid-measuring-lines-of-code.html}
}

@article{carmelCycleTimePackaged1995,
  title = {Cycle {{Time}} in {{Packaged Software Firms}}},
  author = {Carmel, Erran},
  year = {1995},
  journal = {Journal of Product Innovation Management},
  volume = {12},
  number = {2},
  pages = {110--123},
  issn = {1540-5885},
  doi = {10.1111/j.1540-5885.1995.jpim122_0110.xml.x},
  urldate = {2025-02-06},
  abstract = {Reduction of cycle time (i.e., time to market) is a fundamental competitive strategy in many industries. With the current proliferation of personal computer (PC) technology, software developers face intense competition. However, unlike their counterparts in other consumer goods markets, product development managers in the software industry appear to be less concerned with (or even aware of) cycle time than they are with other competitive variables. To explore the role of cycle-time reduction in the process of developing software packages, Erran Carmel conducted a study of 15 software package companies in the Washington-Baltimore metropolitan area. The survey results indicate that software package developers are generally unaware of cycle-time reduction as a management concept. Instead, software developers tend to focus on rapid development, with an emphasis on ``crunch'' periods of intense effort aimed at meeting a deadline. During these periods of peak activity, 87\% of the developers in core teams worked more than 56 hours per week and 47\% worked more than 71 hours per week. In terms of the organizational variables necessary for cycle-time reduction, all of the survey respondents point to the importance of a small, cohesive, core development team, similar to a cross-functional team. Members of the core team are entrepreneurial and share a common vision of the product's design, use, and long-term direction. As for the development variables associated with cycle-time reduction, the software companies in the survey typically do not use process models or risk analysis techniques. Similarly, they devote scant resources to automated tools. For the majority of the firms in the survey, annual investment in automated software development tools is less than \$1,000 per developer. On the other hand, reuse (as embodied in object-oriented design and development) and incremental innovation are important to all of the sample firms. Although quality assurance (QA) activities are not addressed in the innovation literature, QA is a significant cycle-time component in software development. As demonstrated by the industry practice of releasing products with long lists of known defects, the software product category clearly has quality problems. With the current boom in new users, pressure will grow for improved quality. To remain competitive, software developers need to determine how they can better integrate QA activities into the development process while reducing cycle time.},
  copyright = {{\copyright} 1995 Elsevier Science Inc.},
  langid = {english},
  file = {/Users/john-flournoy/Zotero/storage/58HUUMRV/j.1540-5885.1995.jpim122_0110.xml.x20170405-4356-czjbxf-libre.pdf;/Users/john-flournoy/Zotero/storage/CN8V4ZD3/j.1540-5885.1995.jpim122_0110.xml.html}
}

@manual{chengHtmltoolsToolsHTML2024,
  type = {Manual},
  title = {Htmltools: {{Tools}} for {{HTML}}},
  author = {Cheng, Joe and Sievert, Carson and Schloerke, Barret and Chang, Winston and Xie, Yihui and Allen, Jeff},
  year = {2024}
}

@misc{chhunejaWhy50Developers2024,
  title = {Why 50\% {{Developers Hate DORA Metrics}}?},
  author = {Chhuneja, Shivam},
  year = {2024},
  month = apr,
  urldate = {2025-02-06},
  abstract = {Why do you think developers across the world hate DORA metrics? Why do you think engineering leaders love DORA metrics? Let's explore!},
  howpublished = {https://middlewarehq.com/blog/why-50-developers-hate-dora-metrics},
  langid = {english},
  annotation = {https://web.archive.org/web/20240916154049/https://www.middlewarehq.com/blog/why-50-developers-hate-dora-metrics},
  file = {/Users/john-flournoy/Zotero/storage/IA6K94BM/why-50-developers-hate-dora-metrics.html}
}

@article{clincySoftwareDevelopmentProductivity2003,
  title = {Software {{Development Productivity}} and {{Cycle Time Reduction}}},
  author = {Clincy, Victor},
  year = {2003},
  month = dec,
  journal = {Journal of Computing Sciences in Colleges},
  volume = {19},
  number = {2},
  pages = {278--287},
  file = {/Users/john-flournoy/Zotero/storage/3KCD9XCD/Clincy - Software Development Productivity and Cycle Time R.pdf;/Users/john-flournoy/Zotero/storage/G2QAASML/1581.html}
}

@book{collettModellingSurvivalData1994,
  title = {Modelling Survival Data in Medical Research},
  author = {Collett, D.},
  year = {1994},
  series = {Texts in Statistical Science},
  edition = {1st ed.},
  publisher = {Chapman \& Hall},
  address = {London ; New York},
  abstract = {This book begins with an introduction to survival analysis and a description of four studies in which survival data were obtained. These and other data sets are then used to illustrate the techniques presented as follows: *The Cox and Weibull proportional hazards models; *models with time-dependent variables; *interval-censored survival data; *model checking; *use of statistical packages. The book is designed to be used by statisticians in the pharmaceutical industry, and by numerate scientists and clinicians analysing their own data sets. Also useful to students on courses of survival analysis.},
  isbn = {978-0-412-44880-5},
  langid = {english},
  lccn = {WA 950 C689m 1994, R853.S7 C65 1994},
  keywords = {Computer science,Failure time data analysis,Linear models (Statistics),Mathematics,Medicine,Prognosis,Research,Statistical methods},
  annotation = {HOLLIS number: 990050915650203941}
}

@misc{coteOnlyPeopleWho2023,
  title = {The Only People Who Don't like Metrics Are the People Being Measured, or, Developer Productivity Metrics Quicksand},
  author = {Cot{\'e}},
  year = {2023},
  month = feb,
  urldate = {2025-02-06},
  abstract = {Recent thought leading on measuring developer productivity},
  howpublished = {https://newsletter.cote.io/p/the-only-people-who-dont-like-metrics},
  langid = {english},
  annotation = {https://web.archive.org/web/20241005132508/https://newsletter.cote.io/p/the-only-people-who-dont-like-metrics},
  file = {/Users/john-flournoy/Zotero/storage/72NUCIZE/the-only-people-who-dont-like-metrics.html}
}

@article{curranDisaggregationPersonPerson2011,
  ids = {curran_disaggregation_2011},
  title = {The {{Disaggregation}} of {{Within-Person}} and {{Between-Person Effects}} in {{Longitudinal Models}} of {{Change}}},
  author = {Curran, Patrick J. and Bauer, Daniel J.},
  year = {2011},
  month = jan,
  journal = {Annual Review of Psychology},
  volume = {62},
  number = {1},
  pages = {583--619},
  issn = {0066-4308, 1545-2085},
  doi = {10.1146/annurev.psych.093008.100356},
  urldate = {2018-10-25},
  abstract = {Longitudinal models are becoming increasingly prevalent in the behavioral sciences, with key advantages including increased power, more comprehensive measurement, and establishment of temporal precedence. One particularly salient strength offered by longitudinal data is the ability to disaggregate between-person and within-person effects in the regression of an outcome on a time-varying covariate. However, the ability to disaggregate these effects has not been fully capitalized upon in many social science research applications. Two likely reasons for this omission are the general lack of discussion of disaggregating effects in the substantive literature and the need to overcome several remaining analytic challenges that limit existing quantitative methods used to isolate these effects in practice. This review explores both substantive and quantitative issues related to the disaggregation of effects over time, with a particular emphasis placed on the multilevel model. Existing analytic methods are reviewed, a general approach to the problem is proposed, and both the existing and proposed methods are demonstrated using several artificial data sets. Potential limitations and directions for future research are discussed, and recommendations for the disaggregation of effects in practice are offered.},
  langid = {english},
  file = {/Users/john-flournoy/Zotero/storage/5NTK6JY3/Curran and Bauer - 2011 - The Disaggregation of Within-Person and Between-Pe.pdf;/Users/john-flournoy/Zotero/storage/XKHMJDQ4/Curran and Bauer - 2011 - The Disaggregation of Within-Person and Between-Pe.pdf}
}

@misc{denisov-blanchPredictingExpertEvaluations2024,
  title = {Predicting {{Expert Evaluations}} in {{Software Code Reviews}}},
  author = {{Denisov-Blanch}, Yegor and Ciobanu, Igor and Obstbaum, Simon and Kosinski, Michal},
  year = {2024},
  month = sep,
  number = {arXiv:2409.15152},
  eprint = {2409.15152},
  primaryclass = {cs},
  publisher = {arXiv},
  doi = {10.48550/arXiv.2409.15152},
  urldate = {2024-12-17},
  abstract = {Manual code reviews are an essential but time-consuming part of software development, often leading reviewers to prioritize technical issues while skipping valuable assessments. This paper presents an algorithmic model that automates aspects of code review typically avoided due to their complexity or subjectivity, such as assessing coding time, implementation time, and code complexity. Instead of replacing manual reviews, our model adds insights that help reviewers focus on more impactful tasks. Calibrated using expert evaluations, the model predicts key metrics from code commits with strong correlations to human judgments (r = 0.82 for coding time, r = 0.86 for implementation time). By automating these assessments, we reduce the burden on human reviewers and ensure consistent analysis of time-consuming areas, offering a scalable solution alongside manual reviews. This research shows how automated tools can enhance code reviews by addressing overlooked tasks, supporting data-driven decisions and improving the review process.},
  archiveprefix = {arXiv},
  keywords = {Computer Science - Software Engineering},
  file = {/Users/john-flournoy/Zotero/storage/GNBM9BTM/Denisov-Blanch et al. - 2024 - Predicting Expert Evaluations in Software Code Reviews.pdf;/Users/john-flournoy/Zotero/storage/44SKAP95/2409.html}
}

@inproceedings{devanbuBeliefEvidenceEmpirical2016,
  title = {Belief \& Evidence in Empirical Software Engineering},
  booktitle = {Proceedings of the 38th {{International Conference}} on {{Software Engineering}}},
  author = {Devanbu, Prem and Zimmermann, Thomas and Bird, Christian},
  year = {2016},
  month = may,
  series = {{{ICSE}} '16},
  pages = {108--119},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  doi = {10.1145/2884781.2884812},
  urldate = {2025-02-27},
  abstract = {Empirical software engineering has produced a steady stream of evidence-based results concerning the factors that affect important outcomes such as cost, quality, and interval. However, programmers often also have strongly-held a priori opinions about these issues. These opinions are important, since developers are highly-trained professionals whose beliefs would doubtless affect their practice. As in evidence-based medicine, disseminating empirical findings to developers is a key step in ensuring that the findings impact practice. In this paper, we describe a case study, on the prior beliefs of developers at Microsoft, and the relationship of these beliefs to actual empirical data on the projects in which these developers work. Our findings are that a) programmers do indeed have very strong beliefs on certain topics b) their beliefs are primarily formed based on personal experience, rather than on findings in empirical research and c) beliefs can vary with each project, but do not necessarily correspond with actual evidence in that project. Our findings suggest that more effort should be taken to disseminate empirical findings to developers and that more in-depth study the interplay of belief and evidence in software practice is needed.},
  isbn = {978-1-4503-3900-1},
  file = {/Users/john-flournoy/Zotero/storage/9RPXLSDE/Devanbu et al. - 2016 - Belief & evidence in empirical software engineering.pdf}
}

@inproceedings{eversImprovingEngineeringProductivity1998,
  title = {Improving Engineering Productivity: A Time Study of an Engineer's Typical Work Day},
  shorttitle = {Improving Engineering Productivity},
  booktitle = {{{IEMC}} '98 {{Proceedings}}. {{International Conference}} on {{Engineering}} and {{Technology Management}}. {{Pioneering New Technologies}}: {{Management Issues}} and {{Challenges}} in the {{Third Millennium}} ({{Cat}}. {{No}}.{{98CH36266}})},
  author = {Evers, J.H. and Oehler, G.M. and Tucker, M.G.},
  year = {1998},
  month = oct,
  pages = {377--383},
  doi = {10.1109/IEMC.1998.727789},
  urldate = {2025-02-07},
  abstract = {We present the results of a detailed time study performed in 1996, to understand an engineer's typical working day. The study was developed using a design of experiments approach, to identify important factors affecting engineers working on product development projects. This study included extensive debriefings and data analysis to characterize sources of variability. The results provide insight into ways to increase the time spent on the value-added, core design work. In particular, it illustrates that many low-technology solutions can have a noticeable impact on engineering productivity, by reducing the time spent on nonengineering activities. This can also serve to guide corporate improvement efforts, as well as investment decisions. Several of the observations and conclusions are discussed in more detail. An overview of selected approaches that can be used on individual projects to address the issues is provided, along with some examples of their actual use and results.},
  keywords = {Computational fluid dynamics,Costs,Data analysis,Design engineering,Information analysis,Instruments,Investments,Manufacturing,Product development,Productivity},
  file = {/Users/john-flournoy/Zotero/storage/892MDIRA/Evers et al. - 1998 - Improving engineering productivity a time study of an engineer's typical work day.pdf;/Users/john-flournoy/Zotero/storage/A8874AZ4/727789.html}
}

@misc{finster5MinuteDevOps2023,
  title = {5 {{Minute DevOps}}: {{McKinsey Gets Developer Productivity Wrong}}},
  shorttitle = {5 {{Minute DevOps}}},
  author = {Finster, Bryan},
  year = {2023},
  month = sep,
  journal = {Medium},
  urldate = {2025-02-06},
  abstract = {Want to improve developer productivity? McKinsey wants to know, too. I wish they found out before they advised people.},
  langid = {english},
  file = {/Users/john-flournoy/Zotero/storage/BW96Z25T/5-minute-devops-mckinsey-gets-developer-productivity-wrong-573b57cd6f6a.html}
}

@article{flournoyNoSilverBullets,
  title = {No {{Silver Bullets}}: {{Why Understanding Software Cycle Time}} Is {{Messy}}, {{Not Magic}}},
  shorttitle = {No {{Silver Bullets}}},
  author = {Flournoy, John C. and Lee, Carol S. and Hicks, Catherine M. and Wu, Maggie},
  urldate = {2025-02-27},
  abstract = {Understanding factors that influence software development velocity is crucial for engineering teams and organizations, yet empirical evidence at scale remains limited. We analyze cycle time---a widely-used metric measuring time from ticket creation to completion---using a dataset of over 55,000 observations across 216 organizations. Through Bayesian hierarchical modeling that appropriately separates individual and organizational variation, we examine how coding time, task scoping, and collaboration patterns affect cycle time while characterizing its substantial variability across contexts. We find precise but modest associations between cycle time and factors including coding days per week, number of merged pull requests, and degree of collaboration. However, these effects are set against considerable unexplained variation both between and within individuals. Our findings suggest that while common workplace factors do influence cycle time in expected directions, any single observation provides limited signal about typical performance. This work demonstrates methods for analyzing complex operational metrics at scale while highlighting potential pitfalls in using such measurements to drive decision-making. We conclude that improving software delivery velocity likely requires systems-level thinking rather than individual-focused interventions.},
  langid = {english},
  file = {/Users/john-flournoy/Zotero/storage/J7K8Z6J6/bookish-adventure-1pq8g7l.pages.github.io.html}
}

@misc{flowHowIncreaseSoftware,
  title = {How to Increase Software Delivery Speeds by Reducing Cycle Time},
  author = {Flow}
}

@article{fordTaleTwoCities2021,
  title = {A {{Tale}} of {{Two Cities}}: {{Software Developers Working}} from {{Home}} during the {{COVID-19 Pandemic}}},
  shorttitle = {A {{Tale}} of {{Two Cities}}},
  author = {Ford, Denae and Storey, Margaret-Anne and Zimmermann, Thomas and Bird, Christian and Jaffe, Sonia and Maddila, Chandra and Butler, Jenna L. and Houck, Brian and Nagappan, Nachiappan},
  year = {2021},
  month = dec,
  journal = {ACM Trans. Softw. Eng. Methodol.},
  volume = {31},
  number = {2},
  pages = {27:1--27:37},
  issn = {1049-331X},
  doi = {10.1145/3487567},
  urldate = {2024-12-17},
  abstract = {The COVID-19 pandemic has shaken the world to its core and has provoked an overnight exodus of developers who normally worked in an office setting to working from home. The magnitude of this shift and the factors that have accompanied this new unplanned work setting go beyond what the software engineering community has previously understood to be remote work. To find out how developers and their productivity were affected, we distributed two surveys (with a combined total of 3,634 responses that answered all required questions) weeks apart to understand the presence and prevalence of the benefits, challenges, and opportunities to improve this special circumstance of remote work. From our thematic qualitative analysis and statistical quantitative analysis, we find that there is a dichotomy of developer experiences influenced by many different factors (that for some are a benefit, while for others a challenge). For example, a benefit for some was being close to family members but for others having family members share their working space and interrupting their focus, was a challenge. Our surveys led to powerful narratives from respondents and revealed the scale at which these experiences exist to provide insights as to how the future of (pandemic) remote work can evolve.},
  keywords = {Computer Science - Computers and Society,Computer Science - Human-Computer Interaction,Computer Science - Software Engineering},
  file = {/Users/john-flournoy/Zotero/storage/7H7ATJYX/Ford et al. - 2021 - A Tale of Two Cities Software Developers Working from Home during the COVID-19 Pandemic.pdf;/Users/john-flournoy/Zotero/storage/CY77E56E/Ford et al. - 2022 - A Tale of Two Cities Software Developers Working .pdf}
}

@article{forsgrenSPACEDeveloperProductivity2021,
  title = {The {{SPACE}} of {{Developer Productivity}}: {{There}}'s More to It than You Think.},
  shorttitle = {The {{SPACE}} of {{Developer Productivity}}},
  author = {Forsgren, Nicole and Storey, Margaret-Anne and Maddila, Chandra and Zimmermann, Thomas and Houck, Brian and Butler, Jenna},
  year = {2021},
  month = mar,
  journal = {Queue},
  volume = {19},
  number = {1},
  pages = {Pages 10:20--Pages 10:48},
  issn = {1542-7730},
  doi = {10.1145/3454122.3454124},
  urldate = {2024-09-25},
  abstract = {Developer productivity is about more than an individual's activity levels or the efficiency of the engineering systems relied on to ship software, and it cannot be measured by a single metric or dimension. The SPACE framework captures different dimensions of productivity, and here we demonstrate how this framework can be used to understand productivity in practice and why using it will help teams better understand developer productivity and create better measures to inform their work and teams.},
  file = {/Users/john-flournoy/Zotero/storage/3ZPIZCJF/Forsgren et al. - 2021 - The SPACE of Developer Productivity There's more to it than you think..pdf}
}

@inproceedings{fraserNoSilverBullet2007,
  title = {"{{No}} Silver Bullet" Reloaded: Retrospective on "Essence and Accidents of Software Engineering"},
  shorttitle = {"{{No}} Silver Bullet" Reloaded},
  booktitle = {Companion to the 22nd {{ACM SIGPLAN}} Conference on {{Object-oriented}} Programming Systems and Applications Companion},
  author = {Fraser, Steven D. and Brooks, Frederick P. and Fowler, Martin and Lopez, Ricardo and Namioka, Aki and Northrop, Linda and Parnas, David Lorge and Thomas, David},
  year = {2007},
  month = oct,
  series = {{{OOPSLA}} '07},
  pages = {1026--1030},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  doi = {10.1145/1297846.1297973},
  urldate = {2025-02-14},
  abstract = {Twenty years after the paper No Silver Bullet: Essence and Accidents of Software Engineering by Frederick P. Brooks first appeared in IEEE Computer in April 1987 (following its 1986 publication in Information Processing, ISBN 0444-7077-3) does the premise hold that the complexity of software is not accidental? How have the "hopes for silver" which included high-level language advances, object-oriented programming, artificial intelligence, expert systems, great designers, etc. - evolved? Panelists will discuss what has changed and/or stayed the same in the past twenty years - and the paper's influence on the community.},
  isbn = {978-1-59593-865-7}
}

@manual{gabryCmdstanrInterfaceCmdStan2024,
  type = {Manual},
  title = {Cmdstanr: {{R Interface}} to '{{CmdStan}}'},
  author = {Gabry, Jonah and {\v C}e{\v s}novar, Rok and Johnson, Andrew and Bronder, Steve},
  year = {2024}
}

@article{garousiGuidelinesIncludingGrey2019,
  title = {Guidelines for Including Grey Literature and Conducting Multivocal Literature Reviews in Software Engineering},
  author = {Garousi, Vahid and Felderer, Michael and M{\"a}ntyl{\"a}, Mika V.},
  year = {2019},
  month = feb,
  journal = {Information and Software Technology},
  volume = {106},
  pages = {101--121},
  issn = {0950-5849},
  doi = {10.1016/j.infsof.2018.09.006},
  urldate = {2024-12-17},
  abstract = {Context A Multivocal Literature Review (MLR) is a form of a Systematic Literature Review (SLR) which includes the grey literature (e.g., blog posts, videos and white papers) in addition to the published (formal) literature (e.g., journal and conference papers). MLRs are useful for both researchers and practitioners since they provide summaries both the state-of-the art and --practice in a given area. MLRs are popular in other fields and have recently started to appear in software engineering (SE). As more MLR studies are conducted and reported, it is important to have a set of guidelines to ensure high quality of MLR processes and their results. Objective There are several guidelines to conduct SLR studies in SE. However, several phases of MLRs differ from those of traditional SLRs, for instance with respect to the search process and source quality assessment. Therefore, SLR guidelines are only partially useful for conducting MLR studies. Our goal in this paper is to present guidelines on how to conduct MLR studies in SE. Method To develop the MLR guidelines, we benefit from several inputs: (1) existing SLR guidelines in SE, (2), a literature survey of MLR guidelines and experience papers in other fields, and (3) our own experiences in conducting several MLRs in SE. We took the popular SLR guidelines of Kitchenham and Charters as the baseline and extended/adopted them to conduct MLR studies in SE. All derived guidelines are discussed in the context of an already-published MLR in SE as the running example. Results The resulting guidelines cover all phases of conducting and reporting MLRs in SE from the planning phase, over conducting the review to the final reporting of the review. In particular, we believe that incorporating and adopting a vast set of experience-based recommendations from MLR guidelines and experience papers in other fields have enabled us to propose a set of guidelines with solid foundations. Conclusion Having been developed on the basis of several types of experience and evidence, the provided MLR guidelines will support researchers to effectively and efficiently conduct new MLRs in any area of SE. The authors recommend the researchers to utilize these guidelines in their MLR studies and then share their lessons learned and experiences.},
  keywords = {Evidence-based software engineering,Grey literature,Guidelines,Literature study,Multivocal literature review,Systematic literature review,Systematic mapping study},
  file = {/Users/john-flournoy/Zotero/storage/FRNJ23EF/Garousi et al. - 2019 - Guidelines for including grey literature and conducting multivocal literature reviews in software en.pdf}
}

@techreport{gelman,
  title = {Stan {{Modeling Language Users Guide}} and {{Reference Manual}}, 2.35},
  author = {Stan Development Team},
  year = {2024},
  keywords = {_diss},
  file = {/Users/john-flournoy/Zotero/storage/3A3N9F2E/Gelman and Stan Development Team - Stan Modeling Language User's Guide and Reference .pdf}
}

@article{GelmanPowerCalculationsAssessing2014,
  title = {Beyond {{Power Calculations Assessing Type S}} ({{Sign}}) and {{Type M}} ({{Magnitude}}) {{Errors}}},
  author = {Gelman, Andrew and Carlin, John},
  year = {2014},
  month = nov,
  journal = {Perspectives on Psychological Science},
  volume = {9},
  number = {6},
  pages = {641--651},
  issn = {1745-6916, 1745-6924},
  doi = {10.1177/1745691614551642},
  urldate = {2015-01-15},
  abstract = {Statistical power analysis provides the conventional approach to assess error rates when designing a research study. However, power analysis is flawed in that a narrow emphasis on statistical significance is placed as the primary focus of study design. In noisy, small-sample settings, statistically significant results can often be misleading. To help researchers address this problem in the context of their own studies, we recommend design calculations in which (a) the probability of an estimate being in the wrong direction (Type S [sign] error) and (b) the factor by which the magnitude of an effect might be overestimated (Type M [magnitude] error or exaggeration ratio) are estimated. We illustrate with examples from recent published research and discuss the largest challenge in a design calculation: coming up with reasonable estimates of plausible effect sizes based on external information.},
  langid = {english},
  keywords = {design calculation,exaggeration ratio,power analysis,replication crisis,statistical significance,Type M error,Type S error},
  file = {/Users/john-flournoy/Zotero/storage/DX4CTR8Z/Gelman_Carlin-2014-Beyond_Power_Calculations_Assessing_Type_S_(Sign)_and_Type_M_(Magnitude)_Errors.pdf;/Users/john-flournoy/Zotero/storage/RTHJ82VW/Gelman_Carlin-2014-Beyond_Power_Calculations_Assessing_Type_S_(Sign)_and_Type_M_(Magnitude)_Errors.pdf;/Users/john-flournoy/Zotero/storage/U7GWF8VN/641.html}
}

@misc{GhostsLectricity2024,
  title = {Ghosts of `lectricity},
  year = {2024},
  month = dec,
  journal = {AnElaborationOfCarbon},
  urldate = {2024-12-16},
  abstract = {I haven't written a post in a long old while. I saw a thread on Bluesky about ghost engineers and it felt like the perfect subject for a chilling festive post. Here we are. So, Ghost Engineer{\dots}},
  langid = {english},
  file = {/Users/john-flournoy/Zotero/storage/FUNSHRLS/ghosts-of-lectricity.html}
}

@manual{gohelFlextableFunctionsTabular2024,
  type = {Manual},
  title = {Flextable: {{Functions}} for Tabular Reporting},
  author = {Gohel, David and Skintzos, Panagiotis},
  year = {2024}
}

@misc{gralhaReduceCycleTime2022,
  title = {Reduce Cycle Time - Best Practices},
  author = {Gralha, Catarina},
  year = {2022},
  month = aug
}

@misc{greilerActionableFrameworkUnderstanding2022a,
  title = {An {{Actionable Framework}} for {{Understanding}} and {{Improving Developer Experience}}},
  author = {Greiler, Michaela and Storey, Margaret-Anne and Noda, Abi},
  year = {2022},
  month = may,
  number = {arXiv:2205.06352},
  eprint = {2205.06352},
  primaryclass = {cs},
  publisher = {arXiv},
  doi = {10.48550/arXiv.2205.06352},
  urldate = {2024-12-19},
  abstract = {Developer experience is an important concern for software organizations as enhancing developer experience improves productivity, satisfaction, engagement and retention. We set out to understand what affects developer experience through semi-structured interviews with 21 developers from industry, which we transcribed and iteratively coded. Our findings elucidate factors that affect developer experience and characteristics that influence their respective importance to individual developers. We also identify strategies employed by individuals and teams to improve developer experience and the barriers that stand in their way. Lastly, we describe the coping mechanisms of developers when developer experience cannot be sufficiently improved. Our findings result in the DX Framework, an actionable conceptual framework for understanding and improving developer experience. The DX Framework provides a go-to reference for organizations that want to enable more productive and effective work environments for their developers.},
  archiveprefix = {arXiv},
  langid = {english},
  keywords = {Computer Science - Software Engineering},
  file = {/Users/john-flournoy/Zotero/storage/VDVPBE3B/Greiler et al. - 2022 - An Actionable Framework for Understanding and Improving Developer Experience.pdf}
}

@article{griffinMetricsMeasuringProduct1993,
  title = {Metrics for {{Measuring Product Development Cycle Time}}},
  author = {Griffin, Abbie},
  year = {1993},
  journal = {Journal of Product Innovation Management},
  volume = {10},
  number = {2},
  pages = {112--125},
  issn = {1540-5885},
  doi = {10.1111/1540-5885.1020112},
  urldate = {2025-02-14},
  abstract = {As global competitive pressure increases and product life cycles compress, many companies are trying to shorten their product development cycles. Firms are implementing a wide variety of different techniques, management processes and development strategies in their quest for shorter development cycles. We read anecdotal accounts of some efforts that herald great success stories but seldom hear about any failures. Unfortunately, some of the companies changing their development processes do so without any a priori basis for determining whether the process change will have helped or hindered them. The firm implements the new process without having a cycle time performance baseline against which to compare results from the new process. In this article, Abbie Griffin presents a method for obtaining product development cycle time performance baselines. She also demonstrates how to use them to either forecast expected project duration, given that you have not changed your development process, or determine whether a process change has actually decreased development cycle times.},
  copyright = {{\copyright} 1993 Elsevier Science Publishing Co., Inc.},
  langid = {english},
  file = {/Users/john-flournoy/Zotero/storage/2XCJD6EM/1540-5885.html}
}

@article{grisoldDigitalSurveillanceOrganizations2024,
  title = {Digital {{Surveillance}} in {{Organizations}}},
  author = {Grisold, Thomas and Seidel, Stefan and Heck, Markus and Berente, Nicholas},
  year = {2024},
  month = jun,
  journal = {Business \& Information Systems Engineering},
  volume = {66},
  number = {3},
  pages = {401--410},
  issn = {1867-0202},
  doi = {10.1007/s12599-024-00866-7},
  urldate = {2025-02-06},
  langid = {english},
  keywords = {Artificial intelligence,Behavioral visibility,Control,Digital surveillance,Digital trace data},
  file = {/Users/john-flournoy/Zotero/storage/3WIZNLRY/Grisold et al. - 2024 - Digital Surveillance in Organizations.pdf}
}

@inproceedings{guoNotMyBug2011,
  title = {"{{Not}} My Bug!" And Other Reasons for Software Bug Report Reassignments},
  booktitle = {Proceedings of the {{ACM}} 2011 Conference on {{Computer}} Supported Cooperative Work},
  author = {Guo, Philip J. and Zimmermann, Thomas and Nagappan, Nachiappan and Murphy, Brendan},
  year = {2011},
  month = mar,
  pages = {395--404},
  publisher = {ACM},
  address = {Hangzhou China},
  doi = {10.1145/1958824.1958887},
  urldate = {2024-10-02},
  abstract = {Bug reporting/fixing is an important social part of the software development process. The bug-fixing process inherently has strong inter-personal dynamics at play, especially in how to find the optimal person to handle a bug report. Bug report reassignments, which are a common part of the bug-fixing process, have rarely been studied.},
  isbn = {978-1-4503-0556-3},
  langid = {english},
  file = {/Users/john-flournoy/Zotero/storage/ENGX7TZW/Guo et al. - 2011 - Not my bug! and other reasons for software bug report reassignments.pdf}
}

@article{guptaKeyDriversReduced1998,
  title = {Key {{Drivers}} of {{Reduced Cycle Time}}},
  author = {Gupta, Ashok K. and Souder, William E.},
  year = {1998},
  month = jul,
  journal = {Research-Technology Management},
  volume = {41},
  number = {4},
  pages = {38--43},
  publisher = {Routledge},
  issn = {0895-6308},
  doi = {10.1080/08956308.1998.11671221},
  urldate = {2025-02-06},
  abstract = {This study demonstrates that short cycle times can be achieved while enhancing the effectiveness and quality of new products. Companies operating on short cycle times were found to extensively involve customers and suppliers in their new product R\&D processes, adopt a product design philosophy that encourages the development of future innovations at low cost, incorporate manufacturing concerns at the design stage, test new products in user facilities during their development, and have well-developed procedures for transferring learning from one project to another. Short-cycle-time companies were also more profitable than longer-cycle-time companies and exhibited new product success rates above their industry averages, thus demonstrating that short-cycle-time management pays off on the bottom line.},
  file = {/Users/john-flournoy/Zotero/storage/PTSYY42L/Gupta and Souder - 1998 - Key Drivers of Reduced Cycle Time.pdf}
}

@misc{harrellBayesianVsFrequentist2017,
  title = {Bayesian vs. {{Frequentist Statements About Treatment Efficacy}}},
  author = {Harrell, Frank},
  year = {2017},
  month = oct,
  journal = {Statistical Thinking},
  urldate = {2024-10-08},
  abstract = {This article contrasts language used when reporting a classical frequentist treatment comparison vs.~a Bayesian one, and describes why Bayesian statements convey more actionable information.},
  howpublished = {https://www.fharrell.com/post/bayes-freq-stmts/},
  langid = {english},
  file = {/Users/john-flournoy/Zotero/storage/4T3BEVYX/bayes-freq-stmts.html}
}

@misc{harrellClassificationVsPrediction2017,
  title = {Classification vs. {{Prediction}}},
  author = {Harrell, Frank},
  year = {2017},
  month = jan,
  journal = {Statistical Thinking},
  urldate = {2024-10-08},
  abstract = {Classification involves a forced-choice premature decision, and is often misused in machine learning applications. Probability modeling involves the quantification of tendencies and usually addresses the real project goals.},
  howpublished = {https://www.fharrell.com/post/classification/},
  langid = {english},
  file = {/Users/john-flournoy/Zotero/storage/KNW6C2ZQ/classification.html}
}

@book{harrellRegressionModelingStrategies2015,
  title = {Regression {{Modeling Strategies}}: {{With Applications}} to {{Linear Models}}, {{Logistic}} and {{Ordinal Regression}}, and {{Survival Analysis}}},
  shorttitle = {Regression {{Modeling Strategies}}},
  author = {Harrell ,, Frank E.},
  year = {2015},
  series = {Springer {{Series}} in {{Statistics}}},
  publisher = {Springer International Publishing},
  address = {Cham},
  doi = {10.1007/978-3-319-19425-7},
  urldate = {2024-10-08},
  copyright = {https://www.springernature.com/gp/researchers/text-and-data-mining},
  isbn = {978-3-319-19424-0 978-3-319-19425-7},
  langid = {english},
  file = {/Users/john-flournoy/Zotero/storage/5AKAJUHC/Harrell , - 2015 - Regression Modeling Strategies With Applications to Linear Models, Logistic and Ordinal Regression,.pdf}
}

@manual{henryRlangFunctionsBase2024,
  type = {Manual},
  title = {Rlang: {{Functions}} for Base Types and Core {{R}} and 'tidyverse' Features},
  author = {Henry, Lionel and Wickham, Hadley},
  year = {2024}
}

@misc{hicksCumulativeCultureTheory2024,
  title = {A {{Cumulative Culture Theory}} for {{Developer Problem-Solving}}},
  author = {Hicks, Catherine M. and Hevesi, Ana},
  year = {2024},
  month = nov,
  publisher = {PsyArXiv},
  doi = {10.31234/osf.io/tfjyw},
  urldate = {2025-02-05},
  abstract = {Understanding how developers problem-solve within ecosystems of practice, tooling, and social contexts is a critical step in determining which factors dampen, aid or accelerate software innovation. However, industry conceptions of developer problem-solving often focus on overly simplistic measures of output, over-extrapolate from small case studies, rely on conventional definitions of ``programming'' and short-term definitions of performance, fail to integrate the new economic features of the open collaborative innovation that marks software progress, and fail to integrate rich bodiesof evidence about problem-solving from the social sciences. We propose an alternative to individualistic explanations for software developer problem-solving: a Cumulative Culture theory for developer problem-solving. This paper aims to provide an interdisciplinary introduction to underappreciated elements of developers' communal, social cognition which are required for software development creativity and problem-solving, either empowering or constraining the solutions that developers access and implement. We propose that despite a conventional emphasis on individualistic explanations, developers' problem-solving (and hence, many of the central innovation cycles in software) is better described as a cumulative culture where collective social learning (rather than solitary and isolated genius) plays a key role in the transmission of solutions, the scaffolding of individual productivity, and the overall velocity of innovation.},
  copyright = {https://creativecommons.org/licenses/by/4.0/legalcode},
  langid = {english},
  file = {/Users/john-flournoy/Zotero/storage/ZSBY2JRR/Hicks and Hevesi - 2024 - A Cumulative Culture Theory for Developer Problem-Solving.pdf}
}

@techreport{hicksDeveloperThrivingFour2023,
  title = {Developer {{Thriving}}: {{The}} Four Factors That Drive {{Software Developer Productivity}} across {{Industries}}},
  shorttitle = {Developer {{Thriving}}},
  author = {Hicks, Catherine and Lee, Carol S. and Ramsey, Morgan},
  year = {2023},
  month = mar,
  institution = {Developer Success Lab at Pluralsight},
  urldate = {2025-01-08},
  abstract = {In this in-depth research report on Developer Thriving, we share our findings from three in-depth research studies looking at the factors that drive developers' productivity, visibility for engineering work, and how software teams measure their progress.},
  langid = {english},
  file = {/Users/john-flournoy/Zotero/storage/ZUFHTUIW/Research Paper  Developer Thriving The four factors that drive Software Developer Productivity acr.pdf;/Users/john-flournoy/Zotero/storage/K2G8ZAU3/developer-thriving-research-paper.html}
}

@article{hicksDeveloperThrivingFour2024,
  title = {Developer {{Thriving}}: {{Four Sociocognitive Factors That Create Resilient Productivity}} on {{Software Teams}}},
  shorttitle = {Developer {{Thriving}}},
  author = {Hicks, Catherine M. and Lee, Carol S. and Ramsey, Morgan},
  year = {2024},
  month = jul,
  journal = {IEEE Software},
  volume = {41},
  number = {4},
  pages = {68--77},
  issn = {1937-4194},
  doi = {10.1109/MS.2024.3382957},
  urldate = {2025-01-08},
  abstract = {We present a research-based framework for measuring successful environments on software teams for long-term and sustainable sociocognitive problem-solving. Across 1,282 full-time developers in 12+ industries, we tested the factors of our framework and found it predictive of developers' self-reported productivity.},
  keywords = {Cognitive processes,Collaboration,Employee welfare,Human factors,Personnel,Predictive models,Problem-solving,Productivity,Psychology,Resilience,Social factors,Social implications of technology,Software development management,Surveys,Sustainable development,Teamwork},
  file = {/Users/john-flournoy/Zotero/storage/W2PGXQT5/Hicks et al. - 2024 - Developer Thriving Four Sociocognitive Factors That Create Resilient Productivity on Software Teams.pdf;/Users/john-flournoy/Zotero/storage/SUCG2UIX/10491133.html}
}

@misc{hicksNewDeveloperAI2024,
  title = {The {{New Developer}}: {{AI Skill Threat}}, {{Identity Change}} \& {{Developer Thriving}} in the {{Transition}} to {{AI-Assisted Software Development}}},
  shorttitle = {The {{New Developer}}},
  author = {Hicks, Catherine M. and Lee, Carol and {Foster-Marks}, Kristen},
  year = {2024},
  month = apr,
  publisher = {OSF},
  doi = {10.31234/osf.io/2gej5},
  urldate = {2024-10-02},
  abstract = {In this research study, we share original empirical research with 3000+ software engineers and developers across 12+ industries engaged in the transition to Generative AI-assisted software work. We bring a human-centered approach to pressing questions that engineering organizations are facing on the rapidly-changing possibilities of AI-assisted coding. How are developers impacted by changing demands on their roles? Where might there be emerging equity \&amp; opportunity gaps in who has access to these new development capabilities? What are the risks to the quality of technical work, and the developer productivity, thriving, and motivation which drive that technical work? From this work we present a new evidence-based framework to help developers, engineering managers, and leaders as they grapple with failure to thrive in the transition to AI-assisted work: AI Skill Threat. AI Skill Threat describes developers'  fear, anxiety, and worry that their current skills will quickly become obsolete as they adapt to AI-assisted coding. Our framework also predicts when and why AI Skill Threat emerges: engineers who maintain a strong belief in competition and the demonstration of ``innate brilliance'' are more likely to report AI Skill Threat. However, engineers who report the presence of learning cultures and belonging are less likely to report AI Skill Threat. Finally, we document new and emerging equity and opportunity gaps for software teams adopting new tooling practices. AI Skill Threat is higher for Racially Minoritized developers, who also rate the overall quality of AI-assisted coding outputs significantly lower. Both female developers and LGBTQ+ developers were significantly less likely to report plans to upskilling for new AI-assisted workflows. These and other emerging differences point toward a critical need to understand how organizations ensure that AI-assisted coding adoption is equitable and accessible, and that key insights from developers with important perspectives on the risks of AI-assisted coding are heard.},
  archiveprefix = {OSF},
  langid = {american},
  keywords = {belonging,emerging technologies,equity gaps,generative AI,learning,software developers,software development,software team practices,team health,technology teams},
  file = {/Users/john-flournoy/Zotero/storage/2CHYQK8V/Hicks et al. - 2024 - The New Developer AI Skill Threat, Identity Change & Developer Thriving in the Transition to AI-Ass.pdf}
}

@misc{hicksPsychologicalAffordancesCan2024,
  title = {Psychological {{Affordances Can Provide}} a {{Missing Explanatory Layer}} for {{Why Interventions}} to {{Improve Developer Experience Take Hold}} or {{Fail}}},
  author = {Hicks, Catherine M.},
  year = {2024},
  month = jan,
  publisher = {OSF},
  doi = {10.31234/osf.io/qz43x},
  urldate = {2025-02-15},
  abstract = {This review proposes that the psychological affordances around developers provide a "missing layer" to developer experience. Several examples are used to illustrate a starting place for using research on the efficacy of social-behavioral interventions in the context of software teams. The ``Mindset x Context'' lens can provide an important, and overlooked, entrypoint to diagnosing the problem-solving environment around software teams. Drawing from the "seed and soil" metaphor (Walton and Yeager, 2020), this review contends that workplace interventions aiming to increase developer experience will be more likely to take hold when they are congruent with the systemic social messages, opportunities and culture of the organization.},
  archiveprefix = {OSF},
  langid = {american},
  keywords = {developer experience,learning debt,organizational psychology,psychological intervention,sense of belonging,social and behavioral sciences,software team effectiveness,software teams},
  file = {/Users/john-flournoy/Zotero/storage/HP4CJNDH/Hicks - 2024 - Psychological Affordances Can Provide a Missing Explanatory Layer for Why Interventions to Improve D.pdf}
}

@misc{HowMeasureDeveloper,
  title = {How to Measure Developer Productivity {\textbar} {{McKinsey}}},
  urldate = {2024-12-05},
  howpublished = {https://www.mckinsey.com/industries/technology-media-and-telecommunications/our-insights/yes-you-can-measure-software-developer-productivity},
  file = {/Users/john-flournoy/Zotero/storage/MTJC2UCH/yes-you-can-measure-software-developer-productivity.html}
}

@manual{iannoneGtEasilyCreate2024,
  type = {Manual},
  title = {Gt: {{Easily}} Create Presentation-Ready Display Tables},
  author = {Iannone, Richard and Cheng, Joe and Schloerke, Barret and Hughes, Ellis and Lauer, Alexandra and Seo, JooYoung and Brevoort, Ken and Roy, Olivier},
  year = {2024}
}

@article{inmanDeveloperProductivityHumans2024,
  title = {Developer {{Productivity}} for {{Humans}}, {{Part}} 8: {{Creativity}} in {{Software Engineering}}},
  shorttitle = {Developer {{Productivity}} for {{Humans}}, {{Part}} 8},
  author = {Inman, Sarah and D'Angelo, Sarah and Vasilescu, Bogdan},
  year = {2024},
  month = mar,
  journal = {IEEE Software},
  volume = {41},
  number = {2},
  pages = {11--16},
  issn = {1937-4194},
  doi = {10.1109/MS.2023.3340831},
  urldate = {2024-10-02},
  abstract = {Creativity is an essential part of software engineering. In this column, we describe our approach and insights into how software developers define creativity in their work. Our findings suggest that creativity in software engineering centers on the concepts of clever reuse over pure novelty.},
  file = {/Users/john-flournoy/Zotero/storage/9YL2LB3X/Inman et al. - 2024 - Developer Productivity for Humans, Part 8 Creativity in Software Engineering.pdf;/Users/john-flournoy/Zotero/storage/TQUNVMFB/10445159.html}
}

@article{kameiGreyLiteratureSoftware2021,
  title = {Grey {{Literature}} in {{Software Engineering}}: {{A}} Critical Review},
  shorttitle = {Grey {{Literature}} in {{Software Engineering}}},
  author = {Kamei, Fernando and Wiese, Igor and Lima, Crescencio and Polato, Ivanilton and Nepomuceno, Vilmar and Ferreira, Waldemar and Ribeiro, M{\'a}rcio and Pena, Carolline and Cartaxo, Bruno and Pinto, Gustavo and Soares, S{\'e}rgio},
  year = {2021},
  month = oct,
  journal = {Information and Software Technology},
  volume = {138},
  pages = {106609},
  issn = {0950-5849},
  doi = {10.1016/j.infsof.2021.106609},
  urldate = {2024-12-17},
  abstract = {Context: Grey Literature (GL) recently has grown in Software Engineering (SE) research since the increased use of online communication channels by software engineers. However, there is still a limited understanding of how SE research is taking advantage of GL. Objective: This research aimed to understand how SE researchers use GL in their secondary studies. Methods: We conducted a tertiary study of studies published between 2011 and 2018 in high-quality software engineering conferences and journals. We then applied qualitative and quantitative analysis to investigate 446 potential studies. Results: From the 446 selected studies, 126 studies cited GL but only 95 of those used GL to answer a specific research question representing almost 21\% of all the 446 secondary studies. Interestingly, we identified that few studies employed specific search mechanisms and used additional criteria for assessing GL. Moreover, by the time we conducted this research, 49\% of the GL URLs are not working anymore. Based on our findings, we discuss some challenges in using GL and potential mitigation plans. Conclusion: In this paper, we summarized the last 10 years of software engineering research that uses GL, showing that GL has been essential for bringing practical new perspectives that are scarce in traditional literature. By drawing the current landscape of use, we also raise some awareness of related challenges (and strategies to deal with them).},
  keywords = {Grey Literature,Grey Literature Review,Mapping Study,Multivocal Literature Review,Secondary Study,Software Engineering,Systematic Literature Review,Tertiary study},
  file = {/Users/john-flournoy/Zotero/storage/4UG3K45E/S0950584921000860.html}
}

@manual{kayTidybayesTidyData2023,
  type = {Manual},
  title = {{{tidybayes}}: {{Tidy}} Data and Geoms for {{Bayesian}} Models},
  author = {Kay, Matthew},
  year = {2023},
  doi = {10.5281/zenodo.1308151}
}

@inproceedings{kitchenhamEvidencebasedSoftwareEngineering2004,
  title = {Evidence-Based Software Engineering},
  booktitle = {Proceedings. 26th {{International Conference}} on {{Software Engineering}}},
  author = {Kitchenham, B.A. and Dyba, T. and Jorgensen, M.},
  year = {2004},
  month = may,
  pages = {273--281},
  issn = {0270-5257},
  doi = {10.1109/ICSE.2004.1317449},
  urldate = {2025-02-28},
  abstract = {Our objective is to describe how software engineering might benefit from an evidence-based approach and to identify the potential difficulties associated with the approach. We compared the organisation and technical infrastructure supporting evidence-based medicine (EBM) with the situation in software engineering. We considered the impact that factors peculiar to software engineering (i.e. the skill factor and the lifecycle factor) would have on our ability to practice evidence-based software engineering (EBSE). EBSE promises a number of benefits by encouraging integration of research results with a view to supporting the needs of many different stakeholder groups. However, we do not currently have the infrastructure needed for widespread adoption of EBSE. The skill factor means software engineering experiments are vulnerable to subject and experimenter bias. The lifecycle factor means it is difficult to determine how technologies will behave once deployed. Software engineering would benefit from adopting what it can of the evidence approach provided that it deals with the specific problems that arise from the nature of software engineering.},
  keywords = {Australia,Best practices,Computer science,Costs,Laboratories,Medical services,Psychiatry,Psychology,Software engineering,Technological innovation},
  file = {/Users/john-flournoy/Zotero/storage/PBHXCNY5/1317449.html}
}

@misc{koebler*AreOveremployedGhost2024,
  title = {Are {{Overemployed}} `{{Ghost Engineers}}' {{Making Six Figures}} to {{Do Nothing}}?},
  author = {Koebler {$\cdot$}, Jason},
  year = {2024},
  month = nov,
  journal = {404 Media},
  urldate = {2024-12-16},
  abstract = {"We have data on the performance of {$>$}50k engineers from 100s of companies. {\textasciitilde}9.5\% of software engineers do virtually nothing: Ghost Engineers.''},
  howpublished = {https://www.404media.co/are-overemployed-ghost-engineers-making-six-figures-to-do-nothing/},
  langid = {english},
  file = {/Users/john-flournoy/Zotero/storage/T5FPSTH7/are-overemployed-ghost-engineers-making-six-figures-to-do-nothing.html}
}

@article{kruschkeRejectingAcceptingParameter2018,
  title = {Rejecting or {{Accepting Parameter Values}} in {{Bayesian Estimation}}},
  author = {Kruschke, John K.},
  year = {2018},
  month = jun,
  journal = {Advances in Methods and Practices in Psychological Science},
  volume = {1},
  number = {2},
  pages = {270--280},
  publisher = {SAGE Publications Inc},
  issn = {2515-2459},
  doi = {10.1177/2515245918771304},
  urldate = {2025-02-26},
  abstract = {This article explains a decision rule that uses Bayesian posterior distributions as the basis for accepting or rejecting null values of parameters. This decision rule focuses on the range of plausible values indicated by the highest density interval of the posterior distribution and the relation between this range and a region of practical equivalence (ROPE) around the null value. The article also discusses considerations for setting the limits of a ROPE and emphasizes that analogous considerations apply to setting the decision thresholds for p values and Bayes factors.},
  langid = {english},
  file = {/Users/john-flournoy/Zotero/storage/WGRTL6QN/Kruschke - 2018 - Rejecting or Accepting Parameter Values in Bayesian Estimation.pdf}
}

@inproceedings{kudrjavetsSmallCodeChanges2022,
  title = {Do Small Code Changes Merge Faster?: A Multi-Language Empirical Investigation},
  shorttitle = {Do Small Code Changes Merge Faster?},
  booktitle = {Proceedings of the 19th {{International Conference}} on {{Mining Software Repositories}}},
  author = {Kudrjavets, Gunnar and Nagappan, Nachiappan and Rastogi, Ayushi},
  year = {2022},
  month = may,
  pages = {537--548},
  publisher = {ACM},
  address = {Pittsburgh Pennsylvania},
  doi = {10.1145/3524842.3528448},
  urldate = {2025-02-11},
  abstract = {Code velocity, or the speed with which code changes are integrated into a production environment, plays a crucial role in Continuous Integration and Continuous Deployment. Many studies report factors influencing code velocity. However, solutions to increase code velocity are unclear. Meanwhile, the industry continues to issue guidelines on ``ideal'' code change size, believing it increases code velocity despite lacking evidence validating the practice. Surprisingly, this fundamental question has not been studied to date. This study investigates the practicality of improving code velocity by optimizing pull request size and composition (ratio of insertions, deletions, and modifications).},
  isbn = {978-1-4503-9303-4},
  langid = {english},
  file = {/Users/john-flournoy/Zotero/storage/ATSUPVV4/Kudrjavets et al. - 2022 - Do small code changes merge faster a multi-language empirical investigation.pdf}
}

@misc{kudryavtsevGhostEngineersDmitry2024,
  title = {Ghost {{Engineers}} - {{Dmitry Kudryavtsev}}},
  author = {Kudryavtsev, Dmitry},
  year = {2024},
  month = dec,
  journal = {yield code();},
  urldate = {2024-12-17},
  abstract = {Let's address the existence of so called Ghost Engineers},
  howpublished = {https://yieldcode.blog/post/ghost-engineers/},
  langid = {english},
  file = {/Users/john-flournoy/Zotero/storage/CA36DJCF/ghost-engineers.html}
}

@article{lagiosExplainingNegativeConsequences2022,
  title = {Explaining the {{Negative Consequences}} of {{Organizational}}                     {{Dehumanization}}},
  author = {Lagios, Constantin and Caesens, Ga{\"e}tane and Nguyen, Nathan and Stinglhamber, Florence},
  year = {2022},
  month = apr,
  journal = {Journal of Personnel Psychology},
  volume = {21},
  number = {2},
  pages = {86--93},
  publisher = {Hogrefe Publishing},
  issn = {1866-5888},
  doi = {10.1027/1866-5888/a000286},
  urldate = {2025-02-14},
  abstract = {. Organizational dehumanization (OD), defined as employees' perceptions of being treated as mere tools by their organization, has been shown to negatively affect employees and organizations. To explain such detrimental effects, scholars have argued that OD might thwart employees' fundamental psychological needs. Yet, evidence of this mechanism remains empirically nonexistent. Filling this gap, this research aims at investigating the mediating role of psychological need thwarting in the relationships between OD and employees' well-being and attitudes. Based on a cross-sectional study (N = 340) and a two-wave study (3 months apart; N = 603), the results indicate that OD thwarts employees' psychological needs which are, in turn, negatively related to their well-being (psychological strains, absenteeism, and job satisfaction) and attitudes (turnover intentions and affective commitment).},
  keywords = {absenteeism,job satisfaction,organizational dehumanization,psychological need thwarting,self-determination theory}
}

@book{lawlessStatisticalModelsMethods2003,
  title = {Statistical Models and Methods for Lifetime Data},
  author = {Lawless, Jerald F.},
  year = {2003},
  series = {Wiley Series in Probability and Statistics},
  edition = {2nd ed.},
  publisher = {Wiley-Interscience},
  address = {Hoboken, N.J.},
  abstract = {Review: "Equally useful as a reference for individuals interested in the analysis of lifetime data and as a text for advanced students, Statistical Models and Methods for Lifetime Data, Second Edition provides broad coverage of the area without concentrating on any single field of application. Extensive illustrations and examples drawn from engineering and the biomedical sciences provide readers with a clear understanding of key concepts."--Jacket.},
  isbn = {978-0-471-37215-8},
  langid = {english},
  lccn = {QA276 .L328 2003, WA 950 L418s 2003},
  keywords = {Failure time data analysis,Survival analysis (Biometry)},
  annotation = {HOLLIS number: 990090163290203941}
}

@article{leeImTrackingCycle,
  title = {I'm {{Tracking Cycle Time}}. {{Now What}}?},
  author = {Lee, Carol S and Wu, Maggie and Hosseini, Masoud and Hicks, Catherine M},
  langid = {english},
  file = {/Users/john-flournoy/Zotero/storage/QXVPCQNW/Lee et al. - I’m Tracking Cycle Time. Now What.pdf}
}

@misc{leeOurOrganizationActually2023,
  title = {Is {{Our Organization Actually Measuring Productivity}}? {{How Contrasting Organizational}} and {{Individual Measures}} of {{Engineering Success}} Is an {{Opportunity}} to {{Drive Engineering Transformation}}},
  shorttitle = {Is {{Our Organization Actually Measuring Productivity}}?},
  author = {Lee, Carol S. and Ramsey, Morgan and Hicks, Catherine M.},
  year = {2023},
  month = may,
  number = {arXiv:2305.11030},
  eprint = {2305.11030},
  primaryclass = {cs},
  publisher = {arXiv},
  doi = {10.48550/arXiv.2305.11030},
  urldate = {2023-07-12},
  abstract = {Background: Previous research highlights that common misconceptions about developer productivity lead to harmful and inaccurate evaluations of software work, pointing to the need for organizations to differentiate between measures of production, productivity, and performance as an important step that helps to suggest improvements to how we measure the success of engineering teams. Methodology: Using a card sort, we explored how a Three Layer Productivity Framework was used by 16 software engineers at a Software Engineering focused conference to rank measures of success, first in the current practice of their organization and second in their individual beliefs about the best ways to measure engineering success. Results and discussion: Overall, participants preferred organizations to 1) continue their prioritized focus on performance layer metrics, 2) increase the focus on productivity metrics, and 3) decrease their focus on production metrics. When asked about the current metrics of their organizations, while all roles reported a current focus on performance metrics, only ICs reported a strong focus on production metrics. When asked about metrics they would prefer, all roles preferred more performance metrics but only leaders and ICs also wanted productivity metrics. While all participants were aligned on performance metrics being a top preference, there was misalignment on which specific metrics are used. Our findings show that when measuring developer success, organizations should continue measurement using performance metrics, consider an increased focus on productivity metrics, and consider a decreased focus on production metrics.},
  archiveprefix = {arXiv},
  keywords = {Computer Science - Software Engineering,D.2.8,D.m},
  file = {/Users/john-flournoy/Zotero/storage/MG5MCXNX/Lee et al. - 2023 - Is Our Organization Actually Measuring Productivit.pdf;/Users/john-flournoy/Zotero/storage/GF6AKSE7/Lee et al. - 2023 - Is Our Organization Actually Measuring Productivit.html}
}

@misc{linesWhyEliteDev2023,
  title = {Why Elite Dev Teams Focus on Pull-Request Metrics},
  author = {Lines, Dan},
  year = {2023},
  month = may,
  journal = {LeadDev},
  urldate = {2025-02-07},
  abstract = {Pull request size massively impacts cycle time and development workflow -- small PRs and low rework rates boost efficiency, stability, and lower overall risk.},
  howpublished = {https://leaddev.com/reporting/why-elite-dev-teams-focus-pull-request-metrics},
  langid = {american},
  file = {/Users/john-flournoy/Zotero/storage/98PNBKKF/why-elite-dev-teams-focus-pull-request-metrics.html}
}

@article{lingModelMisSpecificationAnalyses2017,
  title = {Model {{Mis-Specification Analyses}} of {{Weibull}} and {{Gamma Models Based}} on {{One-Shot Device Test Data}}},
  author = {Ling, Man Ho and Balakrishnan, Narayanaswamy},
  year = {2017},
  month = sep,
  journal = {IEEE Transactions on Reliability},
  volume = {66},
  number = {3},
  pages = {641--650},
  issn = {1558-1721},
  doi = {10.1109/TR.2017.2703111},
  urldate = {2025-02-05},
  abstract = {Model mis-specification is of great importance in reliability assessment. Different choices of probability models for fitting data may result in substantially different inferential results on some lifetime characteristics of interest. Gamma and Weibull models have been used extensively for modeling lifetime data. Hence, accelerated life models have been developed recently for one-shot device test data under both these models for making inference on mean lifetime as well as the reliability at use level. However, model mis-specification analyses between these two models have not been studied in this context. Here, we examine the effect of model mis-specification between gamma and Weibull models on the likelihood estimation and the inference on the mean lifetime and the reliability at some mission times based on one-shot device test data. Moreover, a distance-based test statistic and the Akaike information criterion as specification tests are studied for the purpose of model validation. A simulation study is carried out to evaluate the bias and coverage probabilities of confidence intervals under model mis-specification. The obtained results reveal that the effect of model mis-specification is negligible only when the sample size is small and when the accelerated and use levels are close, and that the use of specification test is quite important for an accurate reliability assessment.},
  keywords = {Accelerated life-tests,Akaike information criterion (AIC),Analytical models,Data models,distance-based test,Distribution functions,gamma distribution,likelihood inference,model mis-specification,one-shot devices,Reliability,Shape,specification test,Stress,Weibull distribution},
  file = {/Users/john-flournoy/Zotero/storage/L4RJ24PP/Ling and Balakrishnan - 2017 - Model Mis-Specification Analyses of Weibull and Gamma Models Based on One-Shot Device Test Data.pdf;/Users/john-flournoy/Zotero/storage/RVF24AGX/7935445.html}
}

@misc{lloydLimitsData2024,
  title = {The {{Limits}} of {{Data}}},
  author = {Lloyd, Jay},
  year = {2024},
  month = mar,
  journal = {Issues in Science and Technology},
  urldate = {2024-12-16},
  abstract = {Policymakers want to make decisions based on clear data, but important factors are lost when we rely solely on data. A philosopher writes:},
  langid = {american},
  file = {/Users/john-flournoy/Zotero/storage/SP9JQ2NN/limits-of-data-nguyen.html}
}

@article{ludeckeExtractingComputingExploring2020,
  title = {Extracting, Computing and Exploring the Parameters of Statistical Models Using {{R}}.},
  author = {L{\"u}decke, Daniel and {Ben-Shachar}, Mattan S. and Patil, Indrajeet and Makowski, Dominique},
  year = {2020},
  journal = {Journal of Open Source Software},
  volume = {5},
  number = {53},
  pages = {2445},
  doi = {10.21105/joss.02445}
}

@article{maxwellSoftwareDevelopmentProductivity1996,
  title = {Software Development Productivity of {{European}} Space, Military, and Industrial Applications},
  author = {Maxwell, K.D. and Van Wassenhove, L. and Dutta, S.},
  year = {1996},
  month = oct,
  journal = {IEEE Transactions on Software Engineering},
  volume = {22},
  number = {10},
  pages = {706--718},
  issn = {1939-3520},
  doi = {10.1109/32.544349},
  urldate = {2025-02-05},
  abstract = {The identification, combination, and interaction of the many factors which influence software development productivity makes the measurement, estimation, comparison and tracking of productivity rates very difficult. Through the analysis of a European Space Agency database consisting of 99 software development projects from 37 companies in a European countries, the paper seeks to provide significant and useful Information about the major factors which influence the productivity of European space, military, and industrial applications, as well as to determine the best metric for measuring the productivity of these projects. Several key findings emerge from the study. The results indicate that some organizations are obtaining significantly higher productivity than others. Some of this variation is due to the differences in the application category and programming language of projects in each company; however, some differences must also be due to the ways in which these companies manage their software development projects. The use of tools and modern programming practices were found to be major controllable factors in productivity improvement. Finally, the lines-of-code productivity metric is shown to be superior to the process productivity metric for projects in the authors' database.},
  keywords = {Aerospace industry,Application software,Computer industry,Databases,Defense industry,Extraterrestrial measurements,Information analysis,Productivity,Programming,Software measurement},
  file = {/Users/john-flournoy/Zotero/storage/LGKAZ6SL/544349.html}
}

@book{mcelreathStatisticalRethinkingBayesian2020,
  title = {Statistical {{Rethinking}}: {{A Bayesian Course}} with {{Examples}} in {{R}} and {{Stan}}},
  shorttitle = {Statistical {{Rethinking}}},
  author = {McElreath, Richard},
  year = {2020},
  month = mar,
  edition = {2},
  publisher = {{Chapman and Hall/CRC}},
  address = {Boca Raton},
  doi = {10.1201/9780429029608},
  abstract = {Statistical Rethinking: A Bayesian Course with Examples in R and Stan builds your knowledge of and confidence in making inferences from data. Reflecting the need for scripting in today's model-based statistics, the book pushes you to perform step-by-step calculations that are usually automated. This unique computational approach ensures that you understand enough of the details to make reasonable choices and interpretations in your own modeling work. The text presents causal inference and generalized linear multilevel models from a simple Bayesian perspective that builds on information theory and maximum entropy. The core material ranges from the basics of regression to advanced multilevel models. It also presents measurement error, missing data, and Gaussian process models for spatial and phylogenetic confounding. The second edition emphasizes the directed acyclic graph (DAG) approach to causal inference, integrating DAGs into many examples. The new edition also contains new material on the design of prior distributions, splines, ordered categorical predictors, social relations models, cross-validation, importance sampling, instrumental variables, and Hamiltonian Monte Carlo. It ends with an entirely new chapter that goes beyond generalized linear modeling, showing how domain-specific scientific models can be built into statistical analyses. Features Integrates working code into the main text Illustrates concepts through worked data analysis examples Emphasizes understanding assumptions and how assumptions are reflected in code Offers more detailed explanations of the mathematics in optional sections Presents examples of using the dagitty R package to analyze causal graphs Provides the rethinking R package on the author's website and on GitHub},
  isbn = {978-0-429-02960-8},
  file = {/Users/john-flournoy/Zotero/storage/G8P9HQNA/Richard McElreath - Statistical Rethinking_ A Bayesian Course with Examples in R and STAN (draft) (2021).pdf}
}

@article{mettlerConnectedWorkplaceCharacteristics2024,
  title = {The Connected Workplace: {{Characteristics}} and Social Consequences of Work Surveillance in the Age of Datification, Sensorization, and Artificial Intelligence},
  shorttitle = {The Connected Workplace},
  author = {Mettler, Tobias},
  year = {2024},
  month = sep,
  journal = {Journal of Information Technology},
  volume = {39},
  number = {3},
  pages = {547--567},
  publisher = {SAGE Publications Ltd},
  issn = {0268-3962},
  doi = {10.1177/02683962231202535},
  urldate = {2025-02-06},
  abstract = {Because of COVID-19 lockdowns, managers and administrators have begun to look for new ways to monitor and control their stranded-at-home workforce. Yet long before the pandemic already, advancements in datification, sensorization, and artificial intelligence have given rise to what we call connected workplace surveillance. At the heart of this new mode of employee monitoring and control is the extension of the scope of data collection beyond what is necessary and reasonable for performance appraisals or managerial oversight. This includes treating an employee's body as a data source, disrespecting the boundaries between business and private life, or using gathered surveillance information for subtle persuasion, manipulation, and coercion. This article provides a new perspective on control theory, examining the characteristics of connected surveillance and comparing it to visual or computerized surveillance. Taking an employee-centric position, it also proposes a research agenda for critical, behavioral, and design-oriented scholars who wish to explore the identified issues.},
  langid = {english},
  file = {/Users/john-flournoy/Zotero/storage/Q7WCJWTW/Mettler - 2024 - The connected workplace Characteristics and social consequences of work surveillance in the age of.pdf}
}

@article{meyerTodayWasGood2021,
  title = {Today {{Was}} a {{Good Day}}: {{The Daily Life}} of {{Software Developers}}},
  shorttitle = {Today {{Was}} a {{Good Day}}},
  author = {Meyer, Andre N. and Barr, Earl T. and Bird, Christian and Zimmermann, Thomas},
  year = {2021},
  month = may,
  journal = {IEEE Transactions on Software Engineering},
  volume = {47},
  number = {5},
  pages = {863--880},
  issn = {0098-5589, 1939-3520, 2326-3881},
  doi = {10.1109/TSE.2019.2904957},
  urldate = {2024-10-17},
  abstract = {What is a good workday for a software developer? What is a typical workday? We seek to answer these two questions to learn how to make good days typical. Concretely, answering these questions will help to optimize development processes and select tools that increase job satisfaction and productivity. Our work adds to a large body of research on how software developers spend their time. We report the results from 5971 responses of professional developers at Microsoft, who reflected about what made their workdays good and typical, and self-reported about how they spent their time on various activities at work. We developed conceptual frameworks to help define and characterize developer workdays from two new perspectives: good and typical. Our analysis confirms some findings in previous work, including the fact that developers actually spend little time on development and developers' aversion for meetings and interruptions. It also discovered new findings, such as that only 1.7\% of survey responses mentioned emails as a reason for a bad workday, and that meetings and interruptions are only unproductive during development phases; during phases of planning, specification and release, they are common and constructive. One key finding is the importance of agency, developers' control over their workday and whether it goes as planned or is disrupted by external factors. We present actionable recommendations for researchers and managers to prioritize process and tool improvements that make good workdays typical. For instance, in light of our finding on the importance of agency, we recommend that, where possible, managers empower developers to choose their tools and tasks.},
  copyright = {https://ieeexplore.ieee.org/Xplorehelp/downloads/license-information/IEEE.html},
  langid = {english},
  keywords = {Birds,Collaboration,Encoding,good workdays,job satisfaction,productivity,Productivity,quantified workplace,Software,Software developer workdays,Task analysis,Tools,typical workdays},
  file = {/Users/john-flournoy/Zotero/storage/ZUEQWQLC/Meyer et al. - 2021 - Today Was a Good Day The Daily Life of Software Developers.pdf;/Users/john-flournoy/Zotero/storage/AAJKBRN3/8666786.html}
}

@article{miuInnovationCumulativeCulture2018,
  title = {Innovation and Cumulative Culture through Tweaks and Leaps in Online Programming Contests},
  author = {Miu, Elena and Gulley, Ned and Laland, Kevin N. and Rendell, Luke},
  year = {2018},
  month = jun,
  journal = {Nature Communications},
  volume = {9},
  number = {1},
  pages = {2321},
  publisher = {Nature Publishing Group},
  issn = {2041-1723},
  doi = {10.1038/s41467-018-04494-0},
  urldate = {2024-12-18},
  abstract = {The ability to build progressively on the achievements of earlier generations is central to human uniqueness, but experimental investigations of this cumulative cultural evolution lack real-world complexity. Here, we studied the dynamics of cumulative culture using a large-scale data set from online collaborative programming competitions run over 14 years. We show that, within each contest population, performance increases over time through frequent `tweaks' of the current best entry and rare innovative `leaps' (successful tweak:leap ratio\,=\,16:1), the latter associated with substantially greater variance in performance. Cumulative cultural evolution reduces technological diversity over time, as populations focus on refining high-performance solutions. While individual entries borrow from few sources, iterative copying allows populations to integrate ideas from many sources, demonstrating a new form of collective intelligence. Our results imply that maximising technological progress requires accepting high levels of failure.},
  copyright = {2018 The Author(s)},
  langid = {english},
  keywords = {Cultural evolution,Human behaviour},
  file = {/Users/john-flournoy/Zotero/storage/UVDBXW8T/Miu et al. - 2018 - Innovation and cumulative culture through tweaks and leaps in online programming contests.pdf}
}

@article{murphy-hillWhatPredictsSoftware2021,
  title = {What {{Predicts Software Developers}}' {{Productivity}}?},
  author = {{Murphy-Hill}, Emerson and Jaspan, Ciera and Sadowski, Caitlin and Shepherd, David and Phillips, Michael and Winter, Collin and Knight, Andrea and Smith, Edward and Jorde, Matthew},
  year = {2021},
  month = mar,
  journal = {IEEE Transactions on Software Engineering},
  volume = {47},
  number = {3},
  pages = {582--594},
  issn = {0098-5589, 1939-3520, 2326-3881},
  doi = {10.1109/TSE.2019.2900308},
  urldate = {2024-10-02},
  abstract = {Organizations have a variety of options to help their software developers become their most productive selves, from modifying office layouts, to investing in better tools, to cleaning up the source code. But which options will have the biggest impact? Drawing from the literature in software engineering and industrial/organizational psychology to identify factors that correlate with productivity, we designed a survey that asked 622 developers across 3 companies about these productivity factors and about self-rated productivity. Our results suggest that the factors that most strongly correlate with self-rated productivity were non-technical factors, such as job enthusiasm, peer support for new ideas, and receiving useful feedback about job performance. Compared to other knowledge workers, our results also suggest that software developers' self-rated productivity is more strongly related to task variety and ability to work remotely.},
  copyright = {https://ieeexplore.ieee.org/Xplorehelp/downloads/license-information/IEEE.html},
  langid = {english},
  file = {/Users/john-flournoy/Zotero/storage/NBX9ALQD/Murphy-Hill et al. - 2021 - What Predicts Software Developers’ Productivity.pdf;/Users/john-flournoy/Zotero/storage/VQD56SG5/Murphy-Hill et al. - 2021 - What Predicts Software Developers’ Productivity.pdf}
}

@article{nanImpactBudgetSchedule2009,
  title = {Impact of {{Budget}} and {{Schedule Pressure}} on {{Software Development Cycle Time}} and {{Effort}}},
  author = {Nan, Ning and Harter, Donald E.},
  year = {2009},
  month = sep,
  journal = {IEEE Transactions on Software Engineering},
  volume = {35},
  number = {5},
  pages = {624--637},
  issn = {1939-3520},
  doi = {10.1109/TSE.2009.18},
  urldate = {2025-02-07},
  abstract = {As excessive budget and schedule compression becomes the norm in today's software industry, an understanding of its impact on software development performance is crucial for effective management strategies. Previous software engineering research has implied a nonlinear impact of schedule pressure on software development outcomes. Borrowing insights from organizational studies, we formalize the effects of budget and schedule pressure on software cycle time and effort as U-shaped functions. The research models were empirically tested with data from a 25 billion/year international technology firm, where estimation bias is consciously minimized and potential confounding variables are properly tracked. We found that controlling for software process, size, complexity, and conformance quality, budget pressure, a less researched construct, has significant U-shaped relationships with development cycle time and development effort. On the other hand, contrary to our prediction, schedule pressure did not display significant nonlinear impact on development outcomes. A further exploration of the sampled projects revealed that the involvement of clients in the software development might have ``eroded'' the potential benefits of schedule pressure. This study indicates the importance of budget pressure in software development. Meanwhile, it implies that achieving the potential positive effect of schedule pressure requires cooperation between clients and software development teams.},
  keywords = {Computer industry,Cost estimation,Financial management,Job shop scheduling,Pressure control,Programming,schedule and organizational issues,Size control,Software development management,Software engineering,Software performance,systems development.,Testing,time estimation},
  file = {/Users/john-flournoy/Zotero/storage/JTSJZMGX/Nan and Harter - 2009 - Impact of Budget and Schedule Pressure on Software Development Cycle Time and Effort.pdf;/Users/john-flournoy/Zotero/storage/C5IRTN4E/4815275.html}
}

@book{nelsonAppliedLifeData1982,
  title = {Applied Life Data Analysis},
  author = {Nelson, Wayne},
  year = {1982},
  series = {Wiley Series in Probability and Mathematical Statistics. {{Applied}} Probability and Statistics},
  publisher = {Wiley},
  address = {New York},
  isbn = {978-0-471-09458-6},
  langid = {english},
  keywords = {Reliability (Engineering)}
}

@inproceedings{netoMultivocalLiteratureReviews2019,
  title = {Multivocal Literature Reviews in Software Engineering: {{Preliminary}} Findings from a Tertiary Study},
  shorttitle = {Multivocal Literature Reviews in Software Engineering},
  booktitle = {2019 {{ACM}}/{{IEEE International Symposium}} on {{Empirical Software Engineering}} and {{Measurement}} ({{ESEM}})},
  author = {Neto, Geraldo Torres G. and Santos, Wylliams B. and Endo, Patricia Takako and Fagundes, Roberta A.A.},
  year = {2019},
  month = sep,
  pages = {1--6},
  issn = {1949-3789},
  doi = {10.1109/ESEM.2019.8870142},
  urldate = {2024-12-17},
  abstract = {Background: In recent years, studies involving Grey Literature (GL) have been growing and attracting the attention of researchers in software engineering (SE). One of the sources of GL refers to content produced by professionals based on their practical experiences? Recent researches in the SE states that GL can complement areas of research that are not yet clearly defined in the scientific literature. In this context, the Multivocal Literature Review (MLR), a form of Systematic Literature Review (SLR) with the inclusion of GL, emerges. Goal: Provide preliminary work about the current research involving MLR studies? First, we investigate the motivation of the researchers to include GL in review studies; and second, we examine how GL was included in the studies. Method: A tertiary study was conducted to search MLR studies published between 2009 to April of 2019. Results: The main motivations for including GL in review studies are: lack of academic research on the topic, emerging research on this topic, and complementary evidence in the GL? Internet articles and white papers were the main sources of GL data used. Conclusions: The conducting of MLR studies is still in its early stages; we have identified only 12 secondary studies. The MLR studies were conducted using guidelines for performing SLRs. What we consider to be a threat to the validity of these studies, since guidelines to conduct SLR studies do not provide recommendations for quality analysis and synthesis of primary studies, including GL.},
  keywords = {Bibliographies,Guidelines,Industries,Libraries,Software,Software engineering,Systematics}
}

@article{nicholsEndMythIndividual2019,
  title = {The {{End}} to the {{Myth}} of {{Individual Programmer Productivity}}},
  author = {Nichols, William R.},
  year = {2019},
  month = sep,
  journal = {IEEE Software},
  volume = {36},
  number = {5},
  pages = {71--75},
  issn = {1937-4194},
  doi = {10.1109/MS.2019.2908576},
  urldate = {2024-10-02},
  abstract = {One often-quoted truism in software engineering is that good programmers are "much much better" than bad programmers. The size of "much much better" is widely debated, but ranges such as 10 times more productive are often cited as conservative estimates. This article argues that such statements are misleading and miss numerous important effects. Based on the studies described later, it would appear that some programmers are not inherently exceedingly better than others.},
  keywords = {Productivity,Programming profession,Security,Software engineering},
  file = {/Users/john-flournoy/Zotero/storage/CD86RLMZ/Nichols - 2019 - The End to the Myth of Individual Programmer Productivity.pdf}
}

@misc{nisocreditworkinggroupANSINISOZ3910420222022,
  title = {{{ANSI}}/{{NISO Z39}}.104-2022, {{CRediT}}, {{Contributor Roles Taxonomy}}},
  author = {NISO CRediT Working Group},
  year = {2022},
  month = jan,
  publisher = {NISO},
  address = {3600 Clipper Mill Road Suite 302 Baltimore, MD 21211},
  doi = {10.3789/ansi.niso.z39.104-2022},
  urldate = {2025-01-08},
  langid = {english}
}

@inproceedings{nistalaSoftwareQualityModels2019,
  title = {Software {{Quality Models}}: {{A Systematic Mapping Study}}},
  shorttitle = {Software {{Quality Models}}},
  booktitle = {2019 {{IEEE}}/{{ACM International Conference}} on {{Software}} and {{System Processes}} ({{ICSSP}})},
  author = {Nistala, Padmalata and Nori, Kesav Vithal and Reddy, Raghu},
  year = {2019},
  month = may,
  pages = {125--134},
  doi = {10.1109/ICSSP.2019.00025},
  urldate = {2024-09-25},
  abstract = {Quality Models play a critical role in assuring quality and have evolved over 40+ years. They provide support for defining quality attributes, building and measuring the quality of the resulting product. Each quality model adopts a critical view on quality in terms of a set of model elements and relationships between them. This study aims to provide an overview of the state-of-the-art research on quality models with a focus on encompassing model elements and their support to architecting quality. The study was conducted using systematic mapping as the research methodology. A total of 238 primary papers were classified based on the type of research, standards usage, and publication trends. We identified that 17\% (40) of papers belong to quality models. These 40 models were analyzed for the underlying meta-model elements and their support for a quality architecture using Bayer's reference architecture framework. The architecture phase mapping analysis shows that quality planning phase is 100\% supported, quality assessment is 75\% supported, quality documentation is included in 40\% models and quality realization aspect is barely considered in 13\% models. Quality realization happens through software processes and patterns, and it is necessary to evolve quality models and software process architectures that correlate quality definitions and quality realization mechanisms. Future research is expected in this direction.},
  keywords = {Analytical models,Computer architecture,ISO Standards,Object oriented modeling,Software quality,Software Quality Product Quality Software Process Quality Model Quality Meta Model Quality Characteristic Quality Pattern Quality Architecture Reference architecture Quality Realization,Systematics},
  file = {/Users/john-flournoy/Zotero/storage/QBTJ2R7W/Nistala et al. - 2019 - Software Quality Models A Systematic Mapping Study.pdf;/Users/john-flournoy/Zotero/storage/T2WK8ZCA/8812848.html}
}

@article{obstbaumOngoingResearchSoftware,
  title = {Ongoing {{Research}} on {{Software Engineering Productivity}}},
  author = {Obstbaum, Simon and {Denisov-Blanch}, Yegor},
  langid = {english},
  file = {/Users/john-flournoy/Zotero/storage/D9VPP834/Obstbaum and Denisov-Blanch - Ongoing Research on Software Engineering Productivity.pdf}
}

@misc{oroszMeasuringDeveloperProductivity2024,
  title = {Measuring Developer Productivity? {{A}} Response to {{McKinsey}}},
  shorttitle = {Measuring Developer Productivity?},
  author = {Orosz, Gergely},
  year = {2024},
  month = jan,
  urldate = {2025-01-08},
  abstract = {The consulting firm came up with a methodology they claim can measure software developer productivity. But that measurement comes at a high price -- and we offer a more sensible approach.},
  howpublished = {https://newsletter.pragmaticengineer.com/p/measuring-developer-productivity},
  langid = {english},
  file = {/Users/john-flournoy/Zotero/storage/6SVW66NU/measuring-developer-productivity.html}
}

@misc{oroszMeasuringDeveloperProductivity2024a,
  title = {Measuring Developer Productivity? {{A}} Response to {{McKinsey}}, {{Part}} 2},
  shorttitle = {Measuring Developer Productivity?},
  author = {Orosz, Gergely},
  year = {2024},
  month = oct,
  urldate = {2025-02-06},
  abstract = {The consultancy giant has devised a methodology they claim can measure software developer productivity. But that measurement comes at a high price -- and we offer a more sensible approach. Part 2.},
  howpublished = {https://newsletter.pragmaticengineer.com/p/measuring-developer-productivity-part-2},
  langid = {english},
  file = {/Users/john-flournoy/Zotero/storage/BMTUA8Z8/measuring-developer-productivity-part-2.html}
}

@misc{paudelMeasuringImpactTechnical2024,
  title = {Towards {{Measuring}} the {{Impact}} of {{Technical Debt}} on {{Lead Time}}: {{An Industrial Case Study}}},
  shorttitle = {Towards {{Measuring}} the {{Impact}} of {{Technical Debt}} on {{Lead Time}}},
  author = {Paudel, Bhuwan and {Gonzalez-Huerta}, Javier and Zabardast, Ehsan and Klotins, Eriks},
  year = {2024},
  month = jun,
  number = {arXiv:2406.01578},
  eprint = {2406.01578},
  primaryclass = {cs},
  publisher = {arXiv},
  doi = {10.48550/arXiv.2406.01578},
  urldate = {2025-02-07},
  abstract = {Objective: We conduct an empirical study investigating whether technical debt impacts lead time in resolving Jira issues. Furthermore, our aim is to measure the extent to which variance in lead time is explainable by the technical debt. Method: We conducted an industrial case study to examine the relationship in six components, each of which was analyzed individually. Technical debt was measured using SonarQube and normalized with the component's size, while lead time to resolve Jira issues was collected directly from Jira. Results: We found a set of mixed results. Technical debt had a moderate positive impact on lead time in two components, while we did not see a meaningful impact on two others. A moderate negative impact was found in the remaining two components. Conclusion: The findings show that technical debt alone can not explain all the variance in lead time, which ranges from 5\% up to 41\% across components. So, there should be some other variables (e.g., size of the changes made, complexity, number of teams involved, component ownership) impacting lead time, or it might have a residual effect that might manifest later on. Further investigation into those confounding variables is essential.},
  archiveprefix = {arXiv},
  langid = {english},
  keywords = {Computer Science - Software Engineering},
  file = {/Users/john-flournoy/Zotero/storage/AW5U7YDU/Paudel et al. - 2024 - Towards Measuring the Impact of Technical Debt on Lead Time An Industrial Case Study.pdf}
}

@manual{pedersenPatchworkComposerPlots2024,
  type = {Manual},
  title = {Patchwork: {{The}} Composer of Plots},
  author = {Pedersen, Thomas Lin},
  year = {2024}
}

@manual{pedersenScicoColourPalettes2025,
  type = {Manual},
  title = {Scico: {{Colour}} Palettes Based on the Scientific Colour-Maps},
  author = {Pedersen, Thomas Lin and Crameri, Fabio},
  year = {2025}
}

@manual{qiuShowtextUsingFonts2024,
  type = {Manual},
  title = {Showtext: {{Using}} Fonts More Easily in {{R}} Graphs},
  author = {Qiu, Yixuan and for {details.}, authors/contributors of the included software. See file AUTHORS},
  year = {2024}
}

@article{quadlinMarkWomansRecord2018,
  title = {The {{Mark}} of a {{Woman}}'s {{Record}}: {{Gender}} and {{Academic Performance}} in {{Hiring}}},
  shorttitle = {The {{Mark}} of a {{Woman}}'s {{Record}}},
  author = {Quadlin, Natasha},
  year = {2018},
  month = apr,
  journal = {American Sociological Review},
  volume = {83},
  number = {2},
  pages = {331--360},
  publisher = {SAGE Publications Inc},
  issn = {0003-1224},
  doi = {10.1177/0003122418762291},
  urldate = {2025-02-15},
  abstract = {Women earn better grades than men across levels of education---but to what end? This article assesses whether men and women receive equal returns to academic performance in hiring. I conducted an audit study by submitting 2,106 job applications that experimentally manipulated applicants' GPA, gender, and college major. Although GPA matters little for men, women benefit from moderate achievement but not high achievement. As a result, high-achieving men are called back significantly more often than high-achieving women---at a rate of nearly 2-to-1. I further find that high-achieving women are most readily penalized when they major in math: high-achieving men math majors are called back three times as often as their women counterparts. A survey experiment conducted with 261 hiring decision-makers suggests that these patterns are due to employers' gendered standards for applicants. Employers value competence and commitment among men applicants, but instead privilege women applicants who are perceived as likeable. This standard helps moderate-achieving women, who are often described as sociable and outgoing, but hurts high-achieving women, whose personalities are viewed with more skepticism. These findings suggest that achievement invokes gendered stereotypes that penalize women for having good grades, creating unequal returns to academic performance at labor market entry.},
  langid = {english}
}

@article{ramirezMeasuringKnowledgeWorker2004,
  title = {Measuring Knowledge Worker Productivity},
  author = {Ram{\'i}rez, Yuri W. and Nembhard, David A.},
  year = {2004},
  month = jan,
  journal = {Journal of Intellectual Capital},
  volume = {5},
  number = {4},
  pages = {602--628},
  publisher = {Emerald Group Publishing Limited},
  issn = {1469-1930},
  doi = {10.1108/14691930410567040},
  urldate = {2024-10-02},
  abstract = {The structure of the economy continues to change; where once they are dependent on the productivity of a manual workforce, companies increasingly depend on the productivity of knowledge workers. Today, knowledge workers account for more than two-thirds of the workforce, and thus should be the focus of strategic plans to improve productivity. Currently there are no universally accepted methods to measure knowledge worker productivity, or even generally accepted categories. This paper provides a taxonomy of knowledge worker productivity measurements, and identifies a number of productivity dimensions that are used to categorize the findings of previous research. Also describes the relative density of discussions along these dimensions and identifies critical areas for future research.},
  keywords = {Employee productivity,Knowledge organizations,Performance measures,Quality},
  file = {/Users/john-flournoy/Zotero/storage/FVDRG4Y3/Ramírez and Nembhard - 2004 - Measuring knowledge worker productivity.pdf}
}

@manual{rcoreteamLanguageEnvironmentStatistical2023,
  type = {Manual},
  title = {R: A Language and Environment for Statistical Computing},
  author = {{R Core Team}},
  year = {2023},
  address = {Vienna, Austria},
  institution = {R Foundation for Statistical Computing}
}

@misc{rigginsWhatMcKinseyGot2023,
  title = {What {{McKinsey}} Got Wrong about Developer Productivity},
  author = {Riggins, Jennifer},
  year = {2023},
  month = oct,
  journal = {LeadDev},
  urldate = {2024-12-17},
  abstract = {The consulting giant kicked a hornet's nest when it launched a framework to measure software developer productivity. Here's what engineers think they got wrong.},
  howpublished = {https://leaddev.com/career-development/what-mckinsey-got-wrong-about-developer-productivity},
  langid = {american},
  annotation = {https://web.archive.org/web/20250107212928/https://leaddev.com/career-development/what-mckinsey-got-wrong-about-developer-productivity},
  file = {/Users/john-flournoy/Zotero/storage/FG7QYFXJ/what-mckinsey-got-wrong-about-developer-productivity.html}
}

@misc{riosaWrittenUnwrittenGuide2019,
  title = {The (Written) Unwritten Guide to Pull Requests},
  author = {Riosa, Blake},
  year = {2019},
  month = jul,
  journal = {Work Life by Atlassian},
  urldate = {2025-02-07},
  abstract = {Code review is a very important part of the software development cycle. On Bitbucket and other source code management systems,...},
  howpublished = {https://www.atlassian.com/blog/git/written-unwritten-guide-pull-requests},
  langid = {american},
  file = {/Users/john-flournoy/Zotero/storage/BRQ5E7KE/written-unwritten-guide-pull-requests.html}
}

@inproceedings{rosserSystemsPerspectiveTechnical2021,
  title = {A {{Systems Perspective}} on {{Technical Debt}}},
  booktitle = {2021 {{IEEE Aerospace Conference}} (50100)},
  author = {Rosser, Larri Ann and Norton, John H},
  year = {2021},
  month = mar,
  pages = {1--10},
  issn = {1095-323X},
  doi = {10.1109/AERO50100.2021.9438359},
  urldate = {2025-02-07},
  abstract = {This paper explores applications of the Technical Debt metaphor, which originated in the agile software community, at a systems level. We present a summary of current understanding of the technical debt concept and propose a broader application of the approach at a system level. The technical debt metaphor provides a method to identify cases when design or implementation decisions are being made for expediency and assess their long term impact on productivity and risk. In addition, technical debt management offers a logical approach to tracking expedient decisions and determining when it makes sense to carry the debt and when it's better to pay it off by updating designed and retrofitting units. In this paper, we describe various kinds of technical debt that may be present in a system baseline and consider how the presence of debt impacts further evolution of the system. Types of debt include architectural debt, configuration debt, testing debt and deprecation debt among others. We also present use case studies that illustrate how technical debt assessment and management can have a positive impact on system realization. Cases include moving a baseline from R\&D to operations, reusing a baseline in a new context, and planning a technical refresh. We discuss methods of managing technical debt in a baseline including identification, quantification, tracking and payoff.},
  keywords = {Conferences,Planning,Productivity,Research and development,Software,System realization,Testing},
  file = {/Users/john-flournoy/Zotero/storage/JBUBBESG/Rosser and Norton - 2021 - A Systems Perspective on Technical Debt.pdf}
}

@article{rummelAverageWeibullAnalysis2017,
  title = {Beyond {{Average}}: {{Weibull Analysis}} of {{Task Completion Times}}},
  author = {Rummel, Bernard},
  year = {2017},
  volume = {12},
  number = {2},
  abstract = {Weibull analysis is an established method in technical reliability analysis for describing and analyzing the lifetime of technical parts. This paper describes the approach and demonstrates its application on task completion times from small-sample usability tests. Fitting a Weibull distribution model to observed data lets the analyst estimate task completion rates for any given time, and vice versa. Model parameters can be related to aspects of technical and cognitive efficiency, as well as factors that accelerate or decelerate user performance, and therefore are new candidate metrics for quantifying user interface (UI) efficiency.},
  langid = {english},
  file = {/Users/john-flournoy/Zotero/storage/N73HHCUL/Rummel - 2017 - Beyond Average Weibull Analysis of Task Completion Times.pdf}
}

@article{rummelTimePractitionersGuide2020,
  title = {About {{Time}}: {{A Practitioner}}'s {{Guide}} to {{Task Completion Time Analysis}}},
  author = {Rummel, Bernard},
  year = {2020},
  volume = {15},
  number = {3},
  langid = {english},
  file = {/Users/john-flournoy/Zotero/storage/2AQIAEE9/Rummel - 2020 - About Time A Practitioner’s Guide to Task Completion Time Analysis.pdf}
}

@inproceedings{ruvimovaExploratoryStudyProductivity2022,
  title = {An Exploratory Study of Productivity Perceptions in Software Teams},
  booktitle = {Proceedings of the 44th {{International Conference}} on {{Software Engineering}}},
  author = {Ruvimova, Anastasia and Lill, Alexander and Gugler, Jan and Howe, Lauren and Huang, Elaine and Murphy, Gail and Fritz, Thomas},
  year = {2022},
  month = may,
  pages = {99--111},
  publisher = {ACM},
  address = {Pittsburgh Pennsylvania},
  doi = {10.1145/3510003.3510081},
  urldate = {2022-11-12},
  isbn = {978-1-4503-9221-1},
  langid = {english},
  keywords = {over time measures,productivity,qual and quant cycle,team productivity},
  file = {/Users/john-flournoy/Zotero/storage/FHFB6UA2/3510003.3510081 (1).pdf}
}

@article{sackmanExploratoryExperimentalStudies1968,
  title = {Exploratory Experimental Studies Comparing Online and Offline Programming Performance},
  author = {Sackman, H. and Erikson, W. J. and Grant, E. E.},
  year = {1968},
  month = jan,
  journal = {Communications of the ACM},
  volume = {11},
  number = {1},
  pages = {3--11},
  issn = {0001-0782, 1557-7317},
  doi = {10.1145/362851.362858},
  urldate = {2024-10-02},
  langid = {english},
  file = {/Users/john-flournoy/Zotero/storage/IKVFR7ZR/Sackman et al. - 1968 - Exploratory experimental studies comparing online and offline programming performance.pdf}
}

@book{sadowskiRethinkingProductivitySoftware2019,
  title = {Rethinking {{Productivity}} in {{Software Engineering}}},
  editor = {Sadowski, Caitlin and Zimmermann, Thomas},
  year = {2019},
  publisher = {Springer Nature},
  doi = {10.1007/978-1-4842-4221-6},
  urldate = {2025-02-07},
  abstract = {Get the most out of this foundational reference and improve the productivity of your software teams. This open access book collects the wisdom of the 2017 "Dagstuhl" seminar on productivity in software engineering, a meeting of community leaders, who came together with the goal of rethinking traditional definitions and measures of productivity. The results of their work, Rethinking Productivity in Software Engineering, includes chapters covering definitions and core concepts related to productivity, guidelines for measuring productivity in specific contexts, best practices and pitfalls, and theories and open questions on productivity. You'll benefit from the many short chapters, each offering a focused discussion on one aspect of productivity in software engineering. Readers in many fields and industries will benefit from their collected work. Developers wanting to improve their personal productivity, will learn effective strategies for overcoming common issues that interfere with progress. Organizations thinking about building internal programs for measuring productivity of programmers and teams will learn best practices from industry and researchers in measuring productivity. And researchers can leverage the conceptual frameworks and rich body of literature in the book to effectively pursue new research directions. What You'll Learn Review the definitions and dimensions of software productivity See how time management is having the opposite of the intended effect Develop valuable dashboards Understand the impact of sensors on productivity Avoid software development waste Work with human-centered methods to measure productivity Look at the intersection of neuroscience and productivity Manage interruptions and context-switching Who Book Is For Industry developers and those responsible for seminar-style courses that include a segment on software developer productivity. Chapters are written for a generalist audience, without excessive use of technical terminology. ; Collects the wisdom of software engineering thought leaders in a form digestible for any developer Shares hard-won best practices and pitfalls to avoid An up to date look at current practices in software engineering productivity},
  langid = {english},
  keywords = {Business and Management::KJ Business and Management::KJQ Business mathematics and systems,Computer science,Finance,Management information systems,Programming languages (Electronic computers),thema EDItEUR::K Economics,thema EDItEUR::U Computing and Information Technology::UM Computer programming / software engineering::UMX Programming and scripting languages: general},
  annotation = {Accepted: 2020-03-18 13:36:15},
  file = {/Users/john-flournoy/Zotero/storage/W93GZUI3/Sadowski and Zimmermann - 2019 - Rethinking Productivity in Software Engineering.pdf}
}

@incollection{sadowskiSoftwareDevelopmentProductivity2019,
  title = {A {{Software Development Productivity Framework}}},
  booktitle = {Rethinking {{Productivity}} in {{Software Engineering}}},
  author = {Sadowski, Caitlin and Storey, Margaret-Anne and Feldt, Robert},
  editor = {Sadowski, Caitlin and Zimmermann, Thomas},
  year = {2019},
  pages = {39--47},
  publisher = {Apress},
  address = {Berkeley, CA},
  doi = {10.1007/978-1-4842-4221-6_5},
  urldate = {2024-10-02},
  isbn = {978-1-4842-4220-9 978-1-4842-4221-6},
  langid = {english},
  file = {/Users/john-flournoy/Zotero/storage/IKEIY6GH/Sadowski et al. - 2019 - A Software Development Productivity Framework.pdf}
}

@inproceedings{SciPyProceedings_11,
  title = {Exploring Network Structure, Dynamics, and Function Using {{NetworkX}}},
  booktitle = {Proceedings of the 7th Python in Science Conference},
  author = {Hagberg, Aric A. and Schult, Daniel A. and Swart, Pieter J.},
  editor = {Varoquaux, Ga{\"e}l and Vaught, Travis and Millman, Jarrod},
  year = {2008},
  pages = {11--15},
  address = {Pasadena, CA USA}
}

@article{shrikanthAssessingPractitionerBeliefs2021,
  title = {Assessing Practitioner Beliefs about Software Engineering},
  author = {Shrikanth, N. C. and Nichols, William and Fahid, Fahmid Morshed and Menzies, Tim},
  year = {2021},
  month = may,
  journal = {Empirical Software Engineering},
  volume = {26},
  number = {4},
  pages = {73},
  issn = {1573-7616},
  doi = {10.1007/s10664-021-09957-5},
  urldate = {2024-10-02},
  abstract = {Software engineering is a highly dynamic discipline. Hence, as times change, so too might our beliefs about core processes in this field. This paper checks some five beliefs that originated in the past decades that comment on the relationships between (i) developer productivity; (ii) software quality and (iii) years of developer experience. Using data collected from 1,356 developers in the period 1995 to 2006, we found support for only one of the five beliefs titled ``Quality entails productivity.'' We found no clear support for four other beliefs based on programming languages and software developers. However, from the sporadic evidence of the four other beliefs, we learned that a narrow scope could delude practitioners in misinterpreting certain effects to hold in their day-to-day work. Lastly, through an aggregated view of assessing the five beliefs, we find programming languages act as a confounding factor for developer productivity and software quality. Thus the overall message of this work is that it is both important and possible to revisit old beliefs in software engineering. Researchers and practitioners should routinely retest old beliefs.},
  langid = {english},
  keywords = {Beliefs,Experience,Productivity,Quality,Software analytics},
  file = {/Users/john-flournoy/Zotero/storage/9KUV232M/Shrikanth et al. - 2021 - Assessing practitioner beliefs about software engineering.pdf}
}

@inproceedings{sjobergFutureEmpiricalMethods2007,
  title = {The {{Future}} of {{Empirical Methods}} in {{Software Engineering Research}}},
  booktitle = {Future of {{Software Engineering}} ({{FOSE}} '07)},
  author = {Sjoberg, Dag I. K. and Dyba, Tore and Jorgensen, Magne},
  year = {2007},
  month = may,
  pages = {358--378},
  doi = {10.1109/FOSE.2007.30},
  urldate = {2025-02-28},
  abstract = {We present the vision that for all fields of software engineering (SE), empirical research methods should enable the development of scientific knowledge about how useful different SE technologies are for different kinds of actors, performing different kinds of activities, on different kinds of systems. It is part of the vision that such scientific knowledge will guide the development of new SE technology and is a major input to important SE decisions in industry. Major challenges to the pursuit of this vision are: more SE research should be based on the use of empirical methods; the quality, including relevance, of the studies using such methods should be increased; there should be more and better synthesis of empirical evidence; and more theories should be built and tested. Means to meet these challenges include (1) increased competence regarding how to apply and combine alternative empirical methods, (2) tighter links between academia and industry, (3) the development of common research agendas with a focus on empirical methods, and (4) more resources for empirical research.},
  keywords = {Computer industry,Computer science,Computer Society,Informatics,Information science,Laboratories,Project management,Software development management,Software engineering,Software systems},
  file = {/Users/john-flournoy/Zotero/storage/QJ2QSM4Y/4221632.html}
}

@misc{standevelopmentteamStanHeadersHeadersInterface2020,
  title = {{{StanHeaders}}: {{Headers}} for the {{R}} Interface to {{Stan}}},
  author = {{Stan Development Team}},
  year = {2020}
}

@misc{storeyHowDevelopersManagers2022,
  title = {How {{Developers}} and {{Managers Define}} and {{Trade Productivity}} for {{Quality}}},
  author = {Storey, Margaret-Anne and Houck, Brian and Zimmermann, Thomas},
  year = {2022},
  month = apr,
  eprint = {2111.04302},
  primaryclass = {cs},
  doi = {10.1145/3528579.3529177},
  urldate = {2022-07-18},
  abstract = {Objective \& Method: Through an exploratory survey study with developers and managers at Microsoft, we investigated how these cohorts define productivity and quality, how aligned they are in their views, how aware they are of other views, and if and how they trade quality for productivity. Results: We find developers and managers, as cohorts, are not well-aligned in their views of productivity---developers think more about work activities, while more managers consider performance or quality outcomes. We find developers and managers have more aligned views of what quality means, with the majority defining quality in terms of robustness, while the timely delivery of evolvable features that delight users are also key quality aspects. Over half of the developers and managers we surveyed make productivity and quality trade-offs but with good reasons for doing so. Conclusion: Alignment on how developers and managers define productivity and quality is essential if they are to design effective improvement interventions and meaningful metrics to measure productivity and quality improvements. Our research provides a frame for developers and managers to align their views and to make informed decisions on productivity and quality trade-offs.},
  archiveprefix = {arXiv},
  langid = {english},
  keywords = {Computer Science - Software Engineering,team productivity},
  file = {/Users/john-flournoy/Zotero/storage/D8UWJDER/Storey et al. - 2022 - How Developers and Managers Define and Trade Produ.pdf}
}

@inproceedings{storeyHowDevelopersManagers2022b,
  title = {How {{Developers}} and {{Managers Define}} and {{Trade Productivity}} for {{Quality}}},
  booktitle = {Proceedings of the 15th {{International Conference}} on {{Cooperative}} and {{Human Aspects}} of {{Software Engineering}}},
  author = {Storey, Margaret-Anne and Houck, Brian and Zimmermann, Thomas},
  year = {2022},
  month = may,
  eprint = {2111.04302},
  primaryclass = {cs},
  pages = {26--35},
  doi = {10.1145/3528579.3529177},
  urldate = {2024-12-17},
  abstract = {Objective \& Method: Through an exploratory survey study with developers and managers at Microsoft, we investigated how these cohorts define productivity and quality, how aligned they are in their views, how aware they are of other views, and if and how they trade quality for productivity. Results: We find developers and managers, as cohorts, are not well-aligned in their views of productivity---developers think more about work activities, while more managers consider performance or quality outcomes. We find developers and managers have more aligned views of what quality means, with the majority defining quality in terms of robustness, while the timely delivery of evolvable features that delight users are also key quality aspects. Over half of the developers and managers we surveyed make productivity and quality trade-offs but with good reasons for doing so. Conclusion: Alignment on how developers and managers define productivity and quality is essential if they are to design effective improvement interventions and meaningful metrics to measure productivity and quality improvements. Our research provides a frame for developers and managers to align their views and to make informed decisions on productivity and quality trade-offs.},
  archiveprefix = {arXiv},
  langid = {english},
  keywords = {Computer Science - Software Engineering},
  file = {/Users/john-flournoy/Zotero/storage/Q88FZMIW/Storey et al. - 2022 - How Developers and Managers Define and Trade Productivity for Quality.pdf}
}

@article{storeyTheorySoftwareDeveloper2021,
  title = {Towards a {{Theory}} of {{Software Developer Job Satisfaction}} and {{Perceived Productivity}}},
  author = {Storey, Margaret-Anne and Zimmermann, Thomas and Bird, Christian and Czerwonka, Jacek and Murphy, Brendan and Kalliamvakou, Eirini},
  year = {2021},
  month = oct,
  journal = {IEEE Transactions on Software Engineering},
  volume = {47},
  number = {10},
  pages = {2125--2142},
  issn = {0098-5589, 1939-3520, 2326-3881},
  doi = {10.1109/TSE.2019.2944354},
  urldate = {2022-07-18},
  abstract = {Developer satisfaction and work productivity are important considerations for software companies. Enhanced developer satisfaction may improve the attraction, retention and health of employees, while higher productivity should reduce costs and increase customer satisfaction through faster software improvements. Many researchers and companies assume that perceived productivity and job satisfaction are related and may be used as proxies for one another, but these claims are a current topic of debate. There are also many social and technical factors that may impact satisfaction and productivity, but which factors have the most impact is not clear, especially for specific development contexts. Through our research, we developed a theory articulating a bidirectional relationship between software developer job satisfaction and perceived productivity, and identified what additional social and technical factors, challenges and work context variables influence this relationship. The constructs and relationships in our theory were derived in part from related literature in software engineering and knowledge work, and we validated and extended these concepts through a rigorously designed survey instrument. We instantiate our theory with a large software company, which suggests a number of propositions about the relative impact of various factors and challenges on developer satisfaction and perceived productivity. Our survey instrument and analysis approach can be applied to other development settings, while our findings lead to concrete recommendations for practitioners and researchers.},
  langid = {english},
  keywords = {Companies,Complexity theory,empirical studies,Measurement,Productivity,Psychology,Software,software companies,Software engineering,Software engineering management,theory},
  file = {/Users/john-flournoy/Zotero/storage/752M3TYU/Storey et al. - 2021 - Towards a Theory of Software Developer Job Satisfa.pdf;/Users/john-flournoy/Zotero/storage/YAC93GY8/Storey et al. - Appendix to How Developers and Managers Define and.pdf;/Users/john-flournoy/Zotero/storage/RIJF8IJB/Storey et al. - 2021 - Towards a Theory of Software Developer Job Satisfa.html}
}

@article{tangenDemystifyingProductivityPerformance2005,
  title = {Demystifying Productivity and Performance},
  author = {Tangen, Stefan},
  year = {2005},
  month = jan,
  journal = {International Journal of Productivity and Performance Management},
  volume = {54},
  number = {1},
  pages = {34--46},
  issn = {1741-0401},
  doi = {10.1108/17410400510571437},
  urldate = {2023-03-06},
  abstract = {Purpose -- Examines the ways in which the concepts of ``productivity'' and ``performance'' are dealt with in the literature, demonstrating that terms used within these fields are often vaguely defined and poorly understood.},
  langid = {english},
  file = {/Users/john-flournoy/Zotero/storage/S4AIJZDF/Tangen - 2005 - Demystifying productivity and performance.pdf}
}

@misc{terhorst-northMcKinseyDeveloperProductivity2023,
  title = {{{McKinsey Developer Productivity Review}}},
  author = {{Terhorst-North}, Daniel},
  year = {2023},
  month = oct,
  journal = {Dan North \& Associates Limited},
  urldate = {2025-02-06},
  abstract = {McKinsey recently published an article claiming they can measure developer productivity. This has provoked something of a backlash from some prominent software people, but I have not seen anyone engage with the content of the article itself, so I thought this would be useful. I am writing this as though the authors have approached me for a technical review of their article. You can think of it as an open letter.},
  howpublished = {https://dannorth.net/mckinsey-review/},
  langid = {english},
  annotation = {https://web.archive.org/web/20250107213045/https://dannorth.net/mckinsey-review/},
  file = {/Users/john-flournoy/Zotero/storage/BUAZLSSW/mckinsey-review.html}
}

@misc{terhorst-northWorstProgrammerKnow2023,
  title = {The {{Worst Programmer I Know}}},
  author = {{Terhorst-North}, Daniel},
  year = {2023},
  month = sep,
  journal = {Dan North \& Associates Limited},
  urldate = {2025-02-06},
  abstract = {The great thing about measuring developer productivity is that you can quickly identify the bad programmers. I want to tell you about the worst programmer I know, and why I fought to keep him in the team.},
  howpublished = {https://dannorth.net/the-worst-programmer/},
  langid = {english},
  annotation = {https://web.archive.org/web/20240614053115/https://dannorth.net/the-worst-programmer/},
  file = {/Users/john-flournoy/Zotero/storage/ESWFU9FQ/the-worst-programmer.html}
}

@misc{toxboeCycleTime2023,
  title = {Cycle {{Time}}},
  author = {Toxboe, Anders},
  year = {2023},
  month = feb,
  journal = {Learning Loop},
  urldate = {2025-02-07},
  abstract = {The total amount of time it takes to complete a process from start to finish.},
  chapter = {glossary},
  howpublished = {https://learningloop.io/glossary/cycle-time},
  langid = {english},
  file = {/Users/john-flournoy/Zotero/storage/KP7CGA6P/cycle-time.html}
}

@incollection{trendowiczChapter6Factors2009,
  title = {Chapter 6 {{Factors Influencing Software Development Productivity}}---{{State}}-of-the-{{Art}} and {{Industrial Experiences}}},
  booktitle = {Advances in {{Computers}}},
  author = {Trendowicz, Adam and M{\"u}nch, J{\"u}rgen},
  year = {2009},
  month = jan,
  volume = {77},
  pages = {185--241},
  publisher = {Elsevier},
  doi = {10.1016/S0065-2458(09)01206-6},
  urldate = {2025-02-07},
  abstract = {Managing software development productivity is a key issue in software organizations. Business demands for shorter time-to-market while maintaining high product quality force software organizations to look for new strategies to increase development productivity. Traditional, simple delivery rates employed to control hardware production processes have turned out not to work when simply transferred to the software domain. The productivity of software production processes may vary across development contexts dependent on numerous influencing factors. Effective productivity management requires considering these factors. Yet, there are thousands of possible factors and considering all of them would make no sense from the economical point of view. Therefore, productivity modeling should focus on a limited number of factors with the most significant impact on productivity. In this chapter, we present a comprehensive overview of productivity factors recently considered by software practitioners. The study results are based on the review of 126 publications as well as international experiences of the Fraunhofer Institute, including the most recent 13 industrial projects, four workshops, and eight surveys on software productivity. The aggregated results show that the productivity of software development processes still depends significantly on the capabilities of developers as well as on the tools and methods they use.},
  file = {/Users/john-flournoy/Zotero/storage/UH94SHIZ/Trendowicz and Münch - 2009 - Chapter 6 Factors Influencing Software Development Productivity—State‐of‐the‐Art and Industrial Expe.pdf;/Users/john-flournoy/Zotero/storage/VLA8UGZD/S0065245809012066.html}
}

@article{vansolingenMeasuringROISoftware2004,
  title = {Measuring the {{ROI}} of Software Process Improvement},
  author = {Van Solingen, R.},
  year = {2004},
  month = may,
  journal = {IEEE Software},
  volume = {21},
  number = {3},
  pages = {32--38},
  issn = {0740-7459},
  doi = {10.1109/MS.2004.1293070},
  urldate = {2023-05-12},
  langid = {english}
}

@article{vehtariRanknormalizationFoldingLocalization2021,
  title = {Rank-Normalization, Folding, and Localization: {{An}} Improved {{Rhat}} for Assessing Convergence of {{MCMC}} (with Discussion)},
  author = {Vehtari, Aki and Gelman, Andrew and Simpson, Daniel and Carpenter, Bob and B{\"u}rkner, Paul-Christian},
  year = {2021},
  journal = {Bayesian Analysis}
}

@article{vonhippelFreeRevealingPrivatecollective2006,
  title = {Free Revealing and the Private-Collective Model for Innovation Incentives},
  author = {Von Hippel, Eric and Von Krogh, Georg},
  year = {2006},
  month = jun,
  journal = {R and D Management},
  volume = {36},
  number = {3},
  pages = {295--306},
  issn = {0033-6807, 1467-9310},
  doi = {10.1111/j.1467-9310.2006.00435.x},
  urldate = {2025-02-05},
  copyright = {http://doi.wiley.com/10.1002/tdm\_license\_1.1},
  langid = {english},
  file = {/Users/john-flournoy/Zotero/storage/BRH9N9ZX/Von Hippel and Von Krogh - 2006 - Free revealing and the private-collective model for innovation incentives.pdf}
}

@misc{walkerConsUsingSPACE2023,
  title = {Cons of {{Using SPACE}} to {{Measure Productivity}} {\textbar} {{Aviator}}},
  author = {Walker, James},
  year = {2023},
  month = feb,
  urldate = {2025-02-06},
  abstract = {Learn how you can use SPACE to understand your team's performance and possible issues related to its usage, such as incorrect causes of productivity issues.},
  langid = {american},
  annotation = {https://web.archive.org/web/20230930163407/https://www.aviator.co/blog/whats-wrong-with-using-space-to-measure-developer-productivity/},
  file = {/Users/john-flournoy/Zotero/storage/UTHE2W9F/whats-wrong-with-using-space-to-measure-developer-productivity.html}
}

@misc{walkerEverythingWrongDORA2023,
  title = {Everything {{Wrong}} with {{DORA Metrics}} {\textbar} {{Aviator}}},
  author = {Walker, James},
  year = {2023},
  month = jan,
  urldate = {2025-02-06},
  abstract = {DORA metrics aren't a definitive route to DevOps success. Learn why DORA can make developers uncomfortable in our post to better understand potential issues.},
  langid = {american},
  file = {/Users/john-flournoy/Zotero/storage/C7RX75TY/everything-wrong-with-dora-metrics.html}
}

@article{wattsNewScienceNetworks2004,
  title = {The ``{{New}}'' {{Science}} of {{Networks}}},
  author = {Watts, Duncan J.},
  year = {2004},
  month = aug,
  journal = {Annual Review of Sociology},
  volume = {30},
  number = {Volume 30, 2004},
  pages = {243--270},
  publisher = {Annual Reviews},
  issn = {0360-0572, 1545-2115},
  doi = {10.1146/annurev.soc.30.020404.104342},
  urldate = {2025-02-28},
  abstract = {In recent years, the analysis and modeling of networks, and also networked dynamical systems, have been the subject of considerable interdisciplinary interest, yielding several hundred papers in physics, mathematics, computer science, biology, economics, and sociology journals (Newman 2003c), as well as a number of books (Barabasi 2002, Buchanan 2002, Watts 2003). Here I review the major findings of this emerging field and discuss briefly their relationship with previous work in the social and mathematical sciences.},
  langid = {english},
  file = {/Users/john-flournoy/Zotero/storage/L3HF7PE6/annurev.soc.30.020404.html}
}

@misc{waydevCycleTimeFormula2021,
  title = {Cycle {{Time Formula}}: {{How}} to {{Optimize}} the {{Key Metric}} to {{Accelerate Software Delivery}}},
  author = {Waydev},
  year = {2021},
  month = jul
}

@inproceedings{wehaibiExaminingImpactSelfAdmitted2016,
  title = {Examining the {{Impact}} of {{Self-Admitted Technical Debt}} on {{Software Quality}}},
  booktitle = {2016 {{IEEE}} 23rd {{International Conference}} on {{Software Analysis}}, {{Evolution}}, and {{Reengineering}} ({{SANER}})},
  author = {Wehaibi, Sultan and Shihab, Emad and Guerrouj, Latifa},
  year = {2016},
  month = mar,
  volume = {1},
  pages = {179--188},
  doi = {10.1109/SANER.2016.72},
  abstract = {Technical debt refers to incomplete or temporary workarounds that allow us to speed software development in the short term at the cost of paying a higher price later on. Recently, studies have shown that technical debt can be detected from source code comments, referred to as self-admitted technical debt. Researchers have examined the detection, classification and removal of self-admitted technical debt. However, to date there is no empirical evidence on the impact of self-admitted technical debt on software quality. Therefore, in this paper, we examine the relation between self-admitted technical debt and software quality by investigating whether (i) files with self-admitted technical debt have more defects compared to files without self-admitted technical debt, (ii) whether self-admitted technical debt changes introduce future defects, and (iii) whether self-admitted technical debt-related changes tend to be more difficult. We measured the difficulty of a change using well-known measures proposed in prior work such as the amount of churn, the number of files, the number of modified modules in a change, as well as the entropy of a change. An empirical study using five open source projects, namely Hadoop, Chromium, Cassandra, Spark and Tomcat, showed that: (i) there is no clear trend when it comes to defects and self-admitted technical debt, although the defectiveness of the technical debt files increases after the introduction of technical debt, (ii) self-admitted technical debt changes induce less future defects than none technical debt changes, however, (iii) self-admitted technical debt changes are more difficult to perform, i.e., they are more complex. Our study indicates that although technical debt may have negative effects, its impact is not only related to defects, rather making the system more difficult to change in the future.},
  keywords = {bugs,Chromium,churn,defects,Entropy,quality,satd,self-admitted technical debt,Software measurement,Software quality,Sparks,td,technical debt},
  file = {/Users/john-flournoy/Zotero/storage/QUV5EI6P/Wehaibi et al. - 2016 - Examining the Impact of Self-Admitted Technical De.html}
}

@book{wickhamGgplot2ElegantGraphics2016,
  title = {Ggplot2: {{Elegant}} Graphics for Data Analysis},
  author = {Wickham, Hadley},
  year = {2016},
  publisher = {Springer-Verlag New York},
  isbn = {978-3-319-24277-4}
}

@manual{wickhamScalesScaleFunctions2023,
  type = {Manual},
  title = {Scales: {{Scale}} Functions for Visualization},
  author = {Wickham, Hadley and Pedersen, Thomas Lin and Seidel, Dana},
  year = {2023}
}

@article{woodFastStableRestricted2011,
  title = {Fast Stable Restricted Maximum Likelihood and Marginal Likelihood Estimation of Semiparametric Generalized Linear Models},
  author = {Wood, Simon N.},
  year = {2011},
  journal = {Journal of the Royal Statistical Society (B)},
  volume = {73},
  number = {1},
  pages = {3--36}
}

@book{woodGeneralizedAdditiveModels2017,
  title = {Generalized {{Additive Models}}: {{An Introduction}} with {{R}}, {{Second Edition}}},
  shorttitle = {Generalized {{Additive Models}}},
  author = {Wood, Simon N.},
  year = {2017},
  month = may,
  publisher = {CRC Press},
  abstract = {The first edition of this book has established itself as one of the leading references on generalized additive models (GAMs), and the only book on the topic to be introductory in nature with a wealth of practical examples and software implementation. It is self-contained, providing the necessary background in linear models, linear mixed models, and generalized linear models (GLMs), before presenting a balanced treatment of the theory and applications of GAMs and related models.   The author bases his approach on a framework of penalized regression splines, and while firmly focused on the practical aspects of GAMs, discussions include fairly full explanations of the theory underlying the methods. Use of R software helps explain the theory and illustrates the practical application of the methodology. Each chapter contains an extensive set of exercises, with solutions in an appendix or in the book's R data package gamair, to enable use as a course text or for self-study. Simon N. Wood is a professor of Statistical Science at the University of Bristol, UK, and author of the R package mgcv.},
  isbn = {978-1-4987-2834-8},
  langid = {english},
  keywords = {Mathematics / Probability & Statistics / General},
  file = {/Users/john-flournoy/Zotero/storage/JWT7IIPN/Wood-2017-Generalized_Additive_Models.pdf}
}

@article{woodSmoothingParameterModel2016,
  title = {Smoothing Parameter and Model Selection for General Smooth Models (with Discussion)},
  author = {Wood, Simon N. and Pya, N. and Saefken, B.},
  year = {2016},
  journal = {Journal of the American Statistical Association},
  volume = {111},
  pages = {1548--1575}
}

@article{woodStableEfficientMultiple2004,
  title = {Stable and Efficient Multiple Smoothing Parameter Estimation for Generalized Additive Models},
  author = {Wood, Simon N.},
  year = {2004},
  journal = {Journal of the American Statistical Association},
  volume = {99},
  number = {467},
  pages = {673--686}
}

@article{woodThinplateRegressionSplines2003,
  title = {Thin-Plate Regression Splines},
  author = {Wood, Simon N.},
  year = {2003},
  journal = {Journal of the Royal Statistical Society (B)},
  volume = {65},
  number = {1},
  pages = {95--114}
}

@book{xieDynamicDocumentsKnitr2015,
  title = {Dynamic Documents with {{R}} and Knitr},
  author = {Xie, Yihui},
  year = {2015},
  edition = {2},
  publisher = {{Chapman and Hall/CRC}},
  address = {Boca Raton, Florida}
}

@incollection{xieKnitrComprehensiveTool2014,
  title = {Knitr: A Comprehensive Tool for Reproducible Research in {{R}}},
  booktitle = {Implementing Reproducible Computational Research},
  author = {Xie, Yihui},
  editor = {Stodden, Victoria and Leisch, Friedrich and Peng, Roger D.},
  year = {2014},
  publisher = {{Chapman and Hall/CRC}}
}

@manual{xieKnitrGeneralpurposePackage2024,
  type = {Manual},
  title = {Knitr: A General-Purpose Package for Dynamic Report Generation in {{R}}},
  author = {Xie, Yihui},
  year = {2024}
}

@article{zelenskiHappyProductiveWorkerThesis2008,
  title = {The {{Happy-Productive Worker Thesis Revisited}}},
  author = {Zelenski, John M. and Murphy, Steven A. and Jenkins, David A.},
  year = {2008},
  month = dec,
  journal = {Journal of Happiness Studies},
  volume = {9},
  number = {4},
  pages = {521--537},
  issn = {1573-7780},
  doi = {10.1007/s10902-008-9087-4},
  urldate = {2025-02-05},
  abstract = {Despite extensive research on the subject spanning over 70~years, uncertainty still remains as to whether happier workers are in fact more productive. This study combined longitudinal prospective and experience sampling methods to examine the relationship between happiness and self-reported productivity among Directors employed in the public and private sectors. Analyses at a trait level suggested happy people were more productive. Similarly, at the state level of analysis, people were more productive when they were happier. Among the happiness indicators examined (job satisfaction, quality of work life, life satisfaction, positive affect, and negative affect) positive affect was most strongly, but not exclusively, tied to productivity at both the state and trait levels. Discussion focuses on reconciling a long history of mixed findings regarding the happy-productive worker thesis.},
  langid = {english},
  keywords = {Emotions,Experience sampling,Happiness,Job satisfaction,Life satisfaction,Negative affect,Personality,Positive affect,Productivity,Quality of work life}
}

@article{zhangPullRequestLatency2022,
  title = {Pull Request Latency Explained: An Empirical Overview},
  shorttitle = {Pull Request Latency Explained},
  author = {Zhang, Xunhui and Yu, Yue and Wang, Tao and Rastogi, Ayushi and Wang, Huaimin},
  year = {2022},
  month = nov,
  journal = {Empirical Software Engineering},
  volume = {27},
  number = {6},
  pages = {126},
  issn = {1382-3256, 1573-7616},
  doi = {10.1007/s10664-022-10143-4},
  urldate = {2025-02-11},
  abstract = {Pull request latency evaluation is an essential application of effort evaluation in the pullbased development scenario. It can help the reviewers sort the pull request queue, remind developers about the review processing time, speed up the review process and accelerate software development. There is a lack of work that systematically organizes the factors that affect pull request latency. Also, there is no related work discussing the differences and variations in characteristics in different scenarios and contexts. In this paper, we collected relevant factors through a literature review approach. Then we assessed their relative importance in five scenarios and six different contexts using the mixed-effects linear regression model. The most important factors differ in different scenarios. The length of the description is most important when pull requests are submitted. The existence of comments is most important when closing pull requests, using CI tools, and when the contributor and the integrator are different. When there exist comments, the latency of the first comment is the most important. Meanwhile, the influence of factors may change in different contexts. For example, the number of commits in a pull request has a more significant impact on pull request latency when closing than submitting due to changes in contributions brought about by the review process. Both human and bot comments are positively correlated with pull request latency. In contrast, the bot's first comments are more strongly correlated with latency, but the number of comments is less correlated. Future research and tool implementation needs to consider the impact of different contexts. Researchers can conduct related studies based on our publicly available datasets and replication scripts.},
  langid = {english},
  file = {/Users/john-flournoy/Zotero/storage/GD2WHXD4/Zhang et al. - 2022 - Pull request latency explained an empirical overview.pdf}
}
