---
title: Understanding Technology Team Velocity at Scale
author:
  - name: John C. Flournoy
    degrees:
      - Ph.D.
    orcid: 0000-0003-1735-1221
    roles: [Conceptualization, Data curation, Formal analysis, Investigation, Methodology, Visualization, Writing – original draft, Writing – review & editing]
    corresponding: true
    email: jcflournoyphd@pm.me
    affiliation:
      name: Pluralsight
      city: Draper, UT
      country: USA
  - name: Carol S. Lee
    degrees:
      - Ph.D.
    orcid: 0000-0002-6909-6157
    roles: [Conceptualization, Data curation, Formal analysis, Investigation, Methodology, Writing – original draft, Writing – review & editing]
    corresponding: false
    affiliation:
      name: Pluralsight
      city: Draper, UT
      country: USA
  - name: Catherine M. Hicks
    degrees:
      - Ph.D.
    orcid: 0009-0007-5657-1661
    roles: [Conceptualization, Funding acquisition, Investigation, Methodology, Project administration, Resources, Supervision, Writing – review & editing]
    corresponding: false
    email: cat-hicks@pluralsight.com
    affiliation:
      name: Pluralsight
      city: Draper, UT
      country: USA
  - name: Maggie Wu
    degrees:
      - M.S.
    roles: [Conceptualization, Data curation, Formal analysis, Investigation, Methodology]
    corresponding: false
    email: maggie-wu@pluralsight.com
    affiliation:
      name: Pluralsight
      city: Draper, UT
      country: USA
abstract: |
  Understanding factors that influence software development velocity is crucial for engineering teams and organizations, yet empirical evidence at scale remains limited. We analyze cycle time—a widely-used metric measuring time from ticket creation to completion—using a dataset of over 55,000 observations across 216 organizations. Through Bayesian hierarchical modeling that appropriately separates individual and organizational variation, we examine how coding time, task scoping, and collaboration patterns affect cycle time while characterizing its substantial variability across contexts. We find precise but modest associations between cycle time and factors including coding days per week, number of merged pull requests, and degree of collaboration. However, these effects are set against considerable unexplained variation both between and within individuals. Our findings suggest that while common workplace factors do influence cycle time in expected directions, any single observation provides limited signal about typical performance. This work demonstrates methods for analyzing complex operational metrics at scale while highlighting potential pitfalls in using such measurements to drive decision-making. We conclude that improving software delivery velocity likely requires systems-level thinking rather than individual-focused interventions.

plain-language-summary: |
  Other things
key-points:
  - A point
date: last-modified
bibliography: references.bib
number-sections: true
acm-metadata:
  # comment this out to make submission anonymous
  
  # if uncommented, this produces a teaser figure
  # 
  # anonymous: true
  # comment this out to build a draft version
  final: false
  # comment this out to specify detailed document options
  # acmart-options: sigconf, review  
  # acm preamble information
  copyright-year: 2024
  acm-year: 2024
  copyright: none
  # doi: XXXXXXX.XXXXXXX
  # conference-acronym: "Conference acronym 'XX"
  # conference-name: |
  #   Make sure to enter the correct
  #   conference title from your rights confirmation email
  # conference-date: June 03--05, 2018
  # conference-location: Woodstock, NY
  # isbn: 978-1-4503-XXXX-X/18/06
  # if present, replaces the list of authors in the page header.
  shortauthors: Flournoy et al.
  acks: |
    We would like to thank Kristen Foster-Marks, Bennet Cook, and Mike Hoye for their helpful advice on this research.
  ccs: |
        \begin{CCSXML}
        <ccs2012>
           <concept>
               <concept_id>10002944.10011123.10010912</concept_id>
               <concept_desc>General and reference~Empirical studies</concept_desc>
               <concept_significance>500</concept_significance>
               </concept>
         </ccs2012>
        \end{CCSXML}
        
        \ccsdesc[500]{General and reference~Empirical studies}
  keywords:
    - productivity
    - cycle time
    - collaboration
    - individual differences
    - within-person variation
  # teaser:
  #   image: sampleteaser
  #   caption: figure caption
  #   description: teaser description   
editor: 
  markdown: 
    wrap: 72
---

```{r setup, include=FALSE, echo=FALSE}
knitr::opts_chunk$set(message = FALSE, warning = FALSE, error = FALSE)
library(knitr)
library(flextable)
library(posterior)
library(parameters)
library(scales)
ct_model_obs_info <- readRDS('cycle_time_full_intx_lin_remonth_obs-info.rds')
```


# Introduction

Understanding the factors that affect the delivery of software at an organizational level offers businesses and engineering teams the knowledge to deliver value to users, maintain competitiveness, and improve developer experience. Given engineering teams' fundamental role in software delivery, the velocity of their work—that is, the time it takes for task completion—has emerged as a focal point of empirical investigation, particularly through measures like cycle time which captures the duration between ticket opening and ticket closing. Moreover, cycle-time is seen by engineers as the most useful metric of engineering productivity according to a prominent industry report (@careyWhy70Engineers2024). 

While cycle time is often treated as an indicator of productivity per se, the concept of productivity remains poorly specified in software engineering contexts, where outputs fundamentally differ from the more readily quantifiable measures used in traditional industrial production. Specific units of work are rarely identical across time for a person, within a team, or across teams. The interpretation of cycle time therefore presents particular challenges because variations could reflect differences in work patterns, task assignment, and organizational contexts rather than differences in some underlying rate of task completion. 

Nevertheless, the intuitive appeal of cycle time and its widespread use in practice make it a valuable focus for empirical investigation. The above-mentioned complexities necessitate sophisticated statistical methods to detect the unique impact of multiple factors, while carefully characterizing the variability practitioners can expect in day-to-day and month-to-month observations of cycle time. Through rigorous statistical modeling of longitudinal data across multiple organizations, we can both characterize its variability across real-world contexts, while demonstrating methodological approaches for analyzing such complex operational metrics. This analysis also allows us to detect systematic influences  from factors commonly believed to affect developer productivity: task scoping, focused work time, collaboration, and time of year.

Our investigation leverages a unique dataset comprising over 11,398 contributors at 216 organizations across diverse industries. This work makes two primary contributions. First, we demonstrate a model for statistically investigating software activity data at both a larger and more longitudinal scale than previous empirical research, allowing us to characterize how cycle time varies across software development contexts (i.e., individuals, organizations, and variable process factors), using hierarchical modeling that appropriately separates individual and organizational variation, combined with the careful disaggregation of within- and between-person effects. This approach allows us both greater precision and nuance in describing effects as well as the ability to highlight potential pitfalls in using such measurements to drive decision-making. Second, we incorporate these multiple measures of process factors simultaneously to isolate unique effects, including a novel measure of collaboration operationalized as degree centrality, taking initial steps toward reflecting the impact of the interactive nature of software development in large-scale analyses of activity data. 

Our research questions are:

RQ1. How do common workplace and software development process factors impact cycle time?

RQ2. How much between- and within-person variation is there in cycle time? 

The paper proceeds as follows: We first review the literature on software productivity measurement, examining cycle time's relationship to broader discussions of developer performance. We then present our methodology for analyzing cycle time variation using Bayesian hierarchical linear models. Our results examine both population-level effects and the substantial variation observed between individuals and organizations. We conclude by discussing implications for practice and future research directions.

# Background

## Productivity

The use of cycle time in the academic and industry literature is almost always as part of a discussion of productivity. This may be in part because cycle time and related metrics are one of the only so-called objective quantitative windows we have into the process of software production (but note that self-reports of perceived productivity are also potentially valid measures of this process). For this reason, it behooves us to discuss the literature on productivity, even as we position this analysis as specifically analyzing what we consider to be at best a very distal indicator of whatever it is people mean when they use the word "productivity."

Defining software team productivity and performance is a highly contentious exercise and many different definitions are given by both practitioners and researchers [@fraserNoSilverBullet2007; @hicksDeveloperThrivingFour2023; @hicksDeveloperThrivingFour2024; @murphy-hillWhatPredictsSoftware2021; @sadowskiSoftwareDevelopmentProductivity2019]. Perceptions of what counts as successful software work can meaningfully differ across individuals and roles, as when engineering managers tend to focus on long-term outcomes and individual developers focus on activity, for example [@hicksDeveloperThrivingFour2023; @storeyHowDevelopersManagers2022b]. Across workplaces, measures of time have been frequently used to assess productivity even while the shortcomings of these measures are also widely acknowledged [@griffinMetricsMeasuringProduct1993]. Alternative measures include self-ratings or peer evaluations [@murphy-hillWhatPredictsSoftware2021; @ramirezMeasuringKnowledgeWorker2004] and in software engineering, operationalizations of code work such as lines of code [@blackburnImprovingSpeedProductivity1996; @maxwellSoftwareDevelopmentProductivity1996]. These have obvious limitations in that the meaning of a particular unit for any of these metrics may be different depending on context [@sadowskiSoftwareDevelopmentProductivity2019]. Some researchers have sought solutions to this problem by asking individuals to rate their own level of, or satisfaction with, productivity [@hicksDeveloperThrivingFour2023; @storeyTheorySoftwareDeveloper2021]. While it is plausible that perceived productivity could be a good indicator of productivity, it is still not free of the context effects that are often levied as critiques of more “objective” metrics, and self-report, while perhaps overcoming some shortcomings of other methods, bring with them another set of measurement issues.

The difficulty of quantifying productivity arises even prior to the step of choosing one or several indicators. There is often a lack of clear distinction between production (quantity of output regardless of resources provided), productivity (quantity of output given the resources provided), and performance (flexibility, adaptability, dependability, sustainability, and quality of output over time) [@hicksDeveloperThrivingFour2023]. As any software developer will be aware, this conceptual complexity is likely the result of the various ways their work counts for professional development, for the success of the product, and for simply meeting deadlines. This piece of research does not aim to solve the issue of how we conceive of productivity but instead seeks to take a deep look at a single popular metric in order to showcase, first, the many factors (themselves, a subset of possible influences of productivity) that affect cycle time, and second, how observing this metric over time informs our view of the ways cycle time varies both within and between people. These views will be helpful both to illuminate specific properties of cycle time as a measure but also to demonstrate how one might approach an in-depth analysis of either “objective” or self-report metrics of productivity.

## Evaluating individual developer performance

Given the difficulty of appropriately defining productivity, the many choices in measuring it, and the potential cost of being measured, it is understandable that software developers have an ambivalent stance about the measurement of both work activity and productivity, that metrics adoption can be fraught with failure [@bouwersSoftwareMetricsPitfalls2013], and that social or socio-technical affordances can be strongly associated with self-reported productivity and necessary to obtain a full picture of software team experience beyond project and technical metrics [@hicksDeveloperThrivingFour2023; @murphy-hillWhatPredictsSoftware2021]. 

Developers whose teams use metrics generally see those metrics as helpful, and developers who report agreement with team-level metrics  tend to report higher perceived productivity [@hicksDeveloperThrivingFour2023; @hicksDeveloperThrivingFour2024]. However, paired with this are some indicators of uncertainty in whether and how metrics are being tracked or used [@hicksDeveloperThrivingFour2023], there is often backlash against any attempt to define or popularize such metrics [@bruneauxWhatMcKinseyHas2024; @chhunejaWhy50Developers2024; @coteOnlyPeopleWho2023; @finster5MinuteDevOps2023; @oroszMeasuringDeveloperProductivity2024; @oroszMeasuringDeveloperProductivity2024a; @rigginsWhatMcKinseyGot2023; @terhorst-northMcKinseyDeveloperProductivity2023; @terhorst-northWorstProgrammerKnow2023; @walkerConsUsingSPACE2023; @walkerEverythingWrongDORA2023], and there is concern about mismeasurement by managers inside of organizations [@hicksDeveloperThrivingFour2023], which is part of a broader discussion of surveillance and the discontent it can generate for workers [@ballWorkplaceSurveillanceOverview2010; @grisoldDigitalSurveillanceOrganizations2024; @mettlerConnectedWorkplaceCharacteristics2024]. More troublingly, recent scholarship on sociocognitive experiences in the workplace has proposed that severe experiences of employees being treated by an organization as a "mere tool" or a resource may create organizational dehumanization leading to many negative impacts on both well-being measures and on work outcomes [@caesensPerceivedOrganizationalSupport2017; @lagiosExplainingNegativeConsequences2022]. Moreover, there is evidence that metrics might be used differently depending on a person’s visible identities [e.g, @quadlinMarkWomansRecord2018]. 

Likewise, scholarship on employee perceptions of organizational and procedural justice have long documented that when employees perceive a context of organizational injustice, this can exacerbate or redefine experiences of organizational decision-making and performance evaluations [@brocknerInteractiveEffectsProcedural1994; @brocknerProceduralFairnessOutcome2007]. Given such larger organizational dynamics, it is likely that whether or not software metrics adoptions are successful is impacted not only by the choice of metric but also by larger contextual factors such as teams’ sociocognitive experiences and expectations around measurement, and the psychological affordances of their environments which may or may not allow them to address measurement concerns [@hicksPsychologicalAffordancesCan2024]. 

We lack holistic evidence about what practitioners in software development believe about developer performance and ability; some reports from researchers with samples at large technology companies have suggested both that definitions of productivity can vary widely between managers and developers, and that software developers perceive many potential trade-offs between types of technical goals, e.g. that quality and speed may be unattainable together [@storeyHowDevelopersManagers2022].

One "industry myth" which is referenced frequently in practitioner commentary is the idea of a “10x engineer”: this position alleges that some small outlier population of software developers consistently outperform others on key development tasks. Potentially springing from small case studies examining a handful of developers’ time spent solving small laboratory tasks [@sackmanExploratoryExperimentalStudies1968; discussed in @nicholsEndMythIndividual2019], this “law” was generalized from only twelve individuals, uses time spent on the tasks as an estimate of both effort and cost, has failed to replicate in larger examinations of developer performance on similar tasks, and failed to acknowledge large within-individual variation in task performance [@nicholsEndMythIndividual2019; @shrikanthAssessingPractitionerBeliefs2021].

Nevertheless, the idea that “10x engineers” exist and that some individuals in software engineering outperform others by a “rule” of 10x has been cited often and codified in industry commentary, [e.g., @brooksMythicalManmonthEssays1975]. Modern commentary on this idea frequently refers to it as a myth, but it is also discussed as a potentially real phenomenon^[For example, see this [ycombinator thread](https://news.ycombinator.com/item?id=22349531) ([internet archive](http://web.archive.org/web/20240917164935/https://stackoverflow.blog/2024/06/19/the-real-10x-developer-makes-their-whole-team-better/)), and this [StackOverflow blog post](https://stackoverflow.blog/2024/06/19/the-real-10x-developer-makes-their-whole-team-better)  ([internet archive](http://web.archive.org/web/20231209171051/https://news.ycombinator.com/item?id=22349531))]. In our previous work, we have noted that some software practitioners hold field-specific ability beliefs that software development success and productivity is attributable to a quality of “innate brilliance”, and that this belief among practitioners may create a higher likelihood of experiencing threat and anxiety in the face of rapid role change and technological shifts to developer workflows [@hicksNewDeveloperAI2024]. Broad reviews on drivers of software development outcomes, particularly frictions in the form of team “debt,” also suggest that social-psychological aspects of shared work processes may be a significant contributor to these outcomes separate from individual performance [@ahmadPandorasBoxSocial2024]. 

Despite some recognition that the 10x engineer is a problematic concept, the conflictual measurement of productivity and its use as a tool of surveillance and punishment contra the interests of individual contributors (but to the benefit, at least ostensibly, to a company’s profitability) continues with full-throated glee. A recent unpublished study claims that nearly 10% of engineers contribute almost no work; that is to say, it raises the boogeyman of the 0.1x engineer as the 10x engineer’s inverse^[in fact, the original paper perhaps even emphasizes the “low performers” more than the “exceptional” stating, “the ‘horrid’ portion of the performance frequency distribution is the long tail at the high end, the positively skewed part which shows that one poor performer can consume as much time or cost as 5, 10, or 20 good ones." [@sackmanExploratoryExperimentalStudies1968, p. 6]][@obstbaumOngoingResearchSoftware]. The measure of productivity used is something half-way between the objective and self-report: an unspecified machine-learning model trained on expert ratings of the quality and work necessary to complete 70 commits [@denisov-blanchPredictingExpertEvaluations2024]. Unlike prior work, this method lacks both the transparency of “objective” measures and the temperance of self-report measures.

In taking a deep dive into cycle time, this project does not address every implementation challenge and organizational affordance that may define whether organizations can ensure a healthy and sustainable practice around the measurement of work activity. However, we believe that a more robust understanding of the dynamics of cycle time may help practitioners avoid pitfalls in relying on velocity measures while evaluating software work. We hope to describe the complexity in a way that at least clarifies some of the complexities and aligns with the experience of software developers in practice.

## Cycle Time

Because lower cycle times typically indicate faster delivery times and more efficient software processes, cycle time has long been taken as a key indicator of team health, developer productivity, and team efficiency [@clincySoftwareDevelopmentProductivity2003; @agrawalSoftwareEffortQuality2007; @carmelCycleTimePackaged1995; @eversImprovingEngineeringProductivity1998; @guptaKeyDriversReduced1998; @nanImpactBudgetSchedule2009; @ruvimovaExploratoryStudyProductivity2022; @sadowskiRethinkingProductivitySoftware2019; @trendowiczChapter6Factors2009]. This suggests that understanding factors that influence cycle time may lead to insights into factors that are important to understand for understanding productivity in general. At minimum, examining cycle time can provide a description of the complexity of factors that impact this popular metric.

Cycle time examines one aspect of the speed of software delivery by measuring the time between task start and task delivery. It has consistently been described by industry research as one of the best and most trusted metrics for software productivity [@careyWhy70Engineers2024]. In this same report, similar metrics also showed preference, such as lead time, deploy frequency, and change failure rate. The common thread across these metrics is that the unit of work is defined by the team or company in relation to goals that serve the strategic interests of the project. While there is a good deal of nuance with respect to what goes into setting these units up, they are both discrete (and so “objective”-feeling) but also defined, often collaboratively, with respect to the outcomes that matter. This is in contrast to lines of code, for example, which may or may not be relevant to the goals of the engineering teams, and which is avoided by 70% of respondents in the same industry report. Cycle time may also be considered an important part of developer experience as a component of what leads to a fluid-feeling development and release cycle [@greilerActionableFrameworkUnderstanding2022a].

In calls to re-examine the complexity of developer productivity, researchers have argued that velocity measures are highly task-dependent, and do not represent the quality of work done or other, longer-term measures of the impact of work [@sadowskiSoftwareDevelopmentProductivity2019]. It is also possible for velocity measures to have multiple directional relationships with desired outcomes depending on software developers’ larger context. For instance, hypothetically speaking, an increase in velocity may associate with more success for a software team when this increase arises because the team engages in process improvements, creating processes that help them to move more quickly through development tasks, and thereby meet a critical deadline for a product launch, leading to business outcomes which then lead to more resources for the team. However in a different scenario, an increase in velocity may be associated with more failures for a software team, for instance, if velocity changes arise because the team begins to eschew quality control processes, eventually leading to costly critical business failures.

Nevertheless, time and output-based measures are frequently used as an outcome measure to make recommendations for software engineering practices, e.g. in evaluating the perceived impact of technical debt [@beskerTechnicalDebtCripples2018]. These measures have the added benefit of having a concrete referent that is simple to measure and inexpensive and convenient for teams trying to track productivity to collect.

The utility of cycle time has subsequently led to numerous industry experts recommending that engineering managers and leaders track their teams’ cycle times. However, leaders are provided less guidance on how to decrease cycle time. As such, leaders are left with the dilemma of being aware of their cycle times, but not understanding how to improve their cycle times in an evidence based way. Four major areas have been proposed to impact cycle time: (1) organizational structure and climate, (2) reward system, (3) software development process and (4) the use of software design and testing tools [@clincySoftwareDevelopmentProductivity2003]. We focus in this paper on factors from (3) software development processes, in part because measurements of these processes continue to gather significant interest from the technology industry and are plausibly mobile levers that can be manipulated at the level of an engineering team. They are also themselves relatively easy to measure and track at the team level if a software team within a larger organization were to decide they wanted to try to shift their processes and take measurements to make sure they were successful. We have argued elsewhere that organizational structure and climate are also relatively easy to measure and are powerful levers that should be more often targeted [@hicksCumulativeCultureTheory2024; @hicksDeveloperThrivingFour2023; @hicksDeveloperThrivingFour2024], though for the present work we focus on (3) also in part to keep the scope of this analysis manageable. 

To reduce cycle times at the level of software development process, the software industry currently recommends strategies centered around three major themes:

1. increased coding time
2. improved task scoping
3. improved collaboration

Industry convention rationalizes that increased coding times increases the amount of code committed and pull requests merged, thus moving tickets through their life cycle more quickly.  Improved scoping can similarly yield more efficient teams by breaking work down into more manageable chunks and reducing the amount of unplanned work from bugs and defects. Finally, industry reports posit that improved collaboration can reduce the time it takes for developers to review PRs and increase review rates ***(Flow; Gralha, 2022; Hodges, 2021; Waydev, 2021)***. However, this has not yet been examined empirically. That is, although industry convention dictates that these practices work to reduce cycle time, we have yet to generate real world evidence of their effectiveness. We focus on these three areas as possible factors that impact cycle time.


# Research design and methodology

All code can be found in the repository for this paper.

## Data Selection and Characteristics

To examine coding time, task scoping, and collaboration as predictors of cycle time over time, we centered our analysis on a large, real-world dataset of git and ticketing data of `r scales::comma(ct_model_obs_info$nobs)` observations across 12 months in 2022 from `r scales::comma(ct_model_obs_info$nusers)` users in `r scales::comma(ct_model_obs_info$norgs)` organizations of varying sizes and industries. We chose to use longitudinal data across 12 months, as it allowed us to examine fluctuations within a person’s workflow as well as different stable tendencies between people.This data was available via partnerships between a software metrics tool[^Formerly Pluralsight Flow, now Flow at Appfire. All authors were research scientists or data scientists employed at Pluralsight at the time that this data was collected and analyzed.] which was incorporated into the workflows of real working software teams, and the 216 organizations which opted in to this tool at any point during the 12 month analytic window. Notably, because this tool was adopted on an organizational level (following partnership agreements that include organizational opt-in and security audits), users themselves did not have to be active users of the software metrics tool itself in order to be included in this dataset, and git and ticketing data was available retrospectively for dates prior to the implementation of the tool in the organization. In other words, the git and ticketing data included in this analysis is not predicated on being an individual user of the software metrics tool, nor on the software metrics tool being used at the organization, as our dataset contains measures both before and after the software metric tool implementation at the organization, and implementation dates for organizations vary across the 12 month period.

Data were selected for analysis based on whether users actively contributed code during the time frame of the study. The 216 organizations included in this dataset had between 1–2,746 individuals in the dataset, with 90% of organizations being represented by more than 12 users, and in previous pilot surveys used to inform the design of this project, professional software developer users from these organizations described their main industries as ranging from Technology, Finance, Government, Insurance, Retail, and others, indicating a wide diversity of business use cases and engineering contexts were present in this sample.

## Computing study variables

Using the most complete data for each user, we used the mean to aggregate each variable at the *month* level and the *year* level (see below for more details specific to each variable). For each predictor, we then subtracted each person’s yearly average from their monthly data to produce a within-person deviation variable. This allowed us to disaggregate effects on the outcome due to yearly-level individual differences and within-person, month-to-month fluctuations [@curranDisaggregationPersonPerson2011]. This also allowed us to avoid averaging between-person and within-person differences into a single effect estimate. These effects can be different even in the sign of the effect, for example with a positive relationship between some time-invariant factor and the outcome of interest at the between-person level, and a negative relationship between the same factor measured across time and within-person variation over time. A common example that is highly relevant to most technical and knowledge workers is typing speed and errors.  Imagine someone trying to type as fast as they can; it is obvious that they will make  more errors the faster they type, evincing a negative association between speed and errors. However, if one simply measures the typing speed and error rate of many people, it should be clear that we would see that faster typists tend to make fewer errors, perhaps because of differences in typing experience. In this study, we want to be able to examine average differences between people’s cycle time aggregated at the year while also examining what is associated with cycle time deviations from that yearly trend month-to-month. All year-level individual differences variables were centered at their mean. Exceptions or addenda are mentioned below. See @tbl-variables for a brief list of variables.

### Cycle Time

This is the dependent variable in these analyses. After computing the cycle time for each closed ticket in seconds, we found the median cycle time for each month for each user using all tickets _opened_ in that month. For example, a ticket opened on the 9th of April, and closed on the 3rd of May would contribute 2,246,400 seconds to the calculation of the median for April.

### Unclosed Tickets

We were not able to observe the closing date for every ticket given our data collection cutoff of March 7, 2023, and so it is plausible that we underestimate the median cycle time in a way that depends in part on how many ticket closing times we do not observe. For this reason, we also computed the proportion of tickets opened in that month that had not been closed by the end of our data collection. For example, any ticket opened in April, 2022 but not closed by March 7, 2023 would count toward the proportion of unclosed tickets for that month. We transformed proportions from $[0,1]$ to $(-\infty, \infty)$ using the logistic quantile function (with minimum and maximum proportions forced to be .01 and .99 respectively). We use this in the regressions below as a control variable to adjust for this possibility.

### Time (Month, and within-quarter month)

We examined time in two ways: monthly and quarterly.  Months were represented as numeric values (i.e. January  = 1, February = 2) and centered at month 7, which allows us to interpret certain quantities like the intercept as the average cycle time in the middle of the year. Additionally, because quarters provide meaningful business cadences that may impact engineering work, for instance in that some organizations set quarterly goals at the beginning of each quarter and push to meet those goals at the end of each quarter and that key product deadlines may occur systematically toward the end of quarters, we accounted for any effects of quarterly cycles by using an indicator for the within-quarter month, centered at the middle of the quarter (e.g., -1 for the first month of the quarter, 0 for the middle month, and 1 for the last month of the quarter). This approach allowed us to capture a more stable and realistic trajectory of change over the course of the year.

### Team Size

To control for any influence of team size on cycle time, we compute each individual’s team size as the average size of all teams that individual belongs to as defined by individuals’ co-located activity data. Specifically, in the database used, an individual contributor is given membership in any team that they have worked in, and this is updated retroactively. For each individual, we find all teams that person is a member of, compute the size of that team, and then average across those team sizes if an individual is a member of multiple teams. As such, this number is a very rough indicator of the size of teams an individual tends to be a part of and is static across the year. This is a limitation of the database. This is then entered as an individually-varying continuous variable to control for some of the effect of team size on an individual’s cycle time.

### Coding days

Coding days was summarized as the average number of days per week that a developer made at least one commit. We divided the number of coding days in a month by the total number of days in that month and multiplied by seven to aid in interpretation.

### Total Merged PRs

One frequently proposed best practice in software work, intended to lead to outcomes such as improved task scoping, involves breaking work into smaller and more manageable chunks or pull requests that can be finished more quickly [@kudrjavetsSmallCodeChanges2022; @linesWhyEliteDev2023; @riosaWrittenUnwrittenGuide2019; @zhangPullRequestLatency2022]. As such, we used the number of total merged pull requests as one measure of task scoping. To calculate this, we counted the number of merged pull requests for each user for each month.

### Percent Defect Tickets

Another potentially beneficial signal in software activity data is the reduction of unplanned work on bugs and defect tickets, which is also proposed as a bottleneck on improving cycle time [@paudelMeasuringImpactTechnical2024; @paudelMeasuringImpactTechnical2024; @rosserSystemsPerspectiveTechnical2021; @toxboeCycleTime2023]. As such, we used the percentage of defect ticks as another measure of task scoping to represent unplanned work that may interfere with timely completion of planned work. This may also be a downstream signal of individuals’ opportunity for focused work time and code quality. To account for this possibility, for each user, for each month, we computed the percent of tickets that were defect tickets.

### Degree centrality

We measured collaboration by calculating degree centrality. To evaluate degree centrality, a metric derived from network analysis, we employed a framework where developers were treated as nodes within the network, and their interactions in the form of Pull Requests (PRs) were regarded as connections. In other words, any contribution of code to the same pull request constituted a collaboration edge between developers. We normalized each centrality value by dividing by the total number of developers constituting the organizational network. The calculations were executed using the Python package Networkx [@SciPyProceedings_11]. This particular variable serves as an effective proxy for quantifying the extent of collaboration among developers. We multiply the normalized degree centrality, which is between 0 and 1, by 100.

### Comments per PR

Another indicator of collaboration is the frequency of comments within PRs. We undertook a comprehensive examination of all PRs that were successfully merged in the year 2022 and, for each user, calculated the average number of comments per PR that they authored each month. This served as a measure to gauge the depth of collaboration exhibited during the development and review process.

|                 | Variable                          | Variable Description                                                 |
|:----------------|:----------------------------------|:---------------------------------------------------------------------|
| Productivity    | Cycle Time                        | Avg time from ticket start to end                                    |
|                 | Proportion unclosed tickets       | Control variable to account for tickets missing cycle time           |
| Time            | Month                             | Continuous time variable coded as month number                       |
|                 | Within-quarter month              | Index of the month number within each quarter year                   |
| Team Context    | Team size                         | Average size across all teams a individual is on                     |
| Coding Time     | Coding Days per Week              | Avg number of coding days a week                                     |
| Task Scoping    | Total Merged PRs                  | Total number of merged PRs per developer                             |
|                 | Percent Defect Tickets            | Percent of all tickets that are defect tickets                       |
| Collaboration   | Degree Centrality                 | Score based on the number of reviewers a developer has worked with   |
|                 | Comments per PR                   | Number of comments per pr a developer is the author on               |

: Variable descriptions {#tbl-variables}

## Analytic Approach

The models described below are fit using `brms` [v2.21.6, @burknerAdvancedBayesianMultilevel2018; @burknerBrmsPackageBayesian2017], interface the the Stan probabilistic programming language for Bayesian sampling [v2.35.0, @gelman], with the `cmdstanr` backend [v0.8.0, @gabryCmdstanrInterfaceCmdStan2024], in R [v4.3.2, @rcoreteamLanguageEnvironmentStatistical2023].

We developed a model of monthly average ticket cycle time conditional on the following predictors: within-quarter month number, team size, proportion of unclosed tickets, month number, yearly means and month-level deviations for coding days per week, total merged PRs, defect ticket percentage, degree centrality, and comments per PR. Specifically, we modeled cycle time as distributed Weibull with two parameters, $\lambda$ (scale), and _k_ (shape). The Weibull distribution is often used to model time-to-event data [@harrellRegressionModelingStrategies2015; @rummelAverageWeibullAnalysis2017], where _k_ determines the change over time in the probability of an event occurring (often called the "hazard rate"), and where $\lambda$ determines the time-to-event for some proportion of the cases (or in other words, how spread out the distribution is). For simplicity, we assume that the shape (hazard rate, _k_) is not influenced by the factors considered, and focus on how these factors affect the scale (time-to-event, $\lambda$)  of ticket closures, though we did allow the shape, _k_, to vary across organizations. In short, the Weibull distribution provides flexibility for accurately describing cycle time data that tend to have a bulk of observations at the low end, with a very long tail of more extreme observations.

The model for $\lambda$ is

\begin{equation}
\begin{aligned}
\log(\lambda) &= X\beta + \eta_{\text{org}} + \eta_{\text{org:user}} \\
\eta_{\text{org}} &\sim \mathcal{N}\left(\begin{bmatrix} \mu_1 \\ \mu_2 \end{bmatrix}, \begin{bmatrix} \sigma_{11} & \sigma_{12} \\ \sigma_{21} & \sigma_{22} \end{bmatrix}\right) \\
\eta_{\text{org:user}} &\sim \mathcal{N}\left(\begin{bmatrix} \mu_3 \\ \mu_4 \end{bmatrix}, \begin{bmatrix} \sigma_{33} & \sigma_{34} \\ \sigma_{43} & \sigma_{44} \end{bmatrix}\right) 
\end{aligned}
\end{equation}


where $X$ is the matrix of predictors, $\beta$ is the vector of coefficients, $\eta_{\text{org}}$ is random intercepts with mean $\mu_1$ and linear slopes of month with mean $\mu_2$ for each organization, and $\eta_{\text{org:user}}$ is random intercepts with mean $\mu_3$ and linear slopes of month with mean $\mu_4$ for each user nested within organization. The specific predictors in $X$ are within-quarter month number, team size, proportion of unclosed tickets, month number, yearly means and month-level deviations for coding days per week, total merged PRs, defect ticket percentage, degree centrality, and comments per PR. We also include interactions between month number and the following: team size, proportion of unclosed tickets, and each of the yearly mean predictors. This allows us to account as completely as possible for our control variables (team size and proportion of unclosed tickets), and allow the effect of month on cycle time to vary by the individual differences variables (e.g., to account for the possibility that someone who has higher coding days per week shows a less steep decrease in cycle time across the year than someone with lower coding days per week).

The model for _k_ is 

\begin{equation}
\begin{aligned}
\log(k) &= \zeta_{\text{org}} \\
\zeta_{\text{org}} &\sim \mathcal{N}(\mu_5, \sigma_{5}) 
\end{aligned}
\end{equation}


where $\zeta_{\text{org}}$ is a random intercept with mean $\mu_5$ each organization.

Conceptually, this model allows a unique distribution of cycle times (as determined by the random intercepts for both $\lambda$ and _k_) for each organization. It also allows the scale of the distribution of cycle times to vary for each user due to the random intercept for $\lambda$. The effect of time (month number) on the scale of the distribution of cycle times is also allowed to vary across organizations as well as users due to the random slopes (with means $\mu_2$ and $\mu_4$). This strategy allows two advantages: first, we account for multiple sources of variance that allows our estimates of the effects of interest to be more precise; and second, we are able to provide estimates of this variation across organizations and users. This variation itself is of interest given the various myths mentioned in the introduction about developer performance.

We model the effect of proportion of unclosed tickets and month number as smooth functions of the covariate using thin-plate splines for increased flexibility [@woodGeneralizedAdditiveModels2017]. Briefly, thin plate splines (functions made up of smoothly connected segments) allow for flexible, non-linear relationships between predictors and the response variable. These splines are penalized to prevent overfitting, balancing model flexibility and complexity. The interactions between month number and our control variables are parameterized as additional smooth functions of month number multiplied by these variables. While our focal model parameterizes the interactions between year-level means and month number as linear coefficients on multiplicative combinations between the two variables, we also examined a model that uses additional smooth functions of month number multiplied by these variables to allow for additional complexity. We provide the model output for this sensitivity analysis in a supplement.

We set weakly-informative priors centered at zero for all parameters, except for the intercept for $\lambda$ and _k_ which were centered on their approximate values in the data (consistent with the default behavior of `brms`). We performed prior-predictive checks to ensure our prior specification generated data that covered and exceeded the space of our observations. Given the complexity of the model, we also specified initialization of parameters at small plausible values (e.g., zero for coefficients, .1 for standard deviations of random effects). Full prior and initialization specifications are available in the analysis code.

We sampled from 4 chains with 2,000 total iterations each, discarding the first 1,000 iterations as warmup. Inferences were made on 4,000 post-warmup draws from the posterior probability distribution from the 4 chains.

## Inferences

We take a Bayesian approach to making claims about the sign of effects (i.e., whether an association between two variables is positive or negative), and to describing its magnitude. Instead of the common but fraught frequentist approach of describing whether an effect size is unlikely given the assumption of an unrealistic point-null hypothesis, we try to give the reader a sense of the actual probability that the sign of an effect is in a particular direction, and what the impact of the factor is on cycle times in terms that are easy to interpret (@GelmanPowerCalculationsAssessing2014).

In more precise statistical terms, unless otherwise stated we describe the posterior of parameters and predictions using the median of the distribution, and characterize its variation using the highest posterior density interval (HDI) which is defined as the interval that contains a specified percentage (usually 95%) of the most probable values of the parameter [@kruschkeRejectingAcceptingParameter]. We make general descriptive inferences based on the probability that a parameter has the sign of the posterior density’s median value. For example, if 80% of the posterior density of the slope of the effect of month on cycle time is of the same sign as the density’s median, and that median is negative, we would say something like, “given the model and the data, there is an 80% chance that there is a decrease in cycle times across the year.”

## R packages

R packages used in this analysis include brms [v2.22.7, @burknerAdvancedBayesianMultilevel2018; @burknerBayesianItemResponse2021; @burknerBrmsPackageBayesian2017], cmdstanr [v0.8.0, @gabryCmdstanrInterfaceCmdStan2024], data.table [v1.15.4, @barrettDatatableExtensionDataframe2024], ggplot2 [v3.5.0, @wickhamGgplot2ElegantGraphics2016], flextable [v0.9.5, @gohelFlextableFunctionsTabular2024], gt [v0.11.1.9000, @iannoneGtEasilyCreate2024], htmltools [v0.5.8.1, @chengHtmltoolsToolsHTML2024], knitr [v1.46, @xieDynamicDocumentsKnitr2015; @xieKnitrComprehensiveTool2014; @xieKnitrGeneralpurposePackage2024], marginaleffects [v0.19.0, @arel-bundockMarginaleffectsPredictionsComparisons2024], mgcv [v1.9.0, @woodFastStableRestricted2011; @woodGeneralizedAdditiveModels2017; @woodSmoothingParameterModel2016; @woodStableEfficientMultiple2004; @woodThinplateRegressionSplines2003], parameters [v0.21.6, @ludeckeExtractingComputingExploring2020], patchwork [v1.2.0, @pedersenPatchworkComposerPlots2024], posterior [v1.5.0, @burknerPosteriorToolsWorking2023; @vehtariRanknormalizationFoldingLocalization2021], rlang [v1.1.3, @henryRlangFunctionsBase2024], scales [v1.3.0, @wickhamScalesScaleFunctions2023], scico [v1.5.0.9000, @pedersenScicoColourPalettes2025], showtext [v0.9.7, @qiuShowtextUsingFonts2024], StanHeaders [v2.36.0.9000, @standevelopmentteamStanHeadersHeadersInterface2020], tidybayes [v3.0.6, @kayTidybayesTidyData2023].

# Results

Results from the linear model reported below were highly similar to those in the more flexible non-linear model sensitivity analysis described above. Also note that parameters in the table are from a linear model for the distribution of log($\lambda$) and log(*k*), while model expectations are on the response scale and can therefore display curvature even while the model is linear.

```{r prep model summary table fe}
fe_par_nicenames <- c(b_Intercept = 'Intercept log(λ)',
                      b_shape_Intercept = 'Intercept log(k)',
                      b_within_quarter_month_num_c = 'Within-quarter month',
                      b_team_size_c = 'Team size',
                      b_wi_avg_coding_days_per_week = 'Avg. coding days/week (within-person)',
                      b_yr_avg_avg_coding_days_per_week_c = 'Avg. coding days/week',
                      b_wi_total_merged_prs = 'Total merged PRs (within-person)',
                      b_yr_avg_total_merged_prs_c = 'Total merged PRs',
                      b_wi_defect_tickets_pct_indiv = 'Defect tickets % (within-person)',
                      b_yr_avg_defect_tickets_pct_indiv_c = 'Defect tickets %',
                      b_wi_degree_centrality_monthly_100 = 'Degree centrality (within-person)',
                      b_yr_avg_degree_centrality_monthly_100_c = 'Degree centrality',
                      b_wi_comments_per_pr = 'Comments per PR (within-person)',
                      b_yr_avg_comments_per_pr_c = 'Comments per PR',
                      `b_yr_avg_avg_coding_days_per_week_c:month_num_c` = 'Avg. coding days/week × Month',
                      `b_yr_avg_total_merged_prs_c:month_num_c` = 'Total merged PRs × Month',
                      `b_yr_avg_defect_tickets_pct_indiv_c:month_num_c` = 'Defect tickets % × Month',
                      `b_yr_avg_degree_centrality_monthly_100_c:month_num_c` = 'Degree centrality × Month',
                      `b_yr_avg_comments_per_pr_c:month_num_c` = 'Comments per PR × Month')

ct_model_draws_fe <- readRDS('cycle_time_full_intx_lin_remonth_draws_id-fe.rds')
ct_model_draws_bs <- readRDS('cycle_time_full_intx_lin_remonth_draws_id-bs.rds')
ct_model_draws_re <- readRDS('cycle_time_full_intx_lin_remonth_draws_id-re.rds')
ct_model_draws_sds <- readRDS('cycle_time_full_intx_lin_remonth_draws_id-sds.rds')
ct_model_pars_fe <- parameters::model_parameters(ct_model_draws_fe, 
                                                 digits = 4,
                                                 centrality = 'median', 
                                                 ci = .95, 
                                                 ci_method = 'hdi', 
                                                 test = 'pd', exponentiate = FALSE)
ct_model_pars_bs <- parameters::model_parameters(ct_model_draws_bs, 
                                                 digits = 4,
                                                 centrality = 'median', 
                                                 ci = .95, 
                                                 ci_method = 'hdi', 
                                                 test = 'pd', exponentiate = FALSE)
ct_model_pars_re <- parameters::model_parameters(ct_model_draws_re, 
                                                 digits = 4,
                                                 centrality = 'median', 
                                                 ci = .95, 
                                                 ci_method = 'hdi', 
                                                 test = 'pd', exponentiate = FALSE)
ct_model_pars_sds <- parameters::model_parameters(ct_model_draws_sds, 
                                                 digits = 4,
                                                 centrality = 'median', 
                                                 ci = .95, 
                                                 ci_method = 'hdi', 
                                                 test = 'pd', exponentiate = FALSE)
ct_model_pars_fe_for_text <- ct_model_pars_fe
ct_model_pars_fe$Parameter <- fe_par_nicenames[ct_model_pars_fe$Parameter]
ct_model_pars_fe$pd <- sprintf('% 3.0f%%', ct_model_pars_fe$pd*100)

names(ct_model_pars_fe) <- c('Parameter', 'Posterior Median', 'Lower 95% HDI', 'Upper 95% HDI', 'Sign Probability')
```

We find that all measured factors, both individual-difference and within-person deviations, have a non-zero association with cycle time, with 100% of the posterior distribution for these parameters sharing the same sign (see @tbl-results-fe for point estimates and uncertainty intervals). Within-quarter month showed a very small (relative to other effects shown below) negative association with cycle time, indicating that time to ticket completion is shorter at the end of quarters (@fig-quarter). Team size showed had close to no effect on cycle time (@tbl-results-fe). Cycle times tended to decrease slightly over the year (@fig-month). The proportion of unclosed tickets, an important control variable, on average had close to no effect on our measure of average monthly cycle time but interacted with month (see supplement).

![Effect of within-quarter month. Background hexagons represent density of data, with darker colors indicating greater density. Lines are median posterior expectations, with 95% credible interval ribbons.](plots/Plot Full growth model with linear predictors interacting-2.png){#fig-quarter}

![Effect of month. Background hexagons represent density of data, with darker colors indicating greater density. Lines are median posterior expectations, with 95% credible interval ribbons.](plots/Plot Full growth model with linear predictors interacting-1.png){#fig-month}

```{r model summary table fe, eval=TRUE}
#| tbl-cap: Fixed effects {#tbl-results-fe}

flextable(ct_model_pars_fe) |>
    colformat_double(digits = 4) |>
    set_table_properties(layout = 'autofit') |>
    theme_booktabs(bold_header = TRUE) |>
    align(j = 5, align = 'right', part = 'all') |>
    add_footer_lines('Posterior Median: The median of the posterior probability density for the parameter is used as the parameter point estimate. 95% HDI: The 95% highest density interval is the region of the posterior distribution with the 95% most probable values for the parameter. Sign Probability: The proportion of the posterior distribution that has the same sign (direction) as the point estimate.')

```

Specifically, when individuals increased average coding days per week month-to-month they also tended to have lower cycle times, and individuals with more average coding days per week across the year tended to have lower cycle times (@fig-codingdays). The association between coding days and cycle time also tended to increase in strength across months, with `r sprintf('%.0f%%', 100*ct_model_pars_fe_for_text$pd[ct_model_pars_fe_for_text$Parameter == 'b_yr_avg_avg_coding_days_per_week_c:month_num_c'])` of the posterior in this direction.

![Effect of average coding days per week on cycle time. Background hexagons represent density of data, with darker colors indicating greater density. Lines are median posterior expectations, with 95% credible interval ribbons.](plots/Plot Full growth model with linear predictors interacting-5.png){#fig-codingdays}

More merged PRs was associated with lower cycle time for both individual average differences and within-person differences. This effect also may get stronger across the year with `r sprintf('%.0f%%', 100*ct_model_pars_fe_for_text$pd[ct_model_pars_fe_for_text$Parameter == 'b_yr_avg_total_merged_prs_c:month_num_c'])` of the posterior in this direction (@fig-mergedprs). 

![Effect of merged PRs on cycle time. Background hexagons represent density of data, with darker colors indicating greater density. Lines are median posterior expectations, with 95% credible interval ribbons.](plots/Plot Full growth model with linear predictors interacting-6.png){#fig-mergedprs}

The percent of defect tickets showed a negative association with cycle time for within-person deviations and a positive association for individual differences. In other words, individuals who tended to have more defect tickets as a proportion of their work across the course of the year also tended to have longer cycle times. However, for any given person, and increase in the proportion of defect tickets in a month was associated with lower cycle times (@fig-defecttickets). The interaction with month number for this effect was centered close to zero, with only `r sprintf('%.0f%%', 100*ct_model_pars_fe_for_text$pd[ct_model_pars_fe_for_text$Parameter == 'b_yr_avg_defect_tickets_pct_indiv_c:month_num_c'])` of the posterior in the negative direction with a fairly narrow distribution around zero (95% HDI = `r sprintf('[%.4f, %.4f]', ct_model_pars_fe_for_text[ct_model_pars_fe_for_text$Parameter == 'b_yr_avg_defect_tickets_pct_indiv_c:month_num_c', 'CI_low'], ct_model_pars_fe_for_text[ct_model_pars_fe_for_text$Parameter == 'b_yr_avg_defect_tickets_pct_indiv_c:month_num_c', 'CI_high'])`).

![Effect of percent defect tickets on cycle time. Background hexagons represent density of data, with darker colors indicating greater density. Lines are median posterior expectations, with 95% credible interval ribbons.](plots/Plot Full growth model with linear predictors interacting-7.png){#fig-defecttickets}

Degree centrality, both on average across the year individual differences and within-person deviations, showed a negative association with cycle time (@fig-degree). In other words, individuals who on average contribute code to PRs that have a lot of other contributors tend to have lower cycle times for tickets they own. Similarly, when individuals' collaboration on PRs increases in a given month, their cycle time tends to go down. This effect does not unambiguously strengthen or weaken across the year with `r sprintf('%.0f%%', 100*ct_model_pars_fe_for_text$pd[ct_model_pars_fe_for_text$Parameter == 'b_yr_avg_degree_centrality_monthly_100_c:month_num_c'])` of the posterior for the interaction effect having negative sign with a fairly narrow distribution around zero (95% HDI = `r sprintf('[%.4f, %.4f]', ct_model_pars_fe_for_text[ct_model_pars_fe_for_text$Parameter == 'b_yr_avg_degree_centrality_monthly_100_c:month_num_c', 'CI_low'], ct_model_pars_fe_for_text[ct_model_pars_fe_for_text$Parameter == 'b_yr_avg_degree_centrality_monthly_100_c:month_num_c', 'CI_high'])`).

![Effect of degree centrality on cycle time. Background hexagons represent density of data, with darker colors indicating greater density. Lines are median posterior expectations, with 95% credible interval ribbons.](plots/Plot Full growth model with linear predictors interacting-8.png){#fig-degree}

Finally, the number of comments per PR showed a positive association with cycle time. Individuals who tended to garner more comments on their PRs also tended to have higher cycle times, and within a given month, a higher number of comments per PR relative to a person's average was also associated with higher cycle times (@fig-comments). This effect also does not unambiguously strengthen or weaken across the year with `r sprintf('%.0f%%', 100*ct_model_pars_fe_for_text$pd[ct_model_pars_fe_for_text$Parameter == 'b_yr_avg_comments_per_pr_c:month_num_c'])` of the posterior for the interaction effect having negative sign with a fairly narrow distribution around zero (95% HDI = `r sprintf('[%.4f, %.4f]', ct_model_pars_fe_for_text[ct_model_pars_fe_for_text$Parameter == 'b_yr_avg_comments_per_pr_c:month_num_c', 'CI_low'], ct_model_pars_fe_for_text[ct_model_pars_fe_for_text$Parameter == 'b_yr_avg_comments_per_pr_c:month_num_c', 'CI_high'])`). 

![Effect of comments per PR on cycle time. Background hexagons represent density of data, with darker colors indicating greater density. Lines are median posterior expectations, with 95% credible interval ribbons.](plots/Plot Full growth model with linear predictors interacting-9.png){#fig-comments}

```{r model summary table re, eval=TRUE}
#| tbl-cap: Random effects {#tbl-results-re}

flextable(ct_model_pars_re) |>
    colformat_double(digits = 4) |>
    set_table_properties(layout = 'autofit') |>
    theme_booktabs(bold_header = TRUE) |>
    align(j = 5, align = 'right', part = 'all') |>
    add_footer_lines('Posterior Median: The median of the posterior probability density for the parameter is used as the parameter point estimate. 95% HDI: The 95% highest density interval is the region of the posterior distribution with the 95% most probable values for the parameter. Sign Probability: The proportion of the posterior distribution that has the same sign (direction) as the point estimate.')

```

```{r model summary table bs, eval=TRUE}
#| tbl-cap: Basis spline effects {#tbl-results-bs}

flextable(ct_model_pars_bs) |>
    colformat_double(digits = 4) |>
    set_table_properties(layout = 'autofit') |>
    theme_booktabs(bold_header = TRUE) |>
    align(j = 5, align = 'right', part = 'all') |>
    add_footer_lines('Posterior Median: The median of the posterior probability density for the parameter is used as the parameter point estimate. 95% HDI: The 95% highest density interval is the region of the posterior distribution with the 95% most probable values for the parameter. Sign Probability: The proportion of the posterior distribution that has the same sign (direction) as the point estimate.')

```

```{r model summary table sds, eval=TRUE}
#| tbl-cap: Spline wiggliness effects {#tbl-results-sds}

flextable(ct_model_pars_sds) |>
    colformat_double(digits = 4) |>
    set_table_properties(layout = 'autofit') |>
    theme_booktabs(bold_header = TRUE) |>
    align(j = 5, align = 'right', part = 'all') |>
    add_footer_lines('Posterior Median: The median of the posterior probability density for the parameter is used as the parameter point estimate. 95% HDI: The 95% highest density interval is the region of the posterior distribution with the 95% most probable values for the parameter. Sign Probability: The proportion of the posterior distribution that has the same sign (direction) as the point estimate.')

```

# Limitations

Factors outside our control that organizations can control to increase the reliability and validity of their cycle time data include establishing a systematic approach to ticket use. Even within an organization, individual teams may have different cultures regarding when it is appropriate to open and close a ticket. If one is using cycle time as a metric to gauge team velocity, it may be ideal to open and close tickets based on consistent criteria across teams. For example, opening a ticket after a piece of work is completed, and then closing it soon after, does not provide a good measure of how long that work took to complete. Distinguishing ticket types may also help. Here we were able to separate tickets into defect and non-defect tickets, but there are certainly more granular ways of categorizing tickets. These categories, in an analysis like the above, can help ensure the analytic model is comparing like with like. 

# Discussion

Better characterizing how teams move through their ticketing processes, and what factors impact ticket velocity, can suggest initial starting places for interventions to improve those times. However, it is just as important to note that certain software engineering outcomes may require decreasing the closure of tickets. These goal-directed decisions about setting metrics targets cannot be answered by the present analysis, but require greater organizational context, and the addition of more goal-aligned outcome measures. For example, imagine that the software developers within an organization rapidly triage and close defect tickets, showing a very low cycle time. However, the quality of those closures is poor, as measured by the longevity of the “fix,” and further, interrelated defects. For an organization to more holistically understand the state of “how we handle defects” and identify potential changes, it would be necessary to not simply monitor the velocity of defect tickets but to establish other metrics around the depth and coverage of a solution and the “lifecycle” of defects. Qualitative work (e.g., in-depth interviews or post-mortems with engineers who handle these scenarios) may also reveal unmeasured and unnoticed organizational features – for example, a cultural belief that working on defect tickets is less important than feature tickets, and associated pressure that developers experience from management to close them quickly.

This type of example underlines the classic measurement argument that no single measure should become an overarching target, devoid of context. In our previous work, we have echoed other organizational researchers in proposing that the success or failure of interventions seeking to make a measurable change in a given organization can be determined in part by the psychological and behavioral expectations, contexts and experiences of people (Brocker & Sherman, 2019; Hicks, 2024). In a mixed-methods observational study with software developers, we also noted that individuals can voice high agreement with the perceived utility of tracking software processes, while also reporting high rates of perceived “pitfalls” in the usage of those metrics (Hicks, Lee & Ramsey, 2023). While the present analysis concerns how to characterize cycle time and connections between other metrics operationalized from software development workflows, this investigation does not establish nor measure specific organizational goals and their attainment. A future line of research might incorporate measures of individual, team, and organizational goals with system measures such as cycle time and provide greater evidence about how changes in cycle time impact organizational goal achievement.

However, better understanding both what cycle time looks like within organizations, and how to explore cycle time, is still highly relevant to how we think about measuring software engineering work without using this measure as a gauge for goals. For example, our analysis demonstrates that there is considerable variation in the movement of tickets. Rather than establishing a single “ideal cycle time” to aim for, we establish that cycle times are an interesting outcome which associates with factors such as [x, y, z]. Coding days may be a particularly interesting intervention point for future studies to explore [........] 

In this study, we were limited in the amount of organizational context that we could observe from ticketing and git data. For example, at a certain time of year an organization might implement a new planning process, a new promotion plan, or other organizational changes. Matching an analytical approach such as the current one, with a specific organization’s knowledge of their own planning cycles, investments, and other contextual details, could provide valuable insights about the efficacy and impact of organizational change on software development processes. In order to perform such an analysis, we have found that it is important to take into account [x, y, z]. 


# Related Work

# Conclusions

# References {.unnumbered}

