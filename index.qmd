---
title: Understanding Technology Team Velocity at Scale
author:
  - name: John C. Flournoy
#    orcid: 0000-0002-0760-5497
    #   - Investigation
    #   - Project administration
    #   - Software
    #   - Visualization
    corresponding: true
    email: jcflournoyphd@pm.me
    # roles:
    affiliation:
      name: Pluralsight
      city: Draper, UT
      country: USA
  - name: Carol S. Lee
#    orcid: 0000-0002-0760-5497
    #   - Investigation
    #   - Project administration
    #   - Software
    #   - Visualization
    corresponding: false
    # roles:
    affiliation:
      name: Pluralsight
      city: Draper, UT
      country: USA
  - name: Catherine M. Hicks
#    orcid: 0000-0002-0760-5497
    #   - Investigation
    #   - Project administration
    #   - Software
    #   - Visualization
    corresponding: false
    email: cat-hicks@pluralsight.com
    # roles:
    affiliation:
      name: Pluralsight
      city: Draper, UT
      country: USA
# keywords:
abstract: |
  Things
plain-language-summary: |
  Other things
key-points:
  - A point
date: last-modified
bibliography: references.bib
number-sections: true
acm-metadata:
  # comment this out to make submission anonymous
  
  # if uncommented, this produces a teaser figure
  # 
  # anonymous: true
  # comment this out to build a draft version
  final: false
  # comment this out to specify detailed document options
  # acmart-options: sigconf, review  
  # acm preamble information
  copyright-year: 2024
  acm-year: 2024
  copyright: none
  # doi: XXXXXXX.XXXXXXX
  # conference-acronym: "Conference acronym 'XX"
  # conference-name: |
  #   Make sure to enter the correct
  #   conference title from your rights confirmation email
  # conference-date: June 03--05, 2018
  # conference-location: Woodstock, NY
  # isbn: 978-1-4503-XXXX-X/18/06
  # if present, replaces the list of authors in the page header.
  shortauthors: Flournoy et al.
  acks: Maggie Wu
  # Please copy and paste the code instead of the example below.
  # The code below is generated by the tool at http://dl.acm.org/ccs.cfm.
  ccs: |
        \begin{CCSXML}
        <ccs2012>
           <concept>
               <concept_id>10002944.10011123.10010912</concept_id>
               <concept_desc>General and reference~Empirical studies</concept_desc>
               <concept_significance>500</concept_significance>
               </concept>
         </ccs2012>
        \end{CCSXML}
        
        \ccsdesc[500]{General and reference~Empirical studies}
  keywords:
    - productivity
    - cycle time
    - collaboration
    - individual differences
    - within-person variation
  # teaser:
  #   image: sampleteaser
  #   caption: figure caption
  #   description: teaser description   
editor: 
  markdown: 
    wrap: 72
---

```{r setup}
# Function to check if we're running in a GitHub Action
is_github_action <- function() {
  Sys.getenv("GITHUB_ACTIONS") == "true"
}

# Set custom library path if running locally
if (!is_github_action()) {
  .libPaths('/home/rstudio/R/x86_64-pc-linux-gnu-library/4.3/')
}

library(ggplot2)
library(marginaleffects)
library(rstan)
library(brms)
library(tidybayes)
library(rlang)
library(sjPlot)
library(ggnewscale)
library(kableExtra)

brms_to_draws <- function(x, variables){
  x <- x$fit@sim$samples
  x_subsamples <- lapply(x, \(x) x[, variables])
  x_draws <- posterior::as_draws(x_subsamples)
  return(x_draws)
}

```

```{r prepare results}
ct_model <- readRDS('cycle_time_full_intx_nlq.rds')
ct_model_obs_info <- list(nobs = nobs(ct_model), 
                          norgs = ngrps(ct_model)$org_id_fac,
                          nusers = ngrps(ct_model)$`org_id_fac:user_id_fac`)
```

# Introduction

Understanding the factors that affect the productivity of software developers offers organizations the knowledge to deliver value to users, maintain competitiveness, and improve developer experience. Indeed, whether software is the an organizations primary product, or whether internal software engineering enables other end goals (such as in the pharmaceutical industry), the productivity of developers is increasingly the foundation on which all other activities are built. 

In software research, the time it takes to move through a work task is typically characterized as a measure of _velocity_. In calls to re-examine the complexity of developer productivity, researchers have argued that velocity measures are highly task-dependent, and do not represent the quality of work done or other, longer-term measures of the impact of work [@sadowskiSoftwareDevelopmentProductivity2019]. Nevertheless, time measures are very frequently used as an outcome measure to make recommendations for software engineering practices, e.g. in evaluating the perceived impact of technical debt [@beskerTechnicalDebtCripples2018]. These measures are also very inexpensive and convenient to collect for teams trying to use metrics to track productivity.

This report seeks to describe both the impact of several influential factors, as well as describe what cycle time looks like across a wide range of conditions. That is, understanding the variation in cycle time is as important as what influences it on average. We report on cycle time data for a full year, across hundreds of organizations, which allows us to examine fluctuations within a person's workflow as well as different stable tendencies between people.

RQ1. How do common software development process and workplace factors impact productivity? 

RQ2. How much between- and within-person variation is there in productivity?

# Background

## Defining productivity

There is disagreement about what constitutes productivity. Perceptions of what counts as productivity differ across individuals and roles, with managers tending to focus on long-term outcomes and ICs focusing on activity, for example [@storeyHowDevelopersManagers2022]. The scientific literature on this topic has used code-based metrics such as cycle time, commits, or lines of code[@murphy-hillWhatPredictsSoftware2021a]. These have obvious limitations in that the meaning of a particular unit for any of these metrics may be different depending on context [@sadowskiSoftwareDevelopmentProductivity2019]. Some researches have sought solutions to this problem by asking individuals to rate their own level of, or satisfaction with, productivity [@storeyTheorySoftwareDeveloper2021]. While it is plausible that perceived productivity could indicate productivity _per se_, such a measure is not free from context effects that would impact more "objective" metrics, and presents its own set of measurement challenges. 

Another difficulty stems from an often confused distinction between production (quantity of output regardless of resources provided), productivity (quantity of output given the resources provided), and performance (flexibility, adaptability, dependability, sustainability, and quality of output over time) [@leeOurOrganizationActually2023]. While the present analysis necessarily identifies production as the outcome, the influence of differernt factors on production highlights the need for these distinctions. For example, we may see that production velocity differs depending on the proportion of work that consists of defect tickets, which highlights the need to consider this contextual factor when considering individual performance.

# Research design and methodology

All code can be found in the repository for this paper.

## Data Selection and Characteristics

To examine coding time, task scoping, and collaboration as predictors of cycle time over time, we pulled data from the software metrics tool, Flow. Flow is a software platform that leverages git and ticketing data to track individual, team, and organization-level metrics that can be used as indicators of production, productivity, and performance over time. From Flow, we selected data for analysis if users actively contributed code. The data thus consisted of `r scales::comma(ct_model_obs_info$nobs)` observations across 12 months from `r scales::comma(ct_model_obs_info$nusers)` users in `r scales::comma(ct_model_obs_info$norgs)` organizations of varying sizes and industries.

- [ ] Add missing data visualization?
- [ ] Add distribution of users per org

## Computing study variables

All study variables were derived from snapshots of the Flow production database that was moved to a Snowflake database. Users were included if they were labeled as a "contributor" and had opened a ticket in the year 2022. 

Using the most complete data for each user, we use the mean to aggregate each variable at the month level and the year level (see below for more details specific to each variable). For each predictor, we then subtracted each person's yearly average from their monthly data to produce a within-person deviation variable. This allows us to disaggregate effects on the outcome due to yearly-level individual differences and within-person, month-to-month fluctuations [@curranDisaggregationPersonPerson2011]. This important step allows us to avoid averaging between-person and within-person differences into a single effect estimate. These effects can be different even in the sign. Take the trivial example of typing speed and errors: for any given person, the faster they type, the more likely they are to make an error; however, typists who are faster on average tend to be more experienced and make fewer errors. All year-level individual differences variables were centered at their mean. Exceptions or addenda are mentioned below. See @tbl-variables for a brief list of variables.

### Cycle Time

This is the dependent variable in these analyses. After computing the cycle time for each closed ticket in seconds, we found the median cycle time for each month for each user using all tickets _opened_ in that month. For example, a ticket opened on the 9th of April, and closed on the 3rd of May would contribute 2,246,400 seconds to the calculation of the median for April.

### Unclosed Tickets

We were not able to observe the closing date for every ticket given our data collection cutoff of ***DATE***, and so it is plausible that we underestimate the median cycle time in a way that depends in part on how many ticket closing times we do not observe. For this reason, we also computed the proportion of tickets opened in that month that had not been closed by the end of our data collection. For example, any ticket opened in April but not closed by ***DATE*** would count toward the proportion of unclosed tickets for that month. We transformed proportions from $[0,1]$ to $(-\infty, \infty)$ using the logistic quantile function (with minum and maximum proportions forced to be .01 and .99 respectively).

### Time (Month, and within-quarter month)

We include month number as our measure of time. Additionally, we include the within-quarter month number to account for any effects of quarterly cycles. Month number was centered at month 7, and within-quarter month was centered at month 2.

### Team Size

To control for any influence of team size on cycle time, we compute each individual's team size as the average size of all teams that individual belongs to.

### Coding days

The amount of coding time was summarized as the average number of days per week that a developer made at least one commit. We divided the number of coding days in a month by the total number of days in that month and multiplied by seven to aid in interpretation.

### Total Merged PRs

Task scoping is a potentially important driver of cycle time. To measure the extent to which smaller chunks of work lead to a completed ticket, we counted the number of merged pull requests for each user for each month.

### Percent Defect Tickets

Defect tickets represent unplanned work that may interfere with timely completion of planned work. To account for this possibility, for each user, for each month, we computed the percent of tickets that were defect tickets.

### Degree centrality

We measured collaboration by calculating degree centrality. To evaluate degree centrality, a metric derived from network analysis, we employed a framework where developers were treated as nodes within the network, and their interactions in the form of Pull Requests (PRs) were regarded as connections. Within this analysis, we measured the degree centrality of each developer by assessing the number of other developers with whom they had collaborated throughout the entirety of 2022. To ensure a normalized assessment, this value was then divided by the total number of developers constituting the organizational network. The calculations were executed using the Python package Networkx. This particular variable serves as an effective proxy for quantifying the extent of collaboration among developers. We multiply the degree centrality, which is between 0 and 1, by 100.

### Comments per PR

::: {.callout-warning}
Is this still an accurate description of this var?
:::

Another indicator of collaboration is the frequency of comments within PRs. We undertook a comprehensive examination of all PRs that were successfully merged in the year 2022, meticulously calculating the average word count contained within each PR. This served as a valuable measure to gauge the depth of collaboration exhibited during the development and review process. This value was an indication of the collaboration on PRs on which an individual was the author of the PR.

|                 | Variable                          | Variable Description                                                 |
|:----------------|:----------------------------------|:---------------------------------------------------------------------|
| Productivity    | Cycle Time                        | Avg time from ticket start to end                                    |
|                 | Proportion unclosed tickets       | Control variable to account for tickets missing cycle time           |
| Time            | Month                             | Continuous time variable coded as month number                       |
|                 | Within-quarter month              | Index of the month number within each quarter year                   |
| Team Context    | Team size                         | Average size across all teams a individual is on                     |
| Coding Time     | Coding Days per Week              | Avg number of coding days a week                                     |
| Task Scoping    | Total Merged PRs                  | Total number of merged PRs per developer                             |
|                 | Percent Defect Tickets            | Percent of all tickets that are defect tickets                       |
| Collaboration   | Degree Centrality                 | Score based on the number of reviewers a developer has worked with   |
|                 | Comments per PR                   | Number of comments per pr a developer is the author on               |

: Variable descriptions {#tbl-variables}

## Analytic Approach

We fit the below models using `brms` [v2.21.6, @burknerAdvancedBayesianMultilevel2018; @burknerBrmsPackageBayesian2017], interface the the Stan probabilistic programming language for Bayesian sampling [v2.35.0, @gelman], with the `cmdstanr` backend [v0.8.0, @gabryCmdstanrInterfaceCmdStan2024], in R [v4.3.2, @rcoreteamLanguageEnvironmentStatistical2023].

We develop a model of monthly average ticket cycle time conditional on the above predictors. Specifically, we model cycle time as distributed Weibull with two parameters, $\lambda$ (scale), and _k_ (shape). The Weibull distribution is often used to model time-to-event data [@harrellRegressionModelingStrategies2015; @rummelAverageWeibullAnalysis2017], where _k_ determines the change over time in the probability of an event occurring (often called the "hazard rate"), and where $\lambda$ determines the time-to-event for some proportion of the cases (or in other words, how spread out the distribution is). In our case (and as is common practice), we are interested in determining the influence of our covariates on the scale of the distribution of cycle times, but we also allow the shape, _k_, to vary across organizations to account for different general tendencies in the change of the probability of ticket closer. In short, the Weibull distribution provides flexibility for accurately describe cycle time data that tend to have a bulk of observations at the low end, with a very long tail of more extreme observations.

The model for $\lambda$ is

\begin{equation}
\begin{aligned}
\log(\lambda) &= X\beta + \eta_{\text{org}} + \eta_{\text{org:user}} \\
\eta_{\text{org}} &\sim \mathcal{N}\left(\begin{bmatrix} \mu_1 \\ \mu_2 \end{bmatrix}, \begin{bmatrix} \sigma_{11} & \sigma_{12} \\ \sigma_{21} & \sigma_{22} \end{bmatrix}\right) \\
\eta_{\text{org:user}} &\sim \mathcal{N}\left(\begin{bmatrix} \mu_3 \\ \mu_4 \end{bmatrix}, \begin{bmatrix} \sigma_{33} & \sigma_{34} \\ \sigma_{43} & \sigma_{44} \end{bmatrix}\right) 
\end{aligned}
\end{equation}


where $X$ is the matrix of predictors, $\beta$ is the vector of coefficients, $\eta_{\text{org}}$ is random intercepts with mean $\mu_1$ and linear slopes of month with mean $\mu_2$ for each organization, and $\eta_{\text{org:user}}$ is random intercepts with mean $\mu_3$ and linear slopes of month with mean $\mu_4$ for each user nested within organization. The specific predictors in $X$ are within-quarter month number, team size, proportion of unclosed tickets, month number, yearly means and month-level deviations for coding days per week, total merged PRs, defect ticket percentage, degree centrality, and comments per PR. We also include interactions between month number and the following: team size, proportion unclosed tickets, and each of the yearly mean predictors. This allows us to account as completely as possible for our control variables (team size and proportion unclosed tickets), and allow the effect of month on cycle time to vary by the individual differences variables (e.g., to account for the possibility that someone who has higher coding days per week shows a less steep decrease in cycle time across the year than someone with lower coding days per week).

The model for _k_ is 

\begin{equation}
\begin{aligned}
\log(k) &= \zeta_{\text{org}} \\
\zeta_{\text{org}} &\sim \mathcal{N}(\mu_5, \sigma_{5}) 
\end{aligned}
\end{equation}


where $\zeta_{\text{org}}$ is a random intercept with mean $\mu_5$ each organization.

Conceptually, this model allows a unique distribution of cycle times (as determined by the random intercepts for both $\lambda$ and _k_) for each organization. It also allows the scale of the distribution of cycle times to vary for each user due to the random intercept for $\lambda$. The effect of time (month number) on the scale of the distribution of cycle times is also allowed to vary across organizations as well as users due to the random slopes (with means $\mu_2$ and $\mu_4$). This strategy allows two advantages: first, we account for multiple sources of variance that allows our estimates of the effects of interest to be more precise; and second, we are able to provide estimates of this variation across organizations and users. This variation itself is of interest given the various myths mentioned in the introduction about developer performance.

We model the effect of proportion of unclosed tickets and month number as smooth functions of the covariate using thin-plate splines for increased flexibility [@woodGeneralizedAdditiveModels2017]. Briefly, thin plate splines allow for flexible, non-linear relationships between predictors and the response variable. These splines are penalized to prevent overfitting, balancing model flexibility and complexity. The interactions between month number and our control variables are parameterized as additional smooth funcitons of month number multiplied by these variables. While our focal model parameterizes the interactions between year-level means and month number as linear coefficiencts on multiplicative combinations between the two variables, we also examined a model that uses additional smooth functions of month number multiplied by these variables to allow for additional complexity. We provide the model output for this sensitivity analysis in a supplement.

We set weakly-informative priors centered at zero for all parameters, except for the intercept for $\lambda$ and _k_ which were centered on their approximate values in the data (consistent with the default behavior of `brms`). We performed prior-predictive checks to ensure our prior specification generated data that covered and exceded the space of our observations. Given the complexity of the model, we also specified initialization of parameters at small plausible values (e.g., zero for coefficients, .1 for standard deviations of random effects). Full prior and initialization specifications are available in the analysis code.

We sampled from 4 chains with 2,000 total iterations each, discarding the first 1,000 iterations as warmup. Inferences were made on 4,000 post-warmup draws from the posterior probality distribution from the 4 chains. Unless otherwise stated we describe the posterior of paramters and predictions using the median of the distribution, and characterize its variation using the highest posterior density interval (HDI) which is defined as the interval that contains a specified percentage (usually 95%) of the most probable values of the parameter [@kruschkeRejectingAcceptingParameter]. We make general descriptive inferences based on the probability that a parameter has the sign of the posterior density's median value. For example, if 80% of the posterior density of the slope of the effect of month on cycle time is of the same sign as the density's median, and that median is negative, we would say something like, "given the model and the data, there is an 80% chance that there is a decrease in cycle times across the year." 

## Other R packages used

- [ ] make sure to cite other packages here.

# Results


```{r model summary table, eval=TRUE}
ct_model_draws <- brms_to_draws(ct_model, variables = variables(ct_model)[1:37])
ct_model_pars <- parameters::model_parameters(ct_model_draws, centrality = 'median', ci = .95, ci_method = 'hdi')
model_param_table <- kableExtra::kbl(ct_model_pars, digits = 2, format = 'pipe', booktabs = TRUE, tabular = TRUE, caption = "Model parameter estimates")

if(knitr::is_html_output()){
  knitr::knit_print(kableExtra::kable_styling(model_param_table, bootstrap_options = c('striped', 'hover')))
} else {
  knitr::knit_print(model_param_table)
}
```

# Limitations

Factors outside our control that organizations can control to increase the reliability and validity of their cycle time data include establishing a systematic approach to ticket use. Even within an organization, individual teams may have different cultures regarding when it is appropriate to open and close a ticket. If one is using cycle time as a metric to guage team velocity, it may be ideal to open and close tickets based on consisten criteria across teams. For example, opening a ticket after a piece of work is completed, and then closing it soon after, does not provide a good measure of how long that work took to complete. Distinguishing ticket types may also help. Here we were able to separate tickets into defect and non-defect tickets, but there are certainly more granular ways of categorizing tickets. These categories, in an analysis like the above, can help ensure the analytic model is comparing like with like. 

# Discussion

## Revisiting production versus productivity

In the present manuscript, like much previous work in this area, we have sidestepped the problem of providing a full conceptual accounting of productivity. We say, well, cycle-time is a fine way to examine velocity, which is related to production, which is related to productivity. We already see hints that what we mean by productivity might differ depending on the kinds of work one is doing over the course of a year (yearly average proportion of tickets that are defect tickets), or fluctuations day to day (the same variable aggregated within months). Do we think production or productivity differs depending on whether a ticket is a defect ticket or not? Clearly this matters for production, but we would be less sure about making a statement regarding productivity, in part because we can imagine a person being equally productive when working on a defect ticket versus a non-defect ticket (whatever we think productivity really is). On the other hand, we can also imagine that a person who isn't super excited about implementing features but loves squashing bugs really does change their level of productivity depending on the ticket type. Nonetheless we can say that to the extent these factors matter for production, they might matter for productivity.

# Related Work

# Conclusions

# References {.unnumbered}

