{
  "hash": "64ebbd433307cca6d1b2dd96ea3946d4",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Understanding Technology Team Velocity at Scale\nauthor:\n  - name: John C. Flournoy\n#    orcid: 0000-0002-0760-5497\n    #   - Investigation\n    #   - Project administration\n    #   - Software\n    #   - Visualization\n    corresponding: true\n    email: jcflournoyphd@pm.me\n    # roles:\n    affiliation:\n      name: Pluralsight\n      city: Draper, UT\n      country: USA\n  - name: Carol S. Lee\n#    orcid: 0000-0002-0760-5497\n    #   - Investigation\n    #   - Project administration\n    #   - Software\n    #   - Visualization\n    corresponding: false\n    # roles:\n    affiliation:\n      name: Pluralsight\n      city: Draper, UT\n      country: USA\n  - name: Catherine M. Hicks\n#    orcid: 0000-0002-0760-5497\n    #   - Investigation\n    #   - Project administration\n    #   - Software\n    #   - Visualization\n    corresponding: false\n    email: cat-hicks@pluralsight.com\n    # roles:\n    affiliation:\n      name: Pluralsight\n      city: Draper, UT\n      country: USA\n# keywords:\nabstract: |\n  Things\nplain-language-summary: |\n  Other things\nkey-points:\n  - A point\ndate: last-modified\nbibliography: references.bib\nnumber-sections: true\nacm-metadata:\n  # comment this out to make submission anonymous\n  \n  # if uncommented, this produces a teaser figure\n  # \n  # anonymous: true\n  # comment this out to build a draft version\n  final: false\n  # comment this out to specify detailed document options\n  # acmart-options: sigconf, review  \n  # acm preamble information\n  copyright-year: 2024\n  acm-year: 2024\n  copyright: none\n  # doi: XXXXXXX.XXXXXXX\n  # conference-acronym: \"Conference acronym 'XX\"\n  # conference-name: |\n  #   Make sure to enter the correct\n  #   conference title from your rights confirmation email\n  # conference-date: June 03--05, 2018\n  # conference-location: Woodstock, NY\n  # isbn: 978-1-4503-XXXX-X/18/06\n  # if present, replaces the list of authors in the page header.\n  shortauthors: Flournoy et al.\n  acks: Maggie Wu\n  # Please copy and paste the code instead of the example below.\n  # The code below is generated by the tool at http://dl.acm.org/ccs.cfm.\n  ccs: |\n        \\begin{CCSXML}\n        <ccs2012>\n           <concept>\n               <concept_id>10002944.10011123.10010912</concept_id>\n               <concept_desc>General and reference~Empirical studies</concept_desc>\n               <concept_significance>500</concept_significance>\n               </concept>\n         </ccs2012>\n        \\end{CCSXML}\n        \n        \\ccsdesc[500]{General and reference~Empirical studies}\n  keywords:\n    - productivity\n    - cycle time\n    - collaboration\n    - individual differences\n    - within-person variation\n  # teaser:\n  #   image: sampleteaser\n  #   caption: figure caption\n  #   description: teaser description   \neditor: \n  markdown: \n    wrap: 72\n---\n\n::: {.cell .hidden}\n\n```{.r .cell-code .hidden}\nknitr::opts_chunk$set(message = FALSE, warning = FALSE, error = FALSE)\nlibrary(knitr)\nlibrary(kableExtra)\nlibrary(flextable)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n\nAttaching package: 'flextable'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nThe following objects are masked from 'package:kableExtra':\n\n    as_image, footnote\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\nlibrary(posterior)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nThis is posterior version 1.6.0\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n\nAttaching package: 'posterior'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nThe following objects are masked from 'package:stats':\n\n    mad, sd, var\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nThe following objects are masked from 'package:base':\n\n    %in%, match\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\nlibrary(parameters)\nlibrary(scales)\nct_model_obs_info <- readRDS('cycle_time_full_intx_lin_remonth_obs-info.rds')\n```\n:::\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Introduction\n\nUnderstanding the factors that affect the productivity of software developers offers organizations the knowledge to deliver value to users, maintain competitiveness, and improve developer experience. Indeed, whether software is the an organizations primary product, or whether internal software engineering enables other end goals (such as in the pharmaceutical industry), the productivity of developers is increasingly the foundation on which all other activities are built. \n\nHowever, productivity is a difficult phenomenon to define and measure well. For this reason, we focus on an objective measure with implications for productivity: _velocity_, which in software research is defined as the time it takes to move through a work task. In calls to re-examine the complexity of developer productivity, researchers have argued that velocity measures are highly task-dependent, and do not represent the quality of work done or other, longer-term measures of the impact of work [@sadowskiSoftwareDevelopmentProductivity2019]. Nevertheless, time measures are very frequently used as an outcome measure to make recommendations for software engineering practices, e.g. in evaluating the perceived impact of technical debt [@beskerTechnicalDebtCripples2018]. These measures are also very inexpensive and convenient to collect for teams trying to use metrics to track productivity.\n\nIn this report, we focus the time between a work ticket's opening and closing, called _cycle time_. Although productivity _per se_ is not expected to cause cycle time in the same way across all contexts, there is a necessary relationship between the two. Lower cycle times indicate faster delivery times and more efficient software processes, cycle time has also become a key indicator of team health, developer productivity, and team efficiency [@clincySoftwareDevelopmentProductivity2003]. While we focus specifically on cycle time, what we learn may have implications for productivity. We analyze cycle time data for a full year across hundreds of organizations, allowing us to examine fluctuations within a person's workflow as well as different stable tendencies between people. Our research questions are:\n\nRQ1. How do common software development process and workplace factors impact cycle time? \n\nRQ2. How much between- and within-person variation is there in cycle time?\n\n# Background\n\n## Productivity\n\nThere is disagreement about what constitutes productivity. Perceptions of what counts as productivity differ across individuals and roles, with managers tending to focus on long-term outcomes and ICs focusing on activity, for example [@storeyHowDevelopersManagers2022]. The scientific literature on this topic has used code-based metrics such as cycle time, commits, or lines of code[@murphy-hillWhatPredictsSoftware2021a]. These have obvious limitations in that the meaning of a particular unit for any of these metrics may be different depending on context [@sadowskiSoftwareDevelopmentProductivity2019]. Some researches have sought solutions to this problem by asking individuals to rate their own level of, or satisfaction with, productivity [@storeyTheorySoftwareDeveloper2021]. While it is plausible that perceived productivity could indicate productivity _per se_, such a measure is not free from context effects that would impact more \"objective\" metrics, and presents its own set of measurement challenges. \n\nAnother difficulty stems from an often confused distinction between production (quantity of output regardless of resources provided), productivity (quantity of output given the resources provided), and performance (flexibility, adaptability, dependability, sustainability, and quality of output over time) [@leeOurOrganizationActually2023]. While the present analysis necessarily identifies production as the outcome, the influence of different factors on production highlights the need for these distinctions. For example, we may see that production velocity differs depending on the proportion of work that consists of defect tickets, which highlights the need to consider this contextual factor when considering individual performance.\n\n## Ticket assignment\n\nAssignment of tickets, especially defect tickets, is complex over time and both the initial and subsequent assignments of tickets can be impacted by many factors. For example, after an initial assignment to a developer bugs may frequently be reassigned due to diverse factors such as determining ownership, time constraints, and identifying developers who may have a particular view into the root cause of the bug [@guoNotMyBug2011].\n\n## Evaluating individual developer performance \n\nDefining developers’ productivity and performance is a highly contentious exercise and many different definitions are given by both practitioners and researchers [@murphy-hillWhatPredictsSoftware2021a; @sadowskiSoftwareDevelopmentProductivity2019].\n\nAcross workplaces, measures of time are frequently used to assess productivity even while the shortcomings of these measures are also widely acknowledged, and alternative measures include self-ratings or peer evaluations [@ramirezMeasuringKnowledgeWorker2004] and in software engineering, operationalizations of code work such as lines of code [@murphy-hillWhatPredictsSoftware2021a].\n\nWe lack holistic evidence about what practitioners in software development believe about developer performance and ability; some accounts with samples at large technology companies have suggested both that definitions of productivity can vary widely between managers and developers, and that software developers perceive many potential trade-offs between types of technical goals, e.g. that quality and speed may be unattainable together [@storeyHowDevelopersManagers2022].\n\nOne “industry myth” which is referenced frequently in practitioner commentary is the idea of a “10x engineer”: this position alleges that some small outlier population of software developers consistently outperform others on key development tasks. Potentially springing from small case studies examining a handful of developers’ time spent solving small laboratory tasks [@sackmanExploratoryExperimentalStudies1968; discussed in @nicholsEndMythIndividual2019], this “law” was generalized from only twelve individuals, uses time spent on the tasks as an estimate of both effort and cost, has failed to replicate in larger examinations of developer performance on similar tasks, and failed to acknowledge large within-individual variation in task performance [@nicholsEndMythIndividual2019; @shrikanthAssessingPractitionerBeliefs2021].\n\nNevertheless, the idea that \"10x engineers\" exist and that some individuals in software engineering outperform others by a \"rule\" of 10x has been cited often and codified in industry commentary, [e.g., @brooksMythicalManmonthEssays1975]. Modern commentary on this idea frequently refers to it as a myth, but it is also discussed as a potentially real phenomenon^[For example, see this [ycombinator thread](https://news.ycombinator.com/item?id=22349531) ([internet archive](http://web.archive.org/web/20240917164935/https://stackoverflow.blog/2024/06/19/the-real-10x-developer-makes-their-whole-team-better/)), and this [StackOverflow blog post](https://stackoverflow.blog/2024/06/19/the-real-10x-developer-makes-their-whole-team-better)  ([internet archive](http://web.archive.org/web/20231209171051/https://news.ycombinator.com/item?id=22349531))]. In our previous work, we have noted that some software practitioners hold field-specific ability beliefs that software development success and productivity is attributable to a quality of “innate brilliance”, and that this belief among practitioners may create a higher likelihood of experiencing threat and anxiety in the face of rapid role change and technological shifts to developer workflows [@hicksNewDeveloperAI2024]. \n\n# Research design and methodology\n\nAll code can be found in the repository for this paper.\n\n## Data Selection and Characteristics\n\nTo examine coding time, task scoping, and collaboration as predictors of cycle time over time, we centered our analysis on a large, real-world dataset of git and ticketing data of 55,619 observations across 12 months from 11,398 users in 216 organizations of varying sizes and industries. This data was available via partnerships between a software metrics tool which was incorporated into the workflows of real working software teams, and the 216 organizations which opted in to this tool at any point during the 12 month analytic window. Notably, users themselves did not have to be active users of the software metrics tool itself in order to be included in this dataset, and git and ticketing data was available retrospectively for dates prior to the implementation of the tool in the organization. In other words, the git and ticketing data included in this analysis is not predicated on being an individual user of the software metrics tool, nor on the software metrics tool being used at the organization, as our dataset contains measures both before and after the software metric tool implementation at the organization, and implementation dates for organizations vary across the 12 month period.\n\nData were selected for analysis based on whether users actively contributed code during the time frame of the study. The 216 organizations included in this dataset had between [N - N] users, and in previous pilot surveys used to inform the design of this project, professional software developer users from these organizations described their main industries as ranging from Technology, Finance, Government, Insurance, Retail, and others, indicating a wide diversity of business use cases and engineering contexts were present in this sample. \n\n## Computing study variables\n\nUsing the most complete data for each user, we use the mean to aggregate each variable at the month level and the year level (see below for more details specific to each variable). For each predictor, we then subtracted each person's yearly average from their monthly data to produce a within-person deviation variable. This allows us to disaggregate effects on the outcome due to yearly-level individual differences and within-person, month-to-month fluctuations [@curranDisaggregationPersonPerson2011]. This important step allows us to avoid averaging between-person and within-person differences into a single effect estimate. These effects can be different even in the sign. Take the trivial example of typing speed and errors: for any given person, the faster they type, the more likely they are to make an error; however, typists who are faster on average tend to be more experienced and make fewer errors. All year-level individual differences variables were centered at their mean. Exceptions or addenda are mentioned below. See @tbl-variables for a brief list of variables.\n\n### Cycle Time\n\nThis is the dependent variable in these analyses. After computing the cycle time for each closed ticket in seconds, we found the median cycle time for each month for each user using all tickets _opened_ in that month. For example, a ticket opened on the 9th of April, and closed on the 3rd of May would contribute 2,246,400 seconds to the calculation of the median for April.\n\n### Unclosed Tickets\n\nWe were not able to observe the closing date for every ticket given our data collection cutoff of March 7, 2023, and so it is plausible that we underestimate the median cycle time in a way that depends in part on how many ticket closing times we do not observe. For this reason, we also computed the proportion of tickets opened in that month that had not been closed by the end of our data collection. For example, any ticket opened in April but not closed by March 7, 2023 would count toward the proportion of unclosed tickets for that month. We transformed proportions from $[0,1]$ to $(-\\infty, \\infty)$ using the logistic quantile function (with minum and maximum proportions forced to be .01 and .99 respectively).\n\n### Time (Month, and within-quarter month)\n\nWe include month number as our measure of time. Additionally, we include the within-quarter month number to account for any effects of quarterly cycles. Month number was centered at month 7, and within-quarter month was centered at month 2.\n\n### Team Size\n\nTo control for any influence of team size on cycle time, we compute each individual's team size as the average size of all teams that individual belongs to.\n\n### Coding days\n\nThe amount of coding time was summarized as the average number of days per week that a developer made at least one commit. We divided the number of coding days in a month by the total number of days in that month and multiplied by seven to aid in interpretation.\n\n### Total Merged PRs\n\nTask scoping is a potentially important driver of cycle time. To measure the extent to which smaller chunks of work lead to a completed ticket, we counted the number of merged pull requests for each user for each month.\n\n### Percent Defect Tickets\n\nDefect tickets represent unplanned work that may interfere with timely completion of planned work. To account for this possibility, for each user, for each month, we computed the percent of tickets that were defect tickets.\n\n### Degree centrality\n\nWe measured collaboration by calculating degree centrality. To evaluate degree centrality, a metric derived from network analysis, we employed a framework where developers were treated as nodes within the network, and their interactions in the form of Pull Requests (PRs) were regarded as connections. In other words, any contribution of code to the same pull request constituted a collaboration edge between developers. We normalized each centrality value by dividing by the total number of developers constituting the organizational network. The calculations were executed using the Python package Networkx (CITATION). This particular variable serves as an effective proxy for quantifying the extent of collaboration among developers. We multiply the normalized degree centrality, which is between 0 and 1, by 100.\n\n### Comments per PR\n\n::: {.callout-warning}\nIs this still an accurate description of this var? This is from the research brief but I have been thinking of this as a number of comments. However, average word count would make some sense as well given the large values some observations have. But the sql does not seem to be word count.\n:::\n\nAnother indicator of collaboration is the frequency of comments within PRs. We undertook a comprehensive examination of all PRs that were successfully merged in the year 2022, meticulously calculating the average word count contained within each PR. This served as a valuable measure to gauge the depth of collaboration exhibited during the development and review process. This value was an indication of the collaboration on PRs on which an individual was the author of the PR.\n\n|                 | Variable                          | Variable Description                                                 |\n|:----------------|:----------------------------------|:---------------------------------------------------------------------|\n| Productivity    | Cycle Time                        | Avg time from ticket start to end                                    |\n|                 | Proportion unclosed tickets       | Control variable to account for tickets missing cycle time           |\n| Time            | Month                             | Continuous time variable coded as month number                       |\n|                 | Within-quarter month              | Index of the month number within each quarter year                   |\n| Team Context    | Team size                         | Average size across all teams a individual is on                     |\n| Coding Time     | Coding Days per Week              | Avg number of coding days a week                                     |\n| Task Scoping    | Total Merged PRs                  | Total number of merged PRs per developer                             |\n|                 | Percent Defect Tickets            | Percent of all tickets that are defect tickets                       |\n| Collaboration   | Degree Centrality                 | Score based on the number of reviewers a developer has worked with   |\n|                 | Comments per PR                   | Number of comments per pr a developer is the author on               |\n\n: Variable descriptions {#tbl-variables}\n\n## Analytic Approach\n\nThe models described below are fit using `brms` [v2.21.6, @burknerAdvancedBayesianMultilevel2018; @burknerBrmsPackageBayesian2017], interface the the Stan probabilistic programming language for Bayesian sampling [v2.35.0, @gelman], with the `cmdstanr` backend [v0.8.0, @gabryCmdstanrInterfaceCmdStan2024], in R [v4.3.2, @rcoreteamLanguageEnvironmentStatistical2023].\n\nWe develop a model of monthly average ticket cycle time conditional on the above predictors. Specifically, we model cycle time as distributed Weibull with two parameters, $\\lambda$ (scale), and _k_ (shape). The Weibull distribution is often used to model time-to-event data [@harrellRegressionModelingStrategies2015; @rummelAverageWeibullAnalysis2017], where _k_ determines the change over time in the probability of an event occurring (often called the \"hazard rate\"), and where $\\lambda$ determines the time-to-event for some proportion of the cases (or in other words, how spread out the distribution is). In our case (and as is common practice), we are interested in determining the influence of our covariates on the scale of the distribution of cycle times, but we also allow the shape, _k_, to vary across organizations to account for different general tendencies in the change of the probability of ticket closer. In short, the Weibull distribution provides flexibility for accurately describe cycle time data that tend to have a bulk of observations at the low end, with a very long tail of more extreme observations.\n\nThe model for $\\lambda$ is\n\n\\begin{equation}\n\\begin{aligned}\n\\log(\\lambda) &= X\\beta + \\eta_{\\text{org}} + \\eta_{\\text{org:user}} \\\\\n\\eta_{\\text{org}} &\\sim \\mathcal{N}\\left(\\begin{bmatrix} \\mu_1 \\\\ \\mu_2 \\end{bmatrix}, \\begin{bmatrix} \\sigma_{11} & \\sigma_{12} \\\\ \\sigma_{21} & \\sigma_{22} \\end{bmatrix}\\right) \\\\\n\\eta_{\\text{org:user}} &\\sim \\mathcal{N}\\left(\\begin{bmatrix} \\mu_3 \\\\ \\mu_4 \\end{bmatrix}, \\begin{bmatrix} \\sigma_{33} & \\sigma_{34} \\\\ \\sigma_{43} & \\sigma_{44} \\end{bmatrix}\\right) \n\\end{aligned}\n\\end{equation}\n\n\nwhere $X$ is the matrix of predictors, $\\beta$ is the vector of coefficients, $\\eta_{\\text{org}}$ is random intercepts with mean $\\mu_1$ and linear slopes of month with mean $\\mu_2$ for each organization, and $\\eta_{\\text{org:user}}$ is random intercepts with mean $\\mu_3$ and linear slopes of month with mean $\\mu_4$ for each user nested within organization. The specific predictors in $X$ are within-quarter month number, team size, proportion of unclosed tickets, month number, yearly means and month-level deviations for coding days per week, total merged PRs, defect ticket percentage, degree centrality, and comments per PR. We also include interactions between month number and the following: team size, proportion unclosed tickets, and each of the yearly mean predictors. This allows us to account as completely as possible for our control variables (team size and proportion unclosed tickets), and allow the effect of month on cycle time to vary by the individual differences variables (e.g., to account for the possibility that someone who has higher coding days per week shows a less steep decrease in cycle time across the year than someone with lower coding days per week).\n\nThe model for _k_ is \n\n\\begin{equation}\n\\begin{aligned}\n\\log(k) &= \\zeta_{\\text{org}} \\\\\n\\zeta_{\\text{org}} &\\sim \\mathcal{N}(\\mu_5, \\sigma_{5}) \n\\end{aligned}\n\\end{equation}\n\n\nwhere $\\zeta_{\\text{org}}$ is a random intercept with mean $\\mu_5$ each organization.\n\nConceptually, this model allows a unique distribution of cycle times (as determined by the random intercepts for both $\\lambda$ and _k_) for each organization. It also allows the scale of the distribution of cycle times to vary for each user due to the random intercept for $\\lambda$. The effect of time (month number) on the scale of the distribution of cycle times is also allowed to vary across organizations as well as users due to the random slopes (with means $\\mu_2$ and $\\mu_4$). This strategy allows two advantages: first, we account for multiple sources of variance that allows our estimates of the effects of interest to be more precise; and second, we are able to provide estimates of this variation across organizations and users. This variation itself is of interest given the various myths mentioned in the introduction about developer performance.\n\nWe model the effect of proportion of unclosed tickets and month number as smooth functions of the covariate using thin-plate splines for increased flexibility [@woodGeneralizedAdditiveModels2017]. Briefly, thin plate splines allow for flexible, non-linear relationships between predictors and the response variable. These splines are penalized to prevent overfitting, balancing model flexibility and complexity. The interactions between month number and our control variables are parameterized as additional smooth funcitons of month number multiplied by these variables. While our focal model parameterizes the interactions between year-level means and month number as linear coefficiencts on multiplicative combinations between the two variables, we also examined a model that uses additional smooth functions of month number multiplied by these variables to allow for additional complexity. We provide the model output for this sensitivity analysis in a supplement.\n\nWe set weakly-informative priors centered at zero for all parameters, except for the intercept for $\\lambda$ and _k_ which were centered on their approximate values in the data (consistent with the default behavior of `brms`). We performed prior-predictive checks to ensure our prior specification generated data that covered and exceded the space of our observations. Given the complexity of the model, we also specified initialization of parameters at small plausible values (e.g., zero for coefficients, .1 for standard deviations of random effects). Full prior and initialization specifications are available in the analysis code.\n\nWe sampled from 4 chains with 2,000 total iterations each, discarding the first 1,000 iterations as warmup. Inferences were made on 4,000 post-warmup draws from the posterior probality distribution from the 4 chains. Unless otherwise stated we describe the posterior of paramters and predictions using the median of the distribution, and characterize its variation using the highest posterior density interval (HDI) which is defined as the interval that contains a specified percentage (usually 95%) of the most probable values of the parameter [@kruschkeRejectingAcceptingParameter]. We make general descriptive inferences based on the probability that a parameter has the sign of the posterior density's median value. For example, if 80% of the posterior density of the slope of the effect of month on cycle time is of the same sign as the density's median, and that median is negative, we would say something like, \"given the model and the data, there is an 80% chance that there is a decrease in cycle times across the year.\" \n\n## Other R packages used\n\n- [ ] make sure to cite other packages here.\n\n# Results\n\nResults from the linear model reported below were highly similar to those in the more flexible non-linear model sensitivity analysis described above. Also note that parameters in the table are from a linear model for the distribution of log($\\lambda$) and log(*k*), while model expectations are on the response scale and can therefore display curvature even while the model is linear.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nfe_par_nicenames <- c(b_Intercept = 'Intercept log(λ)',\n                      b_shape_Intercept = 'Intercept log(k)',\n                      b_within_quarter_month_num_c = 'Within-quarter month',\n                      b_team_size_c = 'Team size',\n                      b_wi_avg_coding_days_per_week = 'Avg. coding days/week (within-person)',\n                      b_yr_avg_avg_coding_days_per_week_c = 'Avg. coding days/week',\n                      b_wi_total_merged_prs = 'Total merged PRs (within-person)',\n                      b_yr_avg_total_merged_prs_c = 'Total merged PRs',\n                      b_wi_defect_tickets_pct_indiv = 'Defect tickets % (within-person)',\n                      b_yr_avg_defect_tickets_pct_indiv_c = 'Defect tickets %',\n                      b_wi_degree_centrality_monthly_100 = 'Degree centrality (within-person)',\n                      b_yr_avg_degree_centrality_monthly_100_c = 'Degree centrality',\n                      b_wi_comments_per_pr = 'Comments per PR (within-person)',\n                      b_yr_avg_comments_per_pr_c = 'Comments per PR',\n                      `b_yr_avg_avg_coding_days_per_week_c:month_num_c` = 'Avg. coding days/week × Month',\n                      `b_yr_avg_total_merged_prs_c:month_num_c` = 'Total merged PRs × Month',\n                      `b_yr_avg_defect_tickets_pct_indiv_c:month_num_c` = 'Defect tickets % × Month',\n                      `b_yr_avg_degree_centrality_monthly_100_c:month_num_c` = 'Degree centrality × Month',\n                      `b_yr_avg_comments_per_pr_c:month_num_c` = 'Comments per PR × Month')\n\nct_model_draws_fe <- readRDS('cycle_time_full_intx_lin_remonth_draws_id-fe.rds')\nct_model_pars_fe <- parameters::model_parameters(ct_model_draws_fe, \n                                                 digits = 4,\n                                                 centrality = 'median', \n                                                 ci = .95, \n                                                 ci_method = 'hdi', \n                                                 test = 'pd', exponentiate = FALSE)\nct_model_pars_fe_for_text <- ct_model_pars_fe\nct_model_pars_fe$Parameter <- fe_par_nicenames[ct_model_pars_fe$Parameter]\nct_model_pars_fe$pd <- sprintf('% 3.0f%%', ct_model_pars_fe$pd*100)\n\nnames(ct_model_pars_fe) <- c('Parameter', 'Posterior Median', 'Lower 95% HDI', 'Upper 95% HDI', 'Sign Probability')\n```\n:::\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe find that all measured factors, both individual-difference and within-person deviations, have a non-zero association with cycle time, with 100% of the posterior distribution for these parameters sharing the same sign (see @tbl-results-fe for point estimates and uncertainty intervals). Specifically, when individuals increased average coding days per week month-to-month they also tended to have lower cycle times, and individuals with more average coding days per week across the year tended to have lower cycle times (@fig-codingdays). The association between coding days and cycle time also tended to increase in strength across months, with 97% of the posterior in this direction.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nflextable(ct_model_pars_fe) |>\n    colformat_double(digits = 4) |>\n    set_table_properties(layout = 'autofit') |>\n    theme_booktabs(bold_header = TRUE) |>\n    align(j = 5, align = 'right', part = 'all') |>\n    flextable::set_caption('Fixed effects {#tbl-results-fe}') |>\n    add_footer_lines('Posterior Median: The median of the posterior probability density for the parameter is used as the parameter point estimate. 95% HDI: The 95% highest density interval is the region of the posterior distribution with the 95% most probable values for the parameter. Sign Probability: The proportion of the posterior distribution that has the same sign (direction) as the point estimate.')\n```\n\n::: {.cell-output-display}\n\n```{=latex}\n\\global\\setlength{\\Oldarrayrulewidth}{\\arrayrulewidth}\n\n\\global\\setlength{\\Oldtabcolsep}{\\tabcolsep}\n\n\\setlength{\\tabcolsep}{2pt}\n\n\\renewcommand*{\\arraystretch}{1.5}\n\n\n\n\\providecommand{\\ascline}[3]{\\noalign{\\global\\arrayrulewidth #1}\\arrayrulecolor[HTML]{#2}\\cline{#3}}\n\n\\begin{longtable}[c]{ccccc}\n\n\n\n\\ascline{1.5pt}{666666}{1-5}\n\n\\multicolumn{1}{>{}l}{\\textcolor[HTML]{000000}{\\fontsize{11}{11}\\selectfont{\\global\\setmainfont{DejaVu Sans}{\\textbf{Parameter}}}}} & \\multicolumn{1}{>{}r}{\\textcolor[HTML]{000000}{\\fontsize{11}{11}\\selectfont{\\global\\setmainfont{DejaVu Sans}{\\textbf{Posterior\\ Median}}}}} & \\multicolumn{1}{>{}r}{\\textcolor[HTML]{000000}{\\fontsize{11}{11}\\selectfont{\\global\\setmainfont{DejaVu Sans}{\\textbf{Lower\\ 95\\%\\ HDI}}}}} & \\multicolumn{1}{>{}r}{\\textcolor[HTML]{000000}{\\fontsize{11}{11}\\selectfont{\\global\\setmainfont{DejaVu Sans}{\\textbf{Upper\\ 95\\%\\ HDI}}}}} & \\multicolumn{1}{>{}r}{\\textcolor[HTML]{000000}{\\fontsize{11}{11}\\selectfont{\\global\\setmainfont{DejaVu Sans}{\\textbf{Sign\\ Probability}}}}} \\\\\n\n\\ascline{1.5pt}{666666}{1-5}\\endfirsthead \n\n\\ascline{1.5pt}{666666}{1-5}\n\n\\multicolumn{1}{>{}l}{\\textcolor[HTML]{000000}{\\fontsize{11}{11}\\selectfont{\\global\\setmainfont{DejaVu Sans}{\\textbf{Parameter}}}}} & \\multicolumn{1}{>{}r}{\\textcolor[HTML]{000000}{\\fontsize{11}{11}\\selectfont{\\global\\setmainfont{DejaVu Sans}{\\textbf{Posterior\\ Median}}}}} & \\multicolumn{1}{>{}r}{\\textcolor[HTML]{000000}{\\fontsize{11}{11}\\selectfont{\\global\\setmainfont{DejaVu Sans}{\\textbf{Lower\\ 95\\%\\ HDI}}}}} & \\multicolumn{1}{>{}r}{\\textcolor[HTML]{000000}{\\fontsize{11}{11}\\selectfont{\\global\\setmainfont{DejaVu Sans}{\\textbf{Upper\\ 95\\%\\ HDI}}}}} & \\multicolumn{1}{>{}r}{\\textcolor[HTML]{000000}{\\fontsize{11}{11}\\selectfont{\\global\\setmainfont{DejaVu Sans}{\\textbf{Sign\\ Probability}}}}} \\\\\n\n\\ascline{1.5pt}{666666}{1-5}\\endhead\n\n\n\n\\multicolumn{1}{>{}l}{\\textcolor[HTML]{000000}{\\fontsize{11}{11}\\selectfont{\\global\\setmainfont{DejaVu Sans}{Intercept\\ log(λ)}}}} & \\multicolumn{1}{>{}r}{\\textcolor[HTML]{000000}{\\fontsize{11}{11}\\selectfont{\\global\\setmainfont{DejaVu Sans}{14.3484}}}} & \\multicolumn{1}{>{}r}{\\textcolor[HTML]{000000}{\\fontsize{11}{11}\\selectfont{\\global\\setmainfont{DejaVu Sans}{14.2727}}}} & \\multicolumn{1}{>{}r}{\\textcolor[HTML]{000000}{\\fontsize{11}{11}\\selectfont{\\global\\setmainfont{DejaVu Sans}{14.4282}}}} & \\multicolumn{1}{>{}r}{\\textcolor[HTML]{000000}{\\fontsize{11}{11}\\selectfont{\\global\\setmainfont{DejaVu Sans}{\\ 100\\%}}}} \\\\\n\n\n\n\n\n\\multicolumn{1}{>{}l}{\\textcolor[HTML]{000000}{\\fontsize{11}{11}\\selectfont{\\global\\setmainfont{DejaVu Sans}{Intercept\\ log(k)}}}} & \\multicolumn{1}{>{}r}{\\textcolor[HTML]{000000}{\\fontsize{11}{11}\\selectfont{\\global\\setmainfont{DejaVu Sans}{0.1214}}}} & \\multicolumn{1}{>{}r}{\\textcolor[HTML]{000000}{\\fontsize{11}{11}\\selectfont{\\global\\setmainfont{DejaVu Sans}{0.0807}}}} & \\multicolumn{1}{>{}r}{\\textcolor[HTML]{000000}{\\fontsize{11}{11}\\selectfont{\\global\\setmainfont{DejaVu Sans}{0.1585}}}} & \\multicolumn{1}{>{}r}{\\textcolor[HTML]{000000}{\\fontsize{11}{11}\\selectfont{\\global\\setmainfont{DejaVu Sans}{\\ 100\\%}}}} \\\\\n\n\n\n\n\n\\multicolumn{1}{>{}l}{\\textcolor[HTML]{000000}{\\fontsize{11}{11}\\selectfont{\\global\\setmainfont{DejaVu Sans}{Within-quarter\\ month}}}} & \\multicolumn{1}{>{}r}{\\textcolor[HTML]{000000}{\\fontsize{11}{11}\\selectfont{\\global\\setmainfont{DejaVu Sans}{-0.0085}}}} & \\multicolumn{1}{>{}r}{\\textcolor[HTML]{000000}{\\fontsize{11}{11}\\selectfont{\\global\\setmainfont{DejaVu Sans}{-0.0188}}}} & \\multicolumn{1}{>{}r}{\\textcolor[HTML]{000000}{\\fontsize{11}{11}\\selectfont{\\global\\setmainfont{DejaVu Sans}{0.0013}}}} & \\multicolumn{1}{>{}r}{\\textcolor[HTML]{000000}{\\fontsize{11}{11}\\selectfont{\\global\\setmainfont{DejaVu Sans}{\\ 95\\%}}}} \\\\\n\n\n\n\n\n\\multicolumn{1}{>{}l}{\\textcolor[HTML]{000000}{\\fontsize{11}{11}\\selectfont{\\global\\setmainfont{DejaVu Sans}{Team\\ size}}}} & \\multicolumn{1}{>{}r}{\\textcolor[HTML]{000000}{\\fontsize{11}{11}\\selectfont{\\global\\setmainfont{DejaVu Sans}{0.0001}}}} & \\multicolumn{1}{>{}r}{\\textcolor[HTML]{000000}{\\fontsize{11}{11}\\selectfont{\\global\\setmainfont{DejaVu Sans}{-0.0644}}}} & \\multicolumn{1}{>{}r}{\\textcolor[HTML]{000000}{\\fontsize{11}{11}\\selectfont{\\global\\setmainfont{DejaVu Sans}{0.0560}}}} & \\multicolumn{1}{>{}r}{\\textcolor[HTML]{000000}{\\fontsize{11}{11}\\selectfont{\\global\\setmainfont{DejaVu Sans}{\\ 50\\%}}}} \\\\\n\n\n\n\n\n\\multicolumn{1}{>{}l}{\\textcolor[HTML]{000000}{\\fontsize{11}{11}\\selectfont{\\global\\setmainfont{DejaVu Sans}{Avg.\\ coding\\ days/week\\ (within-person)}}}} & \\multicolumn{1}{>{}r}{\\textcolor[HTML]{000000}{\\fontsize{11}{11}\\selectfont{\\global\\setmainfont{DejaVu Sans}{-0.0794}}}} & \\multicolumn{1}{>{}r}{\\textcolor[HTML]{000000}{\\fontsize{11}{11}\\selectfont{\\global\\setmainfont{DejaVu Sans}{-0.0911}}}} & \\multicolumn{1}{>{}r}{\\textcolor[HTML]{000000}{\\fontsize{11}{11}\\selectfont{\\global\\setmainfont{DejaVu Sans}{-0.0677}}}} & \\multicolumn{1}{>{}r}{\\textcolor[HTML]{000000}{\\fontsize{11}{11}\\selectfont{\\global\\setmainfont{DejaVu Sans}{\\ 100\\%}}}} \\\\\n\n\n\n\n\n\\multicolumn{1}{>{}l}{\\textcolor[HTML]{000000}{\\fontsize{11}{11}\\selectfont{\\global\\setmainfont{DejaVu Sans}{Avg.\\ coding\\ days/week}}}} & \\multicolumn{1}{>{}r}{\\textcolor[HTML]{000000}{\\fontsize{11}{11}\\selectfont{\\global\\setmainfont{DejaVu Sans}{-0.0839}}}} & \\multicolumn{1}{>{}r}{\\textcolor[HTML]{000000}{\\fontsize{11}{11}\\selectfont{\\global\\setmainfont{DejaVu Sans}{-0.1100}}}} & \\multicolumn{1}{>{}r}{\\textcolor[HTML]{000000}{\\fontsize{11}{11}\\selectfont{\\global\\setmainfont{DejaVu Sans}{-0.0587}}}} & \\multicolumn{1}{>{}r}{\\textcolor[HTML]{000000}{\\fontsize{11}{11}\\selectfont{\\global\\setmainfont{DejaVu Sans}{\\ 100\\%}}}} \\\\\n\n\n\n\n\n\\multicolumn{1}{>{}l}{\\textcolor[HTML]{000000}{\\fontsize{11}{11}\\selectfont{\\global\\setmainfont{DejaVu Sans}{Total\\ merged\\ PRs\\ (within-person)}}}} & \\multicolumn{1}{>{}r}{\\textcolor[HTML]{000000}{\\fontsize{11}{11}\\selectfont{\\global\\setmainfont{DejaVu Sans}{-0.0127}}}} & \\multicolumn{1}{>{}r}{\\textcolor[HTML]{000000}{\\fontsize{11}{11}\\selectfont{\\global\\setmainfont{DejaVu Sans}{-0.0155}}}} & \\multicolumn{1}{>{}r}{\\textcolor[HTML]{000000}{\\fontsize{11}{11}\\selectfont{\\global\\setmainfont{DejaVu Sans}{-0.0097}}}} & \\multicolumn{1}{>{}r}{\\textcolor[HTML]{000000}{\\fontsize{11}{11}\\selectfont{\\global\\setmainfont{DejaVu Sans}{\\ 100\\%}}}} \\\\\n\n\n\n\n\n\\multicolumn{1}{>{}l}{\\textcolor[HTML]{000000}{\\fontsize{11}{11}\\selectfont{\\global\\setmainfont{DejaVu Sans}{Total\\ merged\\ PRs}}}} & \\multicolumn{1}{>{}r}{\\textcolor[HTML]{000000}{\\fontsize{11}{11}\\selectfont{\\global\\setmainfont{DejaVu Sans}{-0.0083}}}} & \\multicolumn{1}{>{}r}{\\textcolor[HTML]{000000}{\\fontsize{11}{11}\\selectfont{\\global\\setmainfont{DejaVu Sans}{-0.0139}}}} & \\multicolumn{1}{>{}r}{\\textcolor[HTML]{000000}{\\fontsize{11}{11}\\selectfont{\\global\\setmainfont{DejaVu Sans}{-0.0027}}}} & \\multicolumn{1}{>{}r}{\\textcolor[HTML]{000000}{\\fontsize{11}{11}\\selectfont{\\global\\setmainfont{DejaVu Sans}{\\ 100\\%}}}} \\\\\n\n\n\n\n\n\\multicolumn{1}{>{}l}{\\textcolor[HTML]{000000}{\\fontsize{11}{11}\\selectfont{\\global\\setmainfont{DejaVu Sans}{Defect\\ tickets\\ \\%\\ (within-person)}}}} & \\multicolumn{1}{>{}r}{\\textcolor[HTML]{000000}{\\fontsize{11}{11}\\selectfont{\\global\\setmainfont{DejaVu Sans}{-0.0019}}}} & \\multicolumn{1}{>{}r}{\\textcolor[HTML]{000000}{\\fontsize{11}{11}\\selectfont{\\global\\setmainfont{DejaVu Sans}{-0.0023}}}} & \\multicolumn{1}{>{}r}{\\textcolor[HTML]{000000}{\\fontsize{11}{11}\\selectfont{\\global\\setmainfont{DejaVu Sans}{-0.0014}}}} & \\multicolumn{1}{>{}r}{\\textcolor[HTML]{000000}{\\fontsize{11}{11}\\selectfont{\\global\\setmainfont{DejaVu Sans}{\\ 100\\%}}}} \\\\\n\n\n\n\n\n\\multicolumn{1}{>{}l}{\\textcolor[HTML]{000000}{\\fontsize{11}{11}\\selectfont{\\global\\setmainfont{DejaVu Sans}{Defect\\ tickets\\ \\%}}}} & \\multicolumn{1}{>{}r}{\\textcolor[HTML]{000000}{\\fontsize{11}{11}\\selectfont{\\global\\setmainfont{DejaVu Sans}{0.0060}}}} & \\multicolumn{1}{>{}r}{\\textcolor[HTML]{000000}{\\fontsize{11}{11}\\selectfont{\\global\\setmainfont{DejaVu Sans}{0.0049}}}} & \\multicolumn{1}{>{}r}{\\textcolor[HTML]{000000}{\\fontsize{11}{11}\\selectfont{\\global\\setmainfont{DejaVu Sans}{0.0070}}}} & \\multicolumn{1}{>{}r}{\\textcolor[HTML]{000000}{\\fontsize{11}{11}\\selectfont{\\global\\setmainfont{DejaVu Sans}{\\ 100\\%}}}} \\\\\n\n\n\n\n\n\\multicolumn{1}{>{}l}{\\textcolor[HTML]{000000}{\\fontsize{11}{11}\\selectfont{\\global\\setmainfont{DejaVu Sans}{Degree\\ centrality\\ (within-person)}}}} & \\multicolumn{1}{>{}r}{\\textcolor[HTML]{000000}{\\fontsize{11}{11}\\selectfont{\\global\\setmainfont{DejaVu Sans}{-0.0023}}}} & \\multicolumn{1}{>{}r}{\\textcolor[HTML]{000000}{\\fontsize{11}{11}\\selectfont{\\global\\setmainfont{DejaVu Sans}{-0.0040}}}} & \\multicolumn{1}{>{}r}{\\textcolor[HTML]{000000}{\\fontsize{11}{11}\\selectfont{\\global\\setmainfont{DejaVu Sans}{-0.0006}}}} & \\multicolumn{1}{>{}r}{\\textcolor[HTML]{000000}{\\fontsize{11}{11}\\selectfont{\\global\\setmainfont{DejaVu Sans}{\\ 100\\%}}}} \\\\\n\n\n\n\n\n\\multicolumn{1}{>{}l}{\\textcolor[HTML]{000000}{\\fontsize{11}{11}\\selectfont{\\global\\setmainfont{DejaVu Sans}{Degree\\ centrality}}}} & \\multicolumn{1}{>{}r}{\\textcolor[HTML]{000000}{\\fontsize{11}{11}\\selectfont{\\global\\setmainfont{DejaVu Sans}{-0.0040}}}} & \\multicolumn{1}{>{}r}{\\textcolor[HTML]{000000}{\\fontsize{11}{11}\\selectfont{\\global\\setmainfont{DejaVu Sans}{-0.0063}}}} & \\multicolumn{1}{>{}r}{\\textcolor[HTML]{000000}{\\fontsize{11}{11}\\selectfont{\\global\\setmainfont{DejaVu Sans}{-0.0015}}}} & \\multicolumn{1}{>{}r}{\\textcolor[HTML]{000000}{\\fontsize{11}{11}\\selectfont{\\global\\setmainfont{DejaVu Sans}{\\ 100\\%}}}} \\\\\n\n\n\n\n\n\\multicolumn{1}{>{}l}{\\textcolor[HTML]{000000}{\\fontsize{11}{11}\\selectfont{\\global\\setmainfont{DejaVu Sans}{Comments\\ per\\ PR\\ (within-person)}}}} & \\multicolumn{1}{>{}r}{\\textcolor[HTML]{000000}{\\fontsize{11}{11}\\selectfont{\\global\\setmainfont{DejaVu Sans}{0.0046}}}} & \\multicolumn{1}{>{}r}{\\textcolor[HTML]{000000}{\\fontsize{11}{11}\\selectfont{\\global\\setmainfont{DejaVu Sans}{0.0037}}}} & \\multicolumn{1}{>{}r}{\\textcolor[HTML]{000000}{\\fontsize{11}{11}\\selectfont{\\global\\setmainfont{DejaVu Sans}{0.0054}}}} & \\multicolumn{1}{>{}r}{\\textcolor[HTML]{000000}{\\fontsize{11}{11}\\selectfont{\\global\\setmainfont{DejaVu Sans}{\\ 100\\%}}}} \\\\\n\n\n\n\n\n\\multicolumn{1}{>{}l}{\\textcolor[HTML]{000000}{\\fontsize{11}{11}\\selectfont{\\global\\setmainfont{DejaVu Sans}{Comments\\ per\\ PR}}}} & \\multicolumn{1}{>{}r}{\\textcolor[HTML]{000000}{\\fontsize{11}{11}\\selectfont{\\global\\setmainfont{DejaVu Sans}{0.0098}}}} & \\multicolumn{1}{>{}r}{\\textcolor[HTML]{000000}{\\fontsize{11}{11}\\selectfont{\\global\\setmainfont{DejaVu Sans}{0.0075}}}} & \\multicolumn{1}{>{}r}{\\textcolor[HTML]{000000}{\\fontsize{11}{11}\\selectfont{\\global\\setmainfont{DejaVu Sans}{0.0120}}}} & \\multicolumn{1}{>{}r}{\\textcolor[HTML]{000000}{\\fontsize{11}{11}\\selectfont{\\global\\setmainfont{DejaVu Sans}{\\ 100\\%}}}} \\\\\n\n\n\n\n\n\\multicolumn{1}{>{}l}{\\textcolor[HTML]{000000}{\\fontsize{11}{11}\\selectfont{\\global\\setmainfont{DejaVu Sans}{Avg.\\ coding\\ days/week\\ ×\\ Month}}}} & \\multicolumn{1}{>{}r}{\\textcolor[HTML]{000000}{\\fontsize{11}{11}\\selectfont{\\global\\setmainfont{DejaVu Sans}{-0.0047}}}} & \\multicolumn{1}{>{}r}{\\textcolor[HTML]{000000}{\\fontsize{11}{11}\\selectfont{\\global\\setmainfont{DejaVu Sans}{-0.0098}}}} & \\multicolumn{1}{>{}r}{\\textcolor[HTML]{000000}{\\fontsize{11}{11}\\selectfont{\\global\\setmainfont{DejaVu Sans}{-0.0001}}}} & \\multicolumn{1}{>{}r}{\\textcolor[HTML]{000000}{\\fontsize{11}{11}\\selectfont{\\global\\setmainfont{DejaVu Sans}{\\ 97\\%}}}} \\\\\n\n\n\n\n\n\\multicolumn{1}{>{}l}{\\textcolor[HTML]{000000}{\\fontsize{11}{11}\\selectfont{\\global\\setmainfont{DejaVu Sans}{Total\\ merged\\ PRs\\ ×\\ Month}}}} & \\multicolumn{1}{>{}r}{\\textcolor[HTML]{000000}{\\fontsize{11}{11}\\selectfont{\\global\\setmainfont{DejaVu Sans}{-0.0007}}}} & \\multicolumn{1}{>{}r}{\\textcolor[HTML]{000000}{\\fontsize{11}{11}\\selectfont{\\global\\setmainfont{DejaVu Sans}{-0.0017}}}} & \\multicolumn{1}{>{}r}{\\textcolor[HTML]{000000}{\\fontsize{11}{11}\\selectfont{\\global\\setmainfont{DejaVu Sans}{0.0003}}}} & \\multicolumn{1}{>{}r}{\\textcolor[HTML]{000000}{\\fontsize{11}{11}\\selectfont{\\global\\setmainfont{DejaVu Sans}{\\ 90\\%}}}} \\\\\n\n\n\n\n\n\\multicolumn{1}{>{}l}{\\textcolor[HTML]{000000}{\\fontsize{11}{11}\\selectfont{\\global\\setmainfont{DejaVu Sans}{Defect\\ tickets\\ \\%\\ ×\\ Month}}}} & \\multicolumn{1}{>{}r}{\\textcolor[HTML]{000000}{\\fontsize{11}{11}\\selectfont{\\global\\setmainfont{DejaVu Sans}{-0.0001}}}} & \\multicolumn{1}{>{}r}{\\textcolor[HTML]{000000}{\\fontsize{11}{11}\\selectfont{\\global\\setmainfont{DejaVu Sans}{-0.0003}}}} & \\multicolumn{1}{>{}r}{\\textcolor[HTML]{000000}{\\fontsize{11}{11}\\selectfont{\\global\\setmainfont{DejaVu Sans}{0.0001}}}} & \\multicolumn{1}{>{}r}{\\textcolor[HTML]{000000}{\\fontsize{11}{11}\\selectfont{\\global\\setmainfont{DejaVu Sans}{\\ 78\\%}}}} \\\\\n\n\n\n\n\n\\multicolumn{1}{>{}l}{\\textcolor[HTML]{000000}{\\fontsize{11}{11}\\selectfont{\\global\\setmainfont{DejaVu Sans}{Degree\\ centrality\\ ×\\ Month}}}} & \\multicolumn{1}{>{}r}{\\textcolor[HTML]{000000}{\\fontsize{11}{11}\\selectfont{\\global\\setmainfont{DejaVu Sans}{-0.0001}}}} & \\multicolumn{1}{>{}r}{\\textcolor[HTML]{000000}{\\fontsize{11}{11}\\selectfont{\\global\\setmainfont{DejaVu Sans}{-0.0005}}}} & \\multicolumn{1}{>{}r}{\\textcolor[HTML]{000000}{\\fontsize{11}{11}\\selectfont{\\global\\setmainfont{DejaVu Sans}{0.0002}}}} & \\multicolumn{1}{>{}r}{\\textcolor[HTML]{000000}{\\fontsize{11}{11}\\selectfont{\\global\\setmainfont{DejaVu Sans}{\\ 71\\%}}}} \\\\\n\n\n\n\n\n\\multicolumn{1}{>{}l}{\\textcolor[HTML]{000000}{\\fontsize{11}{11}\\selectfont{\\global\\setmainfont{DejaVu Sans}{Comments\\ per\\ PR\\ ×\\ Month}}}} & \\multicolumn{1}{>{}r}{\\textcolor[HTML]{000000}{\\fontsize{11}{11}\\selectfont{\\global\\setmainfont{DejaVu Sans}{0.0001}}}} & \\multicolumn{1}{>{}r}{\\textcolor[HTML]{000000}{\\fontsize{11}{11}\\selectfont{\\global\\setmainfont{DejaVu Sans}{-0.0004}}}} & \\multicolumn{1}{>{}r}{\\textcolor[HTML]{000000}{\\fontsize{11}{11}\\selectfont{\\global\\setmainfont{DejaVu Sans}{0.0005}}}} & \\multicolumn{1}{>{}r}{\\textcolor[HTML]{000000}{\\fontsize{11}{11}\\selectfont{\\global\\setmainfont{DejaVu Sans}{\\ 59\\%}}}} \\\\\n\n\\ascline{1.5pt}{666666}{1-5}\n\n\n\n\\multicolumn{5}{>{}l}{\\textcolor[HTML]{000000}{\\fontsize{11}{11}\\selectfont{\\global\\setmainfont{DejaVu Sans}{Posterior\\ Median:\\ The\\ median\\ of\\ the\\ posterior\\ probability\\ density\\ for\\ the\\ parameter\\ is\\ used\\ as\\ the\\ parameter\\ point\\ estimate.\\ 95\\%\\ HDI:\\ The\\ 95\\%\\ highest\\ density\\ interval\\ is\\ the\\ region\\ of\\ the\\ posterior\\ distribution\\ with\\ the\\ 95\\%\\ most\\ probable\\ values\\ for\\ the\\ parameter.\\ Sign\\ Probability:\\ The\\ proportion\\ of\\ the\\ posterior\\ distribution\\ that\\ has\\ the\\ same\\ sign\\ (direction)\\ as\\ the\\ point\\ estimate.}}}} \\\\\n\n\n\n\n\n\\end{longtable}\n\n\n\n\\arrayrulecolor[HTML]{000000}\n\n\\global\\setlength{\\arrayrulewidth}{\\Oldarrayrulewidth}\n\n\\global\\setlength{\\tabcolsep}{\\Oldtabcolsep}\n\n\\renewcommand*{\\arraystretch}{1}\n```\n\n:::\n:::\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n![Effect of average coding days per week on cycle time. Background hexagons represent density of data, with darker colors indicating greater density. Lines are median posterior expectations, with 95% credible interval ribbons.](plots/Plot Full growth model with linear predictors interacting-5.png){#fig-codingdays}\n\nMore merged PRs was associated with lower cycle time for both individual average differences and within-person differences. This effect also may get stronger across the year with 90% of the posterior in this direction (@fig-mergedprs). \n\n![Effect of merged PRs on cycle time. Background hexagons represent density of data, with darker colors indicating greater density. Lines are median posterior expectations, with 95% credible interval ribbons.](plots/Plot Full growth model with linear predictors interacting-6.png){#fig-mergedprs}\n\nThe percent of defect tickets showed a negative association with cycle time for within-person deviations and a positive association for individual differences. In other words, individuals who tended to have more defect tickets as a proportion of their work across the course of the year also tended to have longer cycle times. However, for any given person, and increase in the proportion of defect tickets in a month was associated with lower cycle times (@fig-defecttickets). The interaction with month number for this effect was centered close to zero, with only 78% of the posterior in the negative direction with a fairly narrow distribution around zero (95% HDI = [-0.0003, 0.0001]).\n\n![Effect of percent defect tickets on cycle time. Background hexagons represent density of data, with darker colors indicating greater density. Lines are median posterior expectations, with 95% credible interval ribbons.](plots/Plot Full growth model with linear predictors interacting-7.png){#fig-defecttickets}\n\nDegree centrality, both on average across the year individual differences and within-person deviations, showed a negative association with cycle time (@fig-degree). In other words, individuals who on average contribute code to PRs that have a lot of other contributors tend to have lower cycle times for tickets they own. Similarly, when individuals' collaboration on PRs increases in a given month, their cycle time tends to go down. This effect does not unambiguously strengthen or weaken across the year with 71% of the posterior for the interaction effect having negative sign with a fairly narrow distribution around zero (95% HDI = [-0.0005, 0.0002]).\n\n![Effect of degree centrality on cycle time. Background hexagons represent density of data, with darker colors indicating greater density. Lines are median posterior expectations, with 95% credible interval ribbons.](plots/Plot Full growth model with linear predictors interacting-8.png){#fig-degree}\n\nFinally, the number of comments per PR showed a positive association with cycle time. Individuals who tended to garner more comments on their PRs also tended to have higher cycle times, and within a given month, a higher number of comments per PR relative to a person's average was also associated with higher cycle times (@fig-comments). This effect also does not unambiguously strengthen or weaken across the year with 59% of the posterior for the interaction effect having negative sign with a fairly narrow distribution around zero (95% HDI = [-0.0004, 0.0005]). \n\n![Effect of comments per PR on cycle time. Background hexagons represent density of data, with darker colors indicating greater density. Lines are median posterior expectations, with 95% credible interval ribbons.](plots/Plot Full growth model with linear predictors interacting-9.png){#fig-comments}\n\n# Limitations\n\nFactors outside our control that organizations can control to increase the reliability and validity of their cycle time data include establishing a systematic approach to ticket use. Even within an organization, individual teams may have different cultures regarding when it is appropriate to open and close a ticket. If one is using cycle time as a metric to gauge team velocity, it may be ideal to open and close tickets based on consistent criteria across teams. For example, opening a ticket after a piece of work is completed, and then closing it soon after, does not provide a good measure of how long that work took to complete. Distinguishing ticket types may also help. Here we were able to separate tickets into defect and non-defect tickets, but there are certainly more granular ways of categorizing tickets. These categories, in an analysis like the above, can help ensure the analytic model is comparing like with like. \n\n# Discussion\n\nBetter characterizing how teams move through their ticketing processes, and what factors impact ticket velocity, can suggest initial starting places for interventions to improve those times. However, it is just as important to note that certain software engineering outcomes may require decreasing the closure of tickets. These goal-directed decisions about setting metrics targets cannot be answered by the present analysis, but require greater organizational context, and the addition of more goal-aligned outcome measures. For example, imagine that the software developers within an organization rapidly triage and close defect tickets, showing a very low cycle time. However, the quality of those closures is poor, as measured by the longevity of the “fix,” and further, interrelated defects. For an organization to more holistically understand the state of “how we handle defects” and identify potential changes, it would be necessary to not simply monitor the velocity of defect tickets but to establish other metrics around the depth and coverage of a solution and the “lifecycle” of defects. Qualitative work (e.g., in-depth interviews or post-mortems with engineers who handle these scenarios) may also reveal unmeasured and unnoticed organizational features – for example, a cultural belief that working on defect tickets is less important than feature tickets, and associated pressure that developers experience from management to close them quickly.\n\nThis type of example underlines the classic measurement argument that no single measure should become an overarching target, devoid of context. In our previous work, we have echoed other organizational researchers in proposing that the success or failure of interventions seeking to make a measurable change in a given organization can be determined in part by the psychological and behavioral expectations, contexts and experiences of people (Brocker & Sherman, 2019; Hicks, 2024). In a mixed-methods observational study with software developers, we also noted that individuals can voice high agreement with the perceived utility of tracking software processes, while also reporting high rates of perceived “pitfalls” in the usage of those metrics (Hicks, Lee & Ramsey, 2023). While the present analysis concerns how to characterize cycle time and connections between other metrics operationalized from software development workflows, this investigation does not establish nor measure specific organizational goals and their attainment. A future line of research might incorporate measures of individual, team, and organizational goals with system measures such as cycle time and provide greater evidence about how changes in cycle time impact organizational goal achievement.\n\nHowever, better understanding both what cycle time looks like within organizations, and how to explore cycle time, is still highly relevant to how we think about measuring software engineering work without using this measure as a gauge for goals. For example, our analysis demonstrates that there is considerable variation in the movement of tickets. Rather than establishing a single “ideal cycle time” to aim for, we establish that cycle times are an interesting outcome which associates with factors such as [x, y, z]. Coding days may be a particularly interesting intervention point for future studies to explore [........] \n\nIn this study, we were limited in the amount of organizational context that we could observe from ticketing and git data. For example, at a certain time of year an organization might implement a new planning process, a new promotion plan, or other organizational changes. Matching an analytical approach such as the current one, with a specific organization’s knowledge of their own planning cycles, investments, and other contextual details, could provide valuable insights about the efficacy and impact of organizational change on software development processes. In order to perform such an analysis, we have found that it is important to take into account [x, y, z]. \n\n\n# Related Work\n\n# Conclusions\n\n# References {.unnumbered}\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "\\usepackage{booktabs}\n\\usepackage{longtable}\n\\usepackage{array}\n\\usepackage{multirow}\n\\usepackage{wrapfig}\n\\usepackage{float}\n\\usepackage{colortbl}\n\\usepackage{pdflscape}\n\\usepackage{tabu}\n\\usepackage{threeparttable}\n\\usepackage{threeparttablex}\n\\usepackage[normalem]{ulem}\n\\usepackage{makecell}\n\\usepackage{xcolor}\n\\usepackage{fontspec}\n\\usepackage{multicol}\n\\usepackage{hhline}\n\\newlength\\Oldarrayrulewidth\n\\newlength\\Oldtabcolsep\n\\usepackage{hyperref}\n"
      ]
    },
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}