<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Archiving
and Interchange DTD v1.2 20190208//EN" "JATS-archivearticle1.dtd">

<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">

<front>


<article-meta>


<title-group>
<article-title>No Silver Bullets: Why Understanding Software Cycle Time
is Messy, Not Magic</article-title>
</title-group>

<contrib-group>
<contrib contrib-type="author" corresp="yes">
<contrib-id contrib-id-type="orcid">0000-0003-1735-1221</contrib-id>
<name>
<surname>Flournoy</surname>
<given-names>John C.</given-names>
</name>
<string-name>John C. Flournoy</string-name>
<degrees>Ph.D.</degrees>
<email>jcflournoyphd@pm.me</email>
<role vocab="https://credit.niso.org" vocab-term="conceptualization" vocab-term-identifier="https://credit.niso.org/contributor-roles/conceptualization/">Conceptualization</role>
<role vocab="https://credit.niso.org" vocab-term="data
curation" vocab-term-identifier="https://credit.niso.org/contributor-roles/data-curation/">Data
curation</role>
<role vocab="https://credit.niso.org" vocab-term="formal
analysis" vocab-term-identifier="https://credit.niso.org/contributor-roles/formal-analysis/">Formal
analysis</role>
<role vocab="https://credit.niso.org" vocab-term="investigation" vocab-term-identifier="https://credit.niso.org/contributor-roles/investigation/">Investigation</role>
<role vocab="https://credit.niso.org" vocab-term="methodology" vocab-term-identifier="https://credit.niso.org/contributor-roles/methodology/">Methodology</role>
<role vocab="https://credit.niso.org" vocab-term="visualization" vocab-term-identifier="https://credit.niso.org/contributor-roles/visualization/">Visualization</role>
<role vocab="https://credit.niso.org" vocab-term="writing – original
draft" vocab-term-identifier="https://credit.niso.org/contributor-roles/writing-original-draft/">Writing
– original draft</role>
<role vocab="https://credit.niso.org" vocab-term="writing – review &amp;
editing" vocab-term-identifier="https://credit.niso.org/contributor-roles/writing-review-editing/">Writing
– review &amp; editing</role>
<xref ref-type="aff" rid="aff-1">a</xref>
<xref ref-type="corresp" rid="cor-1">&#x002A;</xref>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0002-6909-6157</contrib-id>
<name>
<surname>Lee</surname>
<given-names>Carol S.</given-names>
</name>
<string-name>Carol S. Lee</string-name>
<degrees>Ph.D.</degrees>
<role vocab="https://credit.niso.org" vocab-term="conceptualization" vocab-term-identifier="https://credit.niso.org/contributor-roles/conceptualization/">Conceptualization</role>
<role vocab="https://credit.niso.org" vocab-term="data
curation" vocab-term-identifier="https://credit.niso.org/contributor-roles/data-curation/">Data
curation</role>
<role vocab="https://credit.niso.org" vocab-term="formal
analysis" vocab-term-identifier="https://credit.niso.org/contributor-roles/formal-analysis/">Formal
analysis</role>
<role vocab="https://credit.niso.org" vocab-term="investigation" vocab-term-identifier="https://credit.niso.org/contributor-roles/investigation/">Investigation</role>
<role vocab="https://credit.niso.org" vocab-term="methodology" vocab-term-identifier="https://credit.niso.org/contributor-roles/methodology/">Methodology</role>
<role vocab="https://credit.niso.org" vocab-term="writing – original
draft" vocab-term-identifier="https://credit.niso.org/contributor-roles/writing-original-draft/">Writing
– original draft</role>
<role vocab="https://credit.niso.org" vocab-term="writing – review &amp;
editing" vocab-term-identifier="https://credit.niso.org/contributor-roles/writing-review-editing/">Writing
– review &amp; editing</role>
<xref ref-type="aff" rid="aff-1">a</xref>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0009-0007-5657-1661</contrib-id>
<name>
<surname>Hicks</surname>
<given-names>Catherine M.</given-names>
</name>
<string-name>Catherine M. Hicks</string-name>
<degrees>Ph.D.</degrees>
<role vocab="https://credit.niso.org" vocab-term="conceptualization" vocab-term-identifier="https://credit.niso.org/contributor-roles/conceptualization/">Conceptualization</role>
<role vocab="https://credit.niso.org" vocab-term="funding
acquisition" vocab-term-identifier="https://credit.niso.org/contributor-roles/funding-acquisition/">Funding
acquisition</role>
<role vocab="https://credit.niso.org" vocab-term="investigation" vocab-term-identifier="https://credit.niso.org/contributor-roles/investigation/">Investigation</role>
<role vocab="https://credit.niso.org" vocab-term="methodology" vocab-term-identifier="https://credit.niso.org/contributor-roles/methodology/">Methodology</role>
<role vocab="https://credit.niso.org" vocab-term="project
administration" vocab-term-identifier="https://credit.niso.org/contributor-roles/project-administration/">Project
administration</role>
<role vocab="https://credit.niso.org" vocab-term="resources" vocab-term-identifier="https://credit.niso.org/contributor-roles/resources/">Resources</role>
<role vocab="https://credit.niso.org" vocab-term="supervision" vocab-term-identifier="https://credit.niso.org/contributor-roles/supervision/">Supervision</role>
<role vocab="https://credit.niso.org" vocab-term="writing – review &amp;
editing" vocab-term-identifier="https://credit.niso.org/contributor-roles/writing-review-editing/">Writing
– review &amp; editing</role>
<xref ref-type="aff" rid="aff-1">a</xref>
</contrib>
<contrib contrib-type="author">
<name>
<surname>Wu</surname>
<given-names>Maggie</given-names>
</name>
<string-name>Maggie Wu</string-name>
<degrees>M.S.</degrees>
<role vocab="https://credit.niso.org" vocab-term="conceptualization" vocab-term-identifier="https://credit.niso.org/contributor-roles/conceptualization/">Conceptualization</role>
<role vocab="https://credit.niso.org" vocab-term="data
curation" vocab-term-identifier="https://credit.niso.org/contributor-roles/data-curation/">Data
curation</role>
<role vocab="https://credit.niso.org" vocab-term="formal
analysis" vocab-term-identifier="https://credit.niso.org/contributor-roles/formal-analysis/">Formal
analysis</role>
<role vocab="https://credit.niso.org" vocab-term="investigation" vocab-term-identifier="https://credit.niso.org/contributor-roles/investigation/">Investigation</role>
<role vocab="https://credit.niso.org" vocab-term="methodology" vocab-term-identifier="https://credit.niso.org/contributor-roles/methodology/">Methodology</role>
<xref ref-type="aff" rid="aff-1">a</xref>
</contrib>
</contrib-group>
<aff id="aff-1">
<institution-wrap>
<institution>Pluralsight</institution>
</institution-wrap>

<city>Draper, UT</city>

<country>USA</country>



</aff>
<author-notes>
<corresp id="cor-1">jcflournoyphd@pm.me</corresp>
</author-notes>









<history></history>

<permissions>

<license license-type="creative-commons">
<ali:license_ref xmlns:ali="http://www.niso.org/schemas/ali/1.0/">https://creativecommons.org/licenses/by/4.0/</ali:license_ref>

</license>
</permissions>

<abstract>
<p>Understanding factors that influence software development velocity is
crucial for engineering teams and organizations, yet empirical evidence
at scale remains limited. A more robust understanding of the dynamics of
cycle time may help practitioners avoid pitfalls in relying on velocity
measures while evaluating software work. We analyze cycle time—a
widely-used metric measuring time from ticket creation to
completion—using a dataset of over 55,000 observations across 216
organizations. Through Bayesian hierarchical modeling that appropriately
separates individual and organizational variation, we examine how coding
time, task scoping, and collaboration patterns affect cycle time while
characterizing its substantial variability across contexts. We find
precise but modest associations between cycle time and factors including
coding days per week, number of merged pull requests, and degree of
collaboration. However, these effects are set against considerable
unexplained variation both between and within individuals. Our findings
suggest that while common workplace factors do influence cycle time in
expected directions, any single observation provides limited signal
about typical performance. This work demonstrates methods for analyzing
complex operational metrics at scale while highlighting potential
pitfalls in using such measurements to drive decision-making. We
conclude that improving software delivery velocity likely requires
systems-level thinking rather than individual-focused interventions.</p>
</abstract>
<kwd-group kwd-group-type="author">
<kwd>cycle time</kwd>
<kwd>productivity</kwd>
<kwd>software engineering</kwd>
<kwd>collaboration</kwd>
<kwd>coding time</kwd>
<kwd>task scoping</kwd>
<kwd>hierarchical modeling</kwd>
</kwd-group>




</article-meta>

</front>

<body>
<sec id="introduction">
  <title>1. Introduction</title>
  <p>Understanding the factors that affect the delivery of software at
  an organizational level offers businesses and engineering teams the
  knowledge to deliver value to users, maintain competitiveness, and
  improve developer experience. Given engineering teams’ fundamental
  role in software delivery, the velocity of their work—that is, the
  time it takes for task completion—has emerged as a focal point of
  empirical investigation, particularly through measures like cycle time
  which captures the duration between ticket opening and ticket closing.
  Moreover, cycle-time is seen by engineers as the most useful metric of
  engineering productivity according to a prominent industry report
  (<xref alt="Carey 2024" rid="ref-careyWhy70Engineers2024" ref-type="bibr">Carey
  2024</xref>).</p>
  <p>While cycle time is often treated as an indicator of productivity
  per se, the concept of productivity remains poorly specified in
  software engineering contexts, where outputs fundamentally differ from
  the more readily quantifiable measures used in traditional industrial
  production. Specific units of work are rarely identical across time
  for a person, within a team, or across teams. The interpretation of
  cycle time as a proxy for productivity therefore presents particular
  challenges because variations could reflect differences in work
  patterns, task assignment, task scoping, and organizational contexts
  rather than differences in some underlying rate of task
  completion.</p>
  <p>Nevertheless, the intuitive appeal of cycle time and its widespread
  use in practice make it a valuable focus for empirical investigation.
  The above-mentioned complexities necessitate sophisticated statistical
  methods to detect the unique impact of multiple factors, while
  carefully characterizing the variability practitioners can expect in
  day-to-day and month-to-month observations of cycle time. Through
  rigorous statistical modeling of longitudinal data across multiple
  organizations, we can both characterize its variability across
  real-world contexts, while demonstrating methodological approaches for
  analyzing such complex operational metrics. This analysis also allows
  us to detect systematic influences from factors commonly believed to
  affect developer productivity: task scoping, focused work time,
  collaboration, and time of year.</p>
  <p>Our investigation leverages a unique dataset comprising over 11,398
  contributors at 216 organizations across diverse industries. This work
  makes two primary contributions. First, we demonstrate a model for
  statistically investigating software activity data at both a larger
  and more longitudinal scale than previous empirical research, allowing
  us to characterize how cycle time varies across software development
  contexts (i.e., individuals, organizations, and variable process
  factors), using hierarchical modeling that appropriately separates
  individual and organizational variation, combined with the careful
  disaggregation of within- and between-person effects. This approach
  allows us both greater precision and nuance in describing effects as
  well as the ability to highlight potential pitfalls in using such
  measurements to drive decision-making. Second, we incorporate these
  multiple measures of process factors simultaneously to isolate unique
  effects, including a novel measure of collaboration operationalized as
  degree centrality, taking initial steps toward reflecting the impact
  of the interactive nature of software development in large-scale
  analyses of activity data.</p>
  <p>Our research questions are:</p>
  <p>RQ1. How do common workplace and software development process
  factors impact cycle time?</p>
  <p>RQ2. How much between- and within-person variation is there in
  cycle time?</p>
  <p>The paper proceeds as follows: We first review the literature on
  software productivity measurement, examining cycle time’s relationship
  to broader discussions of developer performance. We then present our
  methodology for analyzing cycle time variation using Bayesian
  hierarchical linear models. Our results examine both population-level
  effects and the substantial variation observed between individuals and
  organizations. We conclude by discussing implications for practice and
  future research directions.</p>
</sec>
<sec id="background">
  <title>2. Background</title>
  <sec id="productivity">
    <title>2.1 Productivity</title>
    <p>The use of cycle time in the academic and industry literature is
    almost always as part of a discussion of productivity. This may be
    in part because cycle time and related metrics are one of the only
    so-called objective quantitative windows we have into the process of
    software production (but note that self-reports of perceived
    productivity are also potentially valid measures of this process).
    For this reason, it behooves us to discuss the literature on
    productivity, even as we position the analyses in this report as
    specifically analyzing what we consider to be at best a very distal
    indicator of whatever it is people mean when they use the word
    “productivity.”</p>
    <p>Defining software team productivity and performance is a highly
    contentious exercise and many different definitions are given by
    both practitioners and researchers
    (<xref alt="Fraser et al. 2007" rid="ref-fraserNoSilverBullet2007" ref-type="bibr">Fraser
    et al. 2007</xref>;
    <xref alt="C. Hicks, Lee, and Ramsey 2023" rid="ref-hicksDeveloperThrivingFour2023" ref-type="bibr">C.
    Hicks, Lee, and Ramsey 2023</xref>;
    <xref alt="C. M. Hicks, Lee, and Ramsey 2024" rid="ref-hicksDeveloperThrivingFour2024" ref-type="bibr">C.
    M. Hicks, Lee, and Ramsey 2024</xref>;
    <xref alt="Murphy-Hill et al. 2021" rid="ref-murphy-hillWhatPredictsSoftware2021" ref-type="bibr">Murphy-Hill
    et al. 2021</xref>;
    <xref alt="Sadowski, Storey, and Feldt 2019" rid="ref-sadowskiSoftwareDevelopmentProductivity2019" ref-type="bibr">Sadowski,
    Storey, and Feldt 2019</xref>). Perceptions of what counts as
    successful software work can meaningfully differ across individuals
    and roles, as when engineering managers tend to focus on long-term
    outcomes and individual developers focus on activity, for example
    (<xref alt="C. Hicks, Lee, and Ramsey 2023" rid="ref-hicksDeveloperThrivingFour2023" ref-type="bibr">C.
    Hicks, Lee, and Ramsey 2023</xref>;
    <xref alt="Storey, Houck, and Zimmermann 2022b" rid="ref-storeyHowDevelopersManagers2022b" ref-type="bibr">Storey,
    Houck, and Zimmermann 2022b</xref>). Across workplaces, measures of
    time have been frequently used to assess productivity even while the
    shortcomings of these measures are also widely acknowledged
    (<xref alt="Griffin 1993" rid="ref-griffinMetricsMeasuringProduct1993" ref-type="bibr">Griffin
    1993</xref>). Alternative measures include self-ratings or peer
    evaluations
    (<xref alt="Murphy-Hill et al. 2021" rid="ref-murphy-hillWhatPredictsSoftware2021" ref-type="bibr">Murphy-Hill
    et al. 2021</xref>;
    <xref alt="Ramírez and Nembhard 2004" rid="ref-ramirezMeasuringKnowledgeWorker2004" ref-type="bibr">Ramírez
    and Nembhard 2004</xref>) and in software engineering,
    operationalizations of code work such as lines of code
    (<xref alt="Blackburn, Scudder, and Van Wassenhove 1996" rid="ref-blackburnImprovingSpeedProductivity1996" ref-type="bibr">Blackburn,
    Scudder, and Van Wassenhove 1996</xref>;
    <xref alt="Maxwell, Van Wassenhove, and Dutta 1996" rid="ref-maxwellSoftwareDevelopmentProductivity1996" ref-type="bibr">Maxwell,
    Van Wassenhove, and Dutta 1996</xref>). These have obvious
    limitations in that the meaning of a particular unit for any of
    these metrics may be different depending on context
    (<xref alt="Sadowski, Storey, and Feldt 2019" rid="ref-sadowskiSoftwareDevelopmentProductivity2019" ref-type="bibr">Sadowski,
    Storey, and Feldt 2019</xref>). Some researchers have sought
    solutions to this problem by asking individuals to rate their own
    level of, or satisfaction with, productivity
    (<xref alt="C. Hicks, Lee, and Ramsey 2023" rid="ref-hicksDeveloperThrivingFour2023" ref-type="bibr">C.
    Hicks, Lee, and Ramsey 2023</xref>;
    <xref alt="Storey et al. 2021" rid="ref-storeyTheorySoftwareDeveloper2021" ref-type="bibr">Storey
    et al. 2021</xref>). While it is plausible that perceived
    productivity could be a good indicator of productivity, it is still
    not free of the context effects that are often levied as critiques
    of more “objective” metrics, and self-report, while perhaps
    overcoming some shortcomings of other methods, bring with them
    another set of measurement issues.</p>
    <p>The difficulty of quantifying productivity arises even prior to
    the step of choosing one or several indicators. There is often a
    lack of clear distinction between production (quantity of output
    regardless of resources provided), productivity (quantity of output
    given the resources provided), and performance (flexibility,
    adaptability, dependability, sustainability, and quality of output
    over time)
    (<xref alt="C. Hicks, Lee, and Ramsey 2023" rid="ref-hicksDeveloperThrivingFour2023" ref-type="bibr">C.
    Hicks, Lee, and Ramsey 2023</xref>). As any software developer will
    be aware, this conceptual complexity is likely the result of the
    various ways their work counts for professional development, for the
    success of the product, and for simply meeting deadlines. This piece
    of research does not aim to solve the issue of how we conceive of
    productivity but instead seeks to take a deep look at a single
    popular metric in order to showcase, first, the many factors
    (themselves, a subset of possible influences of productivity) that
    affect cycle time, and second, how observing this metric over time
    informs our view of the ways cycle time varies both within and
    between people. These views will be helpful both to illuminate
    specific properties of cycle time as a measure but also to
    demonstrate how one might approach an in-depth analysis of either
    “objective” or self-report metrics of productivity.</p>
  </sec>
  <sec id="evaluating-individual-developer-performance">
    <title>2.2 Evaluating individual developer performance</title>
    <p>Given the difficulty of appropriately defining productivity, the
    many metrics that purport to measure it, and the potential cost to
    an individual (e.g., career, reputation) of being measured, it is
    understandable that software developers have an ambivalent stance
    about the measurement of both work activity and productivity, that
    metrics adoption can be fraught with failure
    (<xref alt="Bouwers, van Deursen, and Visser 2013" rid="ref-bouwersSoftwareMetricsPitfalls2013" ref-type="bibr">Bouwers,
    van Deursen, and Visser 2013</xref>), and that social or
    socio-technical affordances can be strongly associated with
    self-reported productivity and necessary to obtain a full picture of
    software team experience beyond project and technical metrics
    (<xref alt="C. Hicks, Lee, and Ramsey 2023" rid="ref-hicksDeveloperThrivingFour2023" ref-type="bibr">C.
    Hicks, Lee, and Ramsey 2023</xref>;
    <xref alt="Murphy-Hill et al. 2021" rid="ref-murphy-hillWhatPredictsSoftware2021" ref-type="bibr">Murphy-Hill
    et al. 2021</xref>).</p>
    <p>Developers whose teams use metrics generally see those metrics as
    helpful, and developers who report agreement which team-level
    metrics are measured tend to report higher perceived productivity
    (<xref alt="C. Hicks, Lee, and Ramsey 2023" rid="ref-hicksDeveloperThrivingFour2023" ref-type="bibr">C.
    Hicks, Lee, and Ramsey 2023</xref>;
    <xref alt="C. M. Hicks, Lee, and Ramsey 2024" rid="ref-hicksDeveloperThrivingFour2024" ref-type="bibr">C.
    M. Hicks, Lee, and Ramsey 2024</xref>). However, paired with this
    are some indicators of uncertainty in whether and how metrics are
    being tracked or used
    (<xref alt="C. Hicks, Lee, and Ramsey 2023" rid="ref-hicksDeveloperThrivingFour2023" ref-type="bibr">C.
    Hicks, Lee, and Ramsey 2023</xref>), there is often backlash against
    any attempt to define or popularize such metrics
    (<xref alt="Bruneaux 2024" rid="ref-bruneauxWhatMcKinseyHas2024" ref-type="bibr">Bruneaux
    2024</xref>;
    <xref alt="Chhuneja 2024" rid="ref-chhunejaWhy50Developers2024" ref-type="bibr">Chhuneja
    2024</xref>;
    <xref alt="Coté 2023" rid="ref-coteOnlyPeopleWho2023" ref-type="bibr">Coté
    2023</xref>;
    <xref alt="Finster 2023" rid="ref-finster5MinuteDevOps2023" ref-type="bibr">Finster
    2023</xref>;
    <xref alt="Orosz 2024a" rid="ref-oroszMeasuringDeveloperProductivity2024" ref-type="bibr">Orosz
    2024a</xref>,
    <xref alt="2024b" rid="ref-oroszMeasuringDeveloperProductivity2024a" ref-type="bibr">2024b</xref>;
    <xref alt="Riggins 2023" rid="ref-rigginsWhatMcKinseyGot2023" ref-type="bibr">Riggins
    2023</xref>;
    <xref alt="Terhorst-North 2023b" rid="ref-terhorst-northMcKinseyDeveloperProductivity2023" ref-type="bibr">Terhorst-North
    2023b</xref>,
    <xref alt="2023a" rid="ref-terhorst-northWorstProgrammerKnow2023" ref-type="bibr">2023a</xref>;
    <xref alt="Walker 2023b" rid="ref-walkerConsUsingSPACE2023" ref-type="bibr">Walker
    2023b</xref>,
    <xref alt="2023a" rid="ref-walkerEverythingWrongDORA2023" ref-type="bibr">2023a</xref>),
    and there is concern about mismeasurement by managers inside of
    organizations
    (<xref alt="C. Hicks, Lee, and Ramsey 2023" rid="ref-hicksDeveloperThrivingFour2023" ref-type="bibr">C.
    Hicks, Lee, and Ramsey 2023</xref>), which is part of a broader
    discussion of surveillance and the discontent it can generate for
    workers
    (<xref alt="Ball 2010" rid="ref-ballWorkplaceSurveillanceOverview2010" ref-type="bibr">Ball
    2010</xref>;
    <xref alt="Grisold et al. 2024" rid="ref-grisoldDigitalSurveillanceOrganizations2024" ref-type="bibr">Grisold
    et al. 2024</xref>;
    <xref alt="Mettler 2024" rid="ref-mettlerConnectedWorkplaceCharacteristics2024" ref-type="bibr">Mettler
    2024</xref>). More troublingly, recent scholarship on sociocognitive
    experiences in the workplace has proposed that severe experiences of
    employees being treated by an organization as a “mere tool” or a
    resource may create organizational dehumanization leading to many
    negative impacts on both well-being measures and on work outcomes
    (<xref alt="Caesens et al. 2017" rid="ref-caesensPerceivedOrganizationalSupport2017" ref-type="bibr">Caesens
    et al. 2017</xref>;
    <xref alt="Lagios et al. 2022" rid="ref-lagiosExplainingNegativeConsequences2022" ref-type="bibr">Lagios
    et al. 2022</xref>). Moreover, there is evidence that metrics might
    be used differently depending on a person’s visible identities (e.g,
    <xref alt="Quadlin 2018" rid="ref-quadlinMarkWomansRecord2018" ref-type="bibr">Quadlin
    2018</xref>).</p>
    <p>Likewise, scholarship on employee perceptions of organizational
    and procedural justice have long documented that when employees
    perceive a context of organizational injustice, this can exacerbate
    or redefine experiences of organizational decision-making and
    performance evaluations
    (<xref alt="Brockner et al. 1994" rid="ref-brocknerInteractiveEffectsProcedural1994" ref-type="bibr">Brockner
    et al. 1994</xref>,
    <xref alt="2007" rid="ref-brocknerProceduralFairnessOutcome2007" ref-type="bibr">2007</xref>).
    Given such larger organizational dynamics, it is likely that whether
    or not software metrics adoptions are successful is impacted not
    only by the choice of metric but also by larger contextual factors
    such as teams’ sociocognitive experiences and expectations around
    measurement, and the psychological affordances of their environments
    which may or may not allow them to address measurement concerns
    (<xref alt="C. M. Hicks 2024" rid="ref-hicksPsychologicalAffordancesCan2024" ref-type="bibr">C.
    M. Hicks 2024</xref>).</p>
    <p>We lack holistic evidence about what practitioners in software
    development believe about developer performance and ability; some
    reports from researchers with samples at large technology companies
    have suggested both that definitions of productivity can vary widely
    between managers and developers, and that software developers
    perceive many potential trade-offs between types of technical goals,
    e.g. that quality and speed may be unattainable together
    (<xref alt="Storey, Houck, and Zimmermann 2022a" rid="ref-storeyHowDevelopersManagers2022" ref-type="bibr">Storey,
    Houck, and Zimmermann 2022a</xref>).</p>
    <p>One “industry myth” which is referenced frequently in
    practitioner commentary is the idea of a “10x engineer”: this
    position alleges that some small outlier population of software
    developers consistently outperform others on key development tasks.
    Potentially springing from small case studies examining a handful of
    developers’ time spent solving small laboratory tasks
    (<xref alt="Sackman, Erikson, and Grant 1968" rid="ref-sackmanExploratoryExperimentalStudies1968" ref-type="bibr">Sackman,
    Erikson, and Grant 1968</xref>; discussed in
    <xref alt="Nichols 2019" rid="ref-nicholsEndMythIndividual2019" ref-type="bibr">Nichols
    2019</xref>), this “law” was generalized from only twelve
    individuals, uses time spent on the tasks as an estimate of both
    effort and cost, has failed to replicate in larger examinations of
    developer performance on similar tasks, and failed to acknowledge
    large within-individual variation in task performance
    (<xref alt="Nichols 2019" rid="ref-nicholsEndMythIndividual2019" ref-type="bibr">Nichols
    2019</xref>;
    <xref alt="Shrikanth et al. 2021" rid="ref-shrikanthAssessingPractitionerBeliefs2021" ref-type="bibr">Shrikanth
    et al. 2021</xref>).</p>
    <p>Nevertheless, the idea that “10x engineers” exist and that some
    individuals in software engineering outperform others by a “rule” of
    10x has been cited often and codified in industry commentary, (e.g.,
    <xref alt="Brooks 1975" rid="ref-brooksMythicalManmonthEssays1975" ref-type="bibr">Brooks
    1975</xref>). Modern commentary on this idea frequently refers to it
    as a myth, but it is also discussed as a potentially real
    phenomenon<xref ref-type="fn" rid="fn1">1</xref>. In our previous
    work, we have noted that some software practitioners hold
    field-specific ability beliefs that software development success and
    productivity is attributable to a quality of “innate brilliance”,
    and that this belief among practitioners may create a higher
    likelihood of experiencing threat and anxiety in the face of rapid
    role change and technological shifts to developer workflows
    (<xref alt="C. M. Hicks, Lee, and Foster-Marks 2024" rid="ref-hicksNewDeveloperAI2024" ref-type="bibr">C.
    M. Hicks, Lee, and Foster-Marks 2024</xref>). Broad reviews on
    drivers of software development outcomes, particularly frictions in
    the form of team “debt,” also suggest that social-psychological
    aspects of shared work processes may be a significant contributor to
    these outcomes separate from individual performance
    (<xref alt="Ahmad and Gustavsson 2024" rid="ref-ahmadPandorasBoxSocial2024" ref-type="bibr">Ahmad
    and Gustavsson 2024</xref>).</p>
    <p>Despite some recognition that the 10x engineer is a problematic
    concept, the conflictual measurement of productivity and its use as
    a tool of surveillance and punishment contra the interests of
    individual contributors (but to the benefit, at least ostensibly, to
    a company’s profitability) continues with full-throated glee. A
    recent unpublished study claims that nearly 10% of engineers
    contribute almost no work; that is to say, it raises the boogeyman
    of the 0.1x engineer as the 10x engineer’s
    inverse<xref ref-type="fn" rid="fn2">2</xref>(<xref alt="Obstbaum and Denisov-Blanch, n.d." rid="ref-obstbaumOngoingResearchSoftware" ref-type="bibr">Obstbaum
    and Denisov-Blanch, n.d.</xref>). The measure of productivity used
    is something half-way between an objective measurement and
    self-report: an unspecified machine-learning model trained on expert
    ratings of the quality of, and work necessary to complete, 70
    commits
    (<xref alt="Denisov-Blanch et al. 2024" rid="ref-denisov-blanchPredictingExpertEvaluations2024" ref-type="bibr">Denisov-Blanch
    et al. 2024</xref>). Unlike prior work, this method lacks both the
    transparency of “objective” measures and the temperance of
    self-report measures.</p>
    <p>In taking a deep dive into cycle time, this project does not
    address every implementation challenge and organizational affordance
    that may define whether organizations can ensure a healthy and
    sustainable practice around the measurement of work activity.
    However, we believe that a more robust understanding of the dynamics
    of cycle time may help practitioners avoid pitfalls in relying on
    velocity measures while evaluating software work. We hope to
    describe the complexity in a way that at least adds some clarity and
    aligns with the experience of software developers in practice.</p>
  </sec>
  <sec id="cycle-time">
    <title>2.3 Cycle Time</title>
    <p>Because lower cycle times are thought to indicate faster delivery
    times and more efficient software processes, cycle time has long
    been taken as a key indicator of team health, developer
    productivity, and team efficiency
    (<xref alt="Clincy 2003" rid="ref-clincySoftwareDevelopmentProductivity2003" ref-type="bibr">Clincy
    2003</xref>;
    <xref alt="Agrawal and Chari 2007" rid="ref-agrawalSoftwareEffortQuality2007" ref-type="bibr">Agrawal
    and Chari 2007</xref>;
    <xref alt="Carmel 1995" rid="ref-carmelCycleTimePackaged1995" ref-type="bibr">Carmel
    1995</xref>;
    <xref alt="Evers, Oehler, and Tucker 1998" rid="ref-eversImprovingEngineeringProductivity1998" ref-type="bibr">Evers,
    Oehler, and Tucker 1998</xref>;
    <xref alt="Gupta and Souder 1998" rid="ref-guptaKeyDriversReduced1998" ref-type="bibr">Gupta
    and Souder 1998</xref>;
    <xref alt="Nan and Harter 2009" rid="ref-nanImpactBudgetSchedule2009" ref-type="bibr">Nan
    and Harter 2009</xref>;
    <xref alt="Ruvimova et al. 2022" rid="ref-ruvimovaExploratoryStudyProductivity2022" ref-type="bibr">Ruvimova
    et al. 2022</xref>;
    <xref alt="Sadowski and Zimmermann 2019" rid="ref-sadowskiRethinkingProductivitySoftware2019" ref-type="bibr">Sadowski
    and Zimmermann 2019</xref>;
    <xref alt="Trendowicz and Münch 2009" rid="ref-trendowiczChapter6Factors2009" ref-type="bibr">Trendowicz
    and Münch 2009</xref>). This suggests that understanding factors
    that influence cycle time may lead to insights into factors that are
    important to understand for understanding productivity in general.
    At minimum, examining cycle time can provide a description of the
    complexity of factors that impact this popular metric.</p>
    <p>Cycle time examines one aspect of the speed of software delivery
    by measuring the time between task start and task delivery. It has
    consistently been described by industry research as one of the best
    and most trusted metrics for software productivity
    (<xref alt="Carey 2024" rid="ref-careyWhy70Engineers2024" ref-type="bibr">Carey
    2024</xref>). In this same report, similar metrics also showed
    preference, such as lead time, deploy frequency, and change failure
    rate. The common thread across these metrics is that the unit of
    work is defined by the team or company in relation to goals that
    serve the strategic interests of the project. While there is a good
    deal of nuance with respect to what goes into setting these units
    up, they are both discrete (and so “objective”-feeling) but also
    defined, often collaboratively, with respect to the outcomes that
    matter. This is in contrast to lines of code, for example, which may
    or may not be relevant to the goals of the engineering teams, and
    which is avoided by 70% of respondents in the same industry report.
    Cycle time may also be considered an important part of developer
    experience as a component of what leads to a fluid-feeling
    development and release cycle
    (<xref alt="André N. Meyer et al. 2021" rid="ref-meyerEnablingGoodWork2021" ref-type="bibr">André
    N. Meyer et al. 2021</xref>).</p>
    <p>In calls to re-examine the complexity of developer productivity,
    researchers have argued that velocity measures are highly
    task-dependent, and do not represent the quality of work done or
    other, longer-term measures of the impact of work
    (<xref alt="Sadowski, Storey, and Feldt 2019" rid="ref-sadowskiSoftwareDevelopmentProductivity2019" ref-type="bibr">Sadowski,
    Storey, and Feldt 2019</xref>). It is also possible for velocity
    measures to have multiple directional relationships with desired
    outcomes depending on software developers’ larger context. For
    instance, hypothetically speaking, an increase in velocity may
    associate with more success for a software team when this increase
    arises because the team engages in process improvements, creating
    processes that help them to move more quickly through development
    tasks, and thereby meet a critical deadline for a product launch,
    leading to business outcomes which then lead to more resources for
    the team. However in a different scenario, an increase in velocity
    may be associated with more failures for a software team, for
    instance, if velocity changes arise because the team begins to
    eschew quality control processes, eventually leading to costly
    critical business failures.</p>
    <p>Nevertheless, time and output-based measures are frequently used
    as an outcome measure to make recommendations for software
    engineering practices, e.g. in evaluating the perceived impact of
    technical debt
    (<xref alt="Besker, Martini, and Bosch 2018" rid="ref-beskerTechnicalDebtCripples2018" ref-type="bibr">Besker,
    Martini, and Bosch 2018</xref>). These measures have the added
    benefit of having a concrete referent that is simple to measure and
    inexpensive and convenient for teams trying to track productivity to
    collect.</p>
    <p>The utility of cycle time has subsequently led to numerous
    industry experts recommending that engineering managers and leaders
    track their teams’ cycle times. However, leaders are provided less
    guidance on how to analyze and decrease cycle time. As such, leaders
    are left with the dilemma of being aware of their cycle times, but
    not understanding how to improve their cycle times in an
    evidence-based way.</p>
    <p>In the literature that does directly address this question, four
    major areas have been proposed to impact cycle time: (1)
    organizational structure and climate, (2) reward system, (3)
    software development process and (4) the use of software design and
    testing tools
    (<xref alt="Clincy 2003" rid="ref-clincySoftwareDevelopmentProductivity2003" ref-type="bibr">Clincy
    2003</xref>). We focus in this paper on factors from (3) software
    development processes, in part because measurements of these
    processes continue to gather significant interest from the
    technology industry and are plausibly mobile levers that can be
    manipulated at the level of an engineering team. They are also
    themselves relatively easy to measure and track at the team level if
    a software team within a larger organization were to decide they
    wanted to try to shift their processes and take measurements to make
    sure they were successful. We have argued elsewhere that
    organizational structure and climate are also relatively easy to
    measure and are powerful levers that should be more often targeted
    (<xref alt="C. M. Hicks and Hevesi 2024" rid="ref-hicksCumulativeCultureTheory2024" ref-type="bibr">C.
    M. Hicks and Hevesi 2024</xref>;
    <xref alt="C. Hicks, Lee, and Ramsey 2023" rid="ref-hicksDeveloperThrivingFour2023" ref-type="bibr">C.
    Hicks, Lee, and Ramsey 2023</xref>;
    <xref alt="C. M. Hicks, Lee, and Ramsey 2024" rid="ref-hicksDeveloperThrivingFour2024" ref-type="bibr">C.
    M. Hicks, Lee, and Ramsey 2024</xref>), though for the present work
    we focus on (3) also in part to keep the scope of this analysis
    manageable.</p>
    <p>To reduce cycle times at the level of software development
    process, the software industry currently recommends strategies
    centered around three major themes:</p>
    <list list-type="order">
      <list-item>
        <p>increased coding time</p>
      </list-item>
      <list-item>
        <p>improved task scoping</p>
      </list-item>
      <list-item>
        <p>improved collaboration</p>
      </list-item>
    </list>
    <p>Industry convention rationalizes that increased coding times
    increases the amount of code committed and pull requests merged,
    thus moving tickets through their life cycle more quickly. Improved
    scoping can similarly yield more efficient teams by breaking work
    down into more manageable chunks and reducing the amount of
    unplanned work from bugs and defects. Finally, industry reports
    posit that improved collaboration can reduce the time it takes for
    developers to review PRs and increase review rates
    (<xref alt="Flow, n.d." rid="ref-flowHowIncreaseSoftware" ref-type="bibr">Flow,
    n.d.</xref>;
    <xref alt="Gralha 2022" rid="ref-gralhaReduceCycleTime2022" ref-type="bibr">Gralha
    2022</xref>;
    <xref alt="Waydev 2021" rid="ref-waydevCycleTimeFormula2021" ref-type="bibr">Waydev
    2021</xref>). However, this has not yet been examined empirically.
    That is, although industry convention dictates that these practices
    work to reduce cycle time, we have yet to generate real world
    evidence of their effectiveness. We focus on these three areas as
    possible factors that impact cycle time.</p>
  </sec>
</sec>
<sec id="research-design-and-methodology">
  <title>3. Research design and methodology</title>
  <p>Code for these analyses is available in the
  <monospace>manuscript-preprint_v1.0.0</monospace> release as
  <monospace>analyses.qmd</monospace>, here:
  <ext-link ext-link-type="uri" xlink:href="https://github.com/jflournoy/no-silver-bullets">https://github.com/jflournoy/no-silver-bullets</ext-link>.</p>
  <sec id="data-selection-and-characteristics">
    <title>3.1 Data Selection and Characteristics</title>
    <p>To examine coding time, task scoping, and collaboration as
    predictors of cycle time over time, we centered our analysis on a
    large, real-world dataset of git and ticketing data. This dataset
    includes 55,619 observations across 12 months in 2022 from 11,398
    users in 216 organizations of varying sizes and industries. We chose
    to use longitudinal data across 12 months, as it allowed us to
    examine fluctuations within a person’s workflow as well as different
    stable tendencies between people.This data was available via
    partnerships between a software metrics
    tool<xref ref-type="fn" rid="fn3">3</xref> which was incorporated
    into the workflows of real working software teams, and the 216
    organizations which opted in to this tool at any point during the 12
    month analytic window. Notably, because this tool was adopted on an
    organizational level (following partnership agreements that include
    organizational opt-in and security audits), users themselves did not
    have to be active users of the software metrics tool itself in order
    to be included in this dataset, and git and ticketing data was
    available retrospectively for dates prior to the implementation of
    the tool in the organization. In other words, the git and ticketing
    data included in this analysis is not predicated on being an
    individual user of the software metrics tool, nor on the software
    metrics tool being used at the organization, as our dataset contains
    measures both before and after the software metric tool
    implementation at the organization, and implementation dates for
    organizations vary across the 12 month period.</p>
    <p>Data were selected for analysis based on whether users actively
    contributed code during the time frame of the study. The 216
    organizations each had between 1–2,746 individuals in the dataset,
    with 90% of organizations being represented by more than 12 users
    (Median = 130;
    <xref alt="Figure 1" rid="fig-org-size">Figure 1</xref>). In
    previous pilot surveys used to inform the design of this project,
    professional software developer users from these organizations
    described their main industries as ranging from Technology, Finance,
    Government, Insurance, Retail, and others, indicating a wide
    diversity of business use cases and engineering contexts were
    present in this sample.</p>
    <fig id="fig-org-size">
      <caption><p>Figure 1: Organization sizes clustered around 130
      users, with a long tail of larger organizations.</p></caption>
      <graphic mimetype="image" mime-subtype="png" xlink:href="org_size_hist.png" />
    </fig>
  </sec>
  <sec id="computing-study-variables">
    <title>3.2 Computing study variables</title>
    <p>Using the most complete data for each user, we used the mean to
    aggregate each variable at the <italic>month</italic> level and the
    <italic>year</italic> level (see below for more details specific to
    each variable). For each predictor, we then subtracted each person’s
    yearly average from their monthly data to produce a within-person
    deviation variable. This allowed us to disaggregate effects on the
    outcome due to yearly-level individual differences and
    within-person, month-to-month fluctuations
    (<xref alt="Curran and Bauer 2011" rid="ref-curranDisaggregationPersonPerson2011" ref-type="bibr">Curran
    and Bauer 2011</xref>). This also allowed us to avoid averaging
    between-person and within-person differences into a single effect
    estimate. These effects can be different even in the sign of the
    effect, for example with a positive relationship between some
    time-invariant factor and the outcome of interest at the
    between-person level, and a negative relationship between the same
    factor measured across time and within-person variation over time. A
    common example that is highly relevant to most technical and
    knowledge workers is typing speed and errors. Imagine someone trying
    to type as fast as they can; it is obvious that they will make more
    errors the faster they type, evincing a negative association between
    speed and errors. However, if one simply measures the typing speed
    and error rate of many people, it should be clear that we would see
    that faster typists tend to make fewer errors, perhaps because of
    differences in typing experience. In this study, we want to be able
    to examine average differences between people’s cycle time
    aggregated at the year while also examining what is associated with
    cycle time deviations from that yearly trend month-to-month. All
    year-level individual differences variables were centered at their
    mean. Exceptions or addenda are mentioned below. See
    <xref alt="Table 1" rid="tbl-variables">Table 1</xref> for a brief
    list of variables.</p>
    <sec id="cycle-time-1">
      <title>3.2.1 Cycle Time</title>
      <p>This is the dependent variable in these analyses. After
      computing the cycle time for each closed ticket in seconds, we
      found the median cycle time for each month for each user using all
      tickets <italic>opened</italic> in that month. For example, a
      ticket opened on the 9th of April, and closed on the 3rd of May
      would contribute 2,246,400 seconds to the calculation of the
      median for April.</p>
    </sec>
    <sec id="unclosed-tickets">
      <title>3.2.2 Unclosed Tickets</title>
      <p>We were not able to observe the closing date for every ticket
      given our data collection cutoff of March 7, 2023, and so it is
      plausible that we underestimate the median cycle time in a way
      that depends in part on how many ticket closing times we do not
      observe. For this reason, we also computed the proportion of
      tickets opened in that month that had not been closed by the end
      of our data collection. For example, any ticket opened in April,
      2022 but not closed by March 7, 2023 would count toward the
      proportion of unclosed tickets for that month. We transformed
      proportions from <inline-formula><alternatives>
      <tex-math><![CDATA[[0,1]]]></tex-math>
      <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mo stretchy="true" form="prefix">[</mml:mo><mml:mn>0</mml:mn><mml:mo>,</mml:mo><mml:mn>1</mml:mn><mml:mo stretchy="true" form="postfix">]</mml:mo></mml:mrow></mml:math></alternatives></inline-formula>
      to <inline-formula><alternatives>
      <tex-math><![CDATA[(-\infty, \infty)]]></tex-math>
      <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mi>−</mml:mi><mml:mi>∞</mml:mi><mml:mo>,</mml:mo><mml:mi>∞</mml:mi><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow></mml:math></alternatives></inline-formula>
      using the logistic quantile function (with minimum and maximum
      proportions forced to be .01 and .99 respectively). We use this in
      the regressions below as a control variable to adjust for this
      possibility.</p>
    </sec>
    <sec id="time-month-and-within-quarter-month">
      <title>3.2.3 Time (Month, and within-quarter month)</title>
      <p>We examined time in two ways: monthly and quarterly. Months
      were represented as numeric values (i.e. January = 1, February =
      2) and centered at month 7, which allows us to interpret certain
      quantities like the intercept as the average cycle time in the
      middle of the year. Additionally, because quarters provide
      meaningful business cadences that may impact engineering work, for
      instance in that some organizations set quarterly goals at the
      beginning of each quarter and push to meet those goals at the end
      of each quarter and that key product deadlines may occur
      systematically toward the end of quarters, we accounted for any
      effects of quarterly cycles by using an indicator for the
      within-quarter month, centered at the middle of the quarter (e.g.,
      -1 for the first month of the quarter, 0 for the middle month, and
      1 for the last month of the quarter). This approach allowed us to
      capture a more stable and realistic trajectory of change over the
      course of the year.</p>
    </sec>
    <sec id="team-size">
      <title>3.2.4 Team Size</title>
      <p>To control for any influence of team size on cycle time, we
      compute each individual’s team size as the average size of all
      teams that individual belongs to as defined by individuals’
      co-located activity data. Specifically, in the database used, an
      individual contributor is given membership in any team that they
      have worked in, and this is updated retroactively. For each
      individual, we find all teams that person is a member of, compute
      the size of that team, and then average across those team sizes if
      an individual is a member of multiple teams. As such, this number
      is a very rough indicator of the size of teams an individual tends
      to be a part of and is static across the year. This is a
      limitation of the database. This is then entered as an
      individually-varying continuous variable to control for some of
      the effect of team size on an individual’s cycle time.</p>
    </sec>
    <sec id="coding-days">
      <title>3.2.5 Coding days</title>
      <p>Coding days was summarized as the average number of days per
      week that a developer made at least one commit. We divided the
      number of coding days in a month by the total number of days in
      that month and multiplied by seven to aid in interpretation.</p>
    </sec>
    <sec id="total-merged-prs">
      <title>3.2.6 Total Merged PRs</title>
      <p>One frequently proposed best practice in software work,
      intended to lead to outcomes such as improved task scoping,
      involves breaking work into smaller and more manageable chunks or
      pull requests that can be finished more quickly
      (<xref alt="Kudrjavets, Nagappan, and Rastogi 2022" rid="ref-kudrjavetsSmallCodeChanges2022" ref-type="bibr">Kudrjavets,
      Nagappan, and Rastogi 2022</xref>;
      <xref alt="Lines 2023" rid="ref-linesWhyEliteDev2023" ref-type="bibr">Lines
      2023</xref>;
      <xref alt="Riosa 2019" rid="ref-riosaWrittenUnwrittenGuide2019" ref-type="bibr">Riosa
      2019</xref>;
      <xref alt="Zhang et al. 2022" rid="ref-zhangPullRequestLatency2022" ref-type="bibr">Zhang
      et al. 2022</xref>). As such, we used the number of total merged
      pull requests as one measure of task scoping. To calculate this,
      we counted the number of merged pull requests for each user for
      each month.</p>
    </sec>
    <sec id="percent-defect-tickets">
      <title>3.2.7 Percent Defect Tickets</title>
      <p>Another potentially beneficial signal in software activity data
      is the reduction of unplanned work on bugs and defect tickets,
      which is also proposed as a bottleneck on improving cycle time
      (<xref alt="Paudel et al. 2024" rid="ref-paudelMeasuringImpactTechnical2024" ref-type="bibr">Paudel
      et al. 2024</xref>,
      <xref alt="2024" rid="ref-paudelMeasuringImpactTechnical2024" ref-type="bibr">2024</xref>;
      <xref alt="Rosser and Norton 2021" rid="ref-rosserSystemsPerspectiveTechnical2021" ref-type="bibr">Rosser
      and Norton 2021</xref>;
      <xref alt="Toxboe 2023" rid="ref-toxboeCycleTime2023" ref-type="bibr">Toxboe
      2023</xref>). As such, we used the percentage of defect tickets as
      another measure of task scoping to represent unplanned work that
      may interfere with timely completion of planned work. This may
      also be a downstream signal of individuals’ opportunity for
      focused work time and code quality. To account for this
      possibility, for each user, for each month, we computed the
      percent of tickets that were defect tickets.</p>
    </sec>
    <sec id="degree-centrality">
      <title>3.2.8 Degree centrality</title>
      <p>We measured collaboration by calculating degree centrality. To
      evaluate degree centrality, a metric derived from network analysis
      and often used in the analysis of social networks
      (<xref alt="Watts 2004" rid="ref-wattsNewScienceNetworks2004" ref-type="bibr">Watts
      2004</xref>), we employed a framework where developers were
      treated as nodes within the network, and their interactions in the
      form of Pull Requests (PRs) were regarded as connections. In other
      words, any contribution of code to the same pull request
      constituted a collaboration edge between developers. We normalized
      each centrality value by dividing by the total number of
      developers constituting the organizational network. The
      calculations were executed using the Python package Networkx
      (<xref alt="Hagberg, Schult, and Swart 2008" rid="ref-SciPyProceedings_11" ref-type="bibr">Hagberg,
      Schult, and Swart 2008</xref>). This particular variable serves as
      an effective proxy for quantifying the extent of collaboration
      among developers. We multiply the normalized degree centrality,
      which is between 0 and 1, by 100.</p>
    </sec>
    <sec id="comments-per-pr">
      <title>3.2.9 Comments per PR</title>
      <p>Another indicator of collaboration is the frequency of comments
      within PRs. We undertook a comprehensive examination of all PRs
      that were successfully merged in the year 2022 and, for each user,
      calculated the average number of comments per PR that they
      authored each month. This served as a measure to gauge the depth
      of collaboration exhibited during the development and review
      process.</p>
      <fig id="tbl-variables">
        <caption><p>Table 1: Variable descriptions</p></caption>
        <table-wrap>
          <table>
            <colgroup>
              <col width="14%" />
              <col width="29%" />
              <col width="57%" />
            </colgroup>
            <thead>
              <tr>
                <th align="left"></th>
                <th align="left">Variable</th>
                <th align="left">Variable Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">Productivity</td>
                <td align="left">Cycle Time</td>
                <td align="left">Avg time from ticket start to end</td>
              </tr>
              <tr>
                <td align="left"></td>
                <td align="left">Proportion unclosed tickets</td>
                <td align="left">Control variable to account for tickets
                missing cycle time</td>
              </tr>
              <tr>
                <td align="left">Time</td>
                <td align="left">Month</td>
                <td align="left">Continuous time variable coded as month
                number</td>
              </tr>
              <tr>
                <td align="left"></td>
                <td align="left">Within-quarter month</td>
                <td align="left">Index of the month number within each
                quarter year</td>
              </tr>
              <tr>
                <td align="left">Team Context</td>
                <td align="left">Team size</td>
                <td align="left">Average size across all teams a
                individual is on</td>
              </tr>
              <tr>
                <td align="left">Coding Time</td>
                <td align="left">Coding Days per Week</td>
                <td align="left">Avg number of coding days a week</td>
              </tr>
              <tr>
                <td align="left">Task Scoping</td>
                <td align="left">Total Merged PRs</td>
                <td align="left">Total number of merged PRs per
                developer</td>
              </tr>
              <tr>
                <td align="left"></td>
                <td align="left">Percent Defect Tickets</td>
                <td align="left">Percent of all tickets that are defect
                tickets</td>
              </tr>
              <tr>
                <td align="left">Collaboration</td>
                <td align="left">Degree Centrality</td>
                <td align="left">Score based on the number of reviewers
                a developer has worked with</td>
              </tr>
              <tr>
                <td align="left"></td>
                <td align="left">Comments per PR</td>
                <td align="left">Number of comments per pr a developer
                is the author on</td>
              </tr>
            </tbody>
          </table>
        </table-wrap>
      </fig>
    </sec>
  </sec>
  <sec id="analytic-approach">
    <title>3.3 Analytic Approach</title>
    <p>The models described below are fit using
    <monospace>brms</monospace> (v2.21.6,
    <xref alt="Bürkner 2018" rid="ref-burknerAdvancedBayesianMultilevel2018" ref-type="bibr">Bürkner
    2018</xref>,
    <xref alt="2017" rid="ref-burknerBrmsPackageBayesian2017" ref-type="bibr">2017</xref>),
    interface the the Stan probabilistic programming language for
    Bayesian sampling (v2.35.0,
    <xref alt="Stan Development Team 2024" rid="ref-gelman" ref-type="bibr">Stan
    Development Team 2024</xref>), with the
    <monospace>cmdstanr</monospace> backend (v0.8.0,
    <xref alt="Gabry et al. 2024" rid="ref-gabryCmdstanrInterfaceCmdStan2024" ref-type="bibr">Gabry
    et al. 2024</xref>), in R (v4.3.2,
    <xref alt="R Core Team 2023" rid="ref-rcoreteamLanguageEnvironmentStatistical2023" ref-type="bibr">R
    Core Team 2023</xref>).</p>
    <p>We developed a model of monthly average ticket cycle time
    conditional on the following predictors: within-quarter month
    number, team size, proportion of unclosed tickets, month number,
    yearly means and month-level deviations for coding days per week,
    total merged PRs, defect ticket percentage, degree centrality, and
    comments per PR. Specifically, we modeled cycle time as distributed
    Weibull with two parameters, <inline-formula><alternatives>
    <tex-math><![CDATA[\lambda]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>λ</mml:mi></mml:math></alternatives></inline-formula>
    (scale), and <italic>k</italic> (shape). The Weibull distribution is
    often used to model time-to-event data
    (<xref alt="Harrell 2015" rid="ref-harrellRegressionModelingStrategies2015" ref-type="bibr">Harrell
    2015</xref>;
    <xref alt="Rummel 2017" rid="ref-rummelAverageWeibullAnalysis2017" ref-type="bibr">Rummel
    2017</xref>), where <italic>k</italic> determines the change over
    time in the probability of an event occurring (often called the
    “hazard rate”), and where <inline-formula><alternatives>
    <tex-math><![CDATA[\lambda]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>λ</mml:mi></mml:math></alternatives></inline-formula>
    determines the time-to-event for some proportion of the cases (or in
    other words, how spread out the distribution is). For simplicity, we
    assume that the shape (hazard rate, <italic>k</italic>) is not
    influenced by the factors considered, and focus on how these factors
    affect the scale (time-to-event, <inline-formula><alternatives>
    <tex-math><![CDATA[\lambda]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>λ</mml:mi></mml:math></alternatives></inline-formula>)
    of ticket closures, though we did allow the shape,
    <italic>k</italic>, to vary across organizations. In short, the
    Weibull distribution provides flexibility for accurately describing
    cycle time data that tend to have a bulk of observations at the low
    end, with a very long tail of more extreme observations.</p>
    <p>The model for <inline-formula><alternatives>
    <tex-math><![CDATA[\lambda]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>λ</mml:mi></mml:math></alternatives></inline-formula>
    is</p>
    <p></p>
    <p>where <inline-formula><alternatives>
    <tex-math><![CDATA[X]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>X</mml:mi></mml:math></alternatives></inline-formula>
    is the matrix of predictors, <inline-formula><alternatives>
    <tex-math><![CDATA[\beta]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>β</mml:mi></mml:math></alternatives></inline-formula>
    is the vector of coefficients, <inline-formula><alternatives>
    <tex-math><![CDATA[\eta_{\text{org}}]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:msub><mml:mi>η</mml:mi><mml:mtext mathvariant="normal">org</mml:mtext></mml:msub></mml:math></alternatives></inline-formula>
    is random intercepts with mean <inline-formula><alternatives>
    <tex-math><![CDATA[\mu_1]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:msub><mml:mi>μ</mml:mi><mml:mn>1</mml:mn></mml:msub></mml:math></alternatives></inline-formula>
    and linear slopes of month with mean <inline-formula><alternatives>
    <tex-math><![CDATA[\mu_2]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:msub><mml:mi>μ</mml:mi><mml:mn>2</mml:mn></mml:msub></mml:math></alternatives></inline-formula>
    for each organization, and <inline-formula><alternatives>
    <tex-math><![CDATA[\eta_{\text{org:user}}]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:msub><mml:mi>η</mml:mi><mml:mtext mathvariant="normal">org:user</mml:mtext></mml:msub></mml:math></alternatives></inline-formula>
    is random intercepts with mean <inline-formula><alternatives>
    <tex-math><![CDATA[\mu_3]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:msub><mml:mi>μ</mml:mi><mml:mn>3</mml:mn></mml:msub></mml:math></alternatives></inline-formula>
    and linear slopes of month with mean <inline-formula><alternatives>
    <tex-math><![CDATA[\mu_4]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:msub><mml:mi>μ</mml:mi><mml:mn>4</mml:mn></mml:msub></mml:math></alternatives></inline-formula>
    for each user nested within organization. The specific predictors in
    <inline-formula><alternatives>
    <tex-math><![CDATA[X]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>X</mml:mi></mml:math></alternatives></inline-formula>
    are within-quarter month number, team size, proportion of unclosed
    tickets, month number, yearly means and month-level deviations for
    coding days per week, total merged PRs, defect ticket percentage,
    degree centrality, and comments per PR. We also include interactions
    between month number and the following: team size, proportion of
    unclosed tickets, and each of the yearly mean predictors. This
    allows us to account as completely as possible for our control
    variables (team size and proportion of unclosed tickets), and allow
    the effect of month on cycle time to vary by the individual
    differences variables (e.g., to account for the possibility that
    someone who has higher coding days per week shows a less steep
    decrease in cycle time across the year than someone with lower
    coding days per week).</p>
    <p>The model for <italic>k</italic> is</p>
    <p></p>
    <p>where <inline-formula><alternatives>
    <tex-math><![CDATA[\zeta_{\text{org}}]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:msub><mml:mi>ζ</mml:mi><mml:mtext mathvariant="normal">org</mml:mtext></mml:msub></mml:math></alternatives></inline-formula>
    is a random intercept with mean <inline-formula><alternatives>
    <tex-math><![CDATA[\mu_5]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:msub><mml:mi>μ</mml:mi><mml:mn>5</mml:mn></mml:msub></mml:math></alternatives></inline-formula>
    each organization.</p>
    <p>Conceptually, this model allows a unique distribution of cycle
    times (as determined by the random intercepts for both
    <inline-formula><alternatives>
    <tex-math><![CDATA[\lambda]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>λ</mml:mi></mml:math></alternatives></inline-formula>
    and <italic>k</italic>) for each organization. It also allows the
    scale of the distribution of cycle times to vary for each user due
    to the random intercept for <inline-formula><alternatives>
    <tex-math><![CDATA[\lambda]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>λ</mml:mi></mml:math></alternatives></inline-formula>.
    The effect of time (month number) on the scale of the distribution
    of cycle times is also allowed to vary across organizations as well
    as users due to the random slopes (with means
    <inline-formula><alternatives>
    <tex-math><![CDATA[\mu_2]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:msub><mml:mi>μ</mml:mi><mml:mn>2</mml:mn></mml:msub></mml:math></alternatives></inline-formula>
    and <inline-formula><alternatives>
    <tex-math><![CDATA[\mu_4]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:msub><mml:mi>μ</mml:mi><mml:mn>4</mml:mn></mml:msub></mml:math></alternatives></inline-formula>).
    This strategy allows two advantages: first, we account for multiple
    sources of variance that allows our estimates of the effects of
    interest to be more precise; and second, we are able to provide
    estimates of this variation across organizations and users. This
    variation itself is of interest given the various myths mentioned in
    the introduction about developer performance.</p>
    <p>We model the effect of proportion of unclosed tickets and month
    number as smooth functions of the covariate using thin-plate splines
    for increased flexibility
    (<xref alt="Wood 2017" rid="ref-woodGeneralizedAdditiveModels2017" ref-type="bibr">Wood
    2017</xref>). Briefly, thin plate splines (functions made up of
    smoothly connected segments) allow for flexible, non-linear
    relationships between predictors and the response variable. These
    splines are penalized to prevent overfitting, balancing model
    flexibility and complexity. The interactions between month number
    and our control variables are parameterized as additional smooth
    functions of month number multiplied by these variables. While our
    focal model parameterizes the interactions between year-level means
    and month number as linear coefficients on multiplicative
    combinations between the two variables, we also examined a model
    that uses additional smooth functions of month number multiplied by
    these variables to allow for additional complexity. We provide the
    model output for this sensitivity analysis in a supplement.</p>
    <p>We set weakly-informative priors centered at zero for all
    parameters, except for the intercept for
    <inline-formula><alternatives>
    <tex-math><![CDATA[\lambda]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>λ</mml:mi></mml:math></alternatives></inline-formula>
    and <italic>k</italic> which were centered on their approximate
    values in the data (consistent with the default behavior of
    <monospace>brms</monospace>). We performed prior-predictive checks
    to ensure our prior specification generated data that covered and
    exceeded the space of our observations. Given the complexity of the
    model, we also specified initialization of parameters at small
    plausible values (e.g., zero for coefficients, .1 for standard
    deviations of random effects). Full prior and initialization
    specifications are available in the analysis code.</p>
    <p>We sampled from 4 chains with 2,000 total iterations each,
    discarding the first 1,000 iterations as warmup. Inferences were
    made on 4,000 post-warmup draws from the posterior probability
    distribution from the 4 chains.</p>
  </sec>
  <sec id="inferences">
    <title>3.4 Inferences</title>
    <p>We take a Bayesian approach to making claims about the sign of
    effects (i.e., whether an association between two variables is
    positive or negative), and to describing its magnitude. Instead of
    the common but fraught frequentist approach of describing whether an
    effect size is unlikely given the assumption of an unrealistic
    point-null hypothesis, we try to give the reader a sense of the
    actual probability that the sign of an effect is in a particular
    direction, and what the impact of the factor is on cycle times in
    terms that are easy to interpret
    (<xref alt="Gelman and Carlin 2014" rid="ref-GelmanPowerCalculationsAssessing2014" ref-type="bibr">Gelman
    and Carlin 2014</xref>).</p>
    <p>In more precise statistical terms, unless otherwise stated we
    describe the posterior of parameters and predictions using the
    median of the distribution, and characterize its variation using the
    highest posterior density interval (HDI) which is defined as the
    interval that contains a specified percentage (usually 95%) of the
    most probable values of the parameter
    (<xref alt="Kruschke 2018" rid="ref-kruschkeRejectingAcceptingParameter2018" ref-type="bibr">Kruschke
    2018</xref>). We make general descriptive inferences based on the
    probability that a parameter has the sign of the posterior density’s
    median value. For example, if 80% of the posterior density of the
    slope of the effect of month on cycle time is of the same sign as
    the density’s median, and that median is negative, we would say
    something like, “given the model and the data, there is an 80%
    chance that there is a decrease in cycle times across the year.”</p>
  </sec>
  <sec id="r-packages">
    <title>3.5 R packages</title>
    <p>R packages explicitly loaded in this analysis and manuscript
    preparation include brms (v2.22.7,
    <xref alt="Bürkner 2018" rid="ref-burknerAdvancedBayesianMultilevel2018" ref-type="bibr">Bürkner
    2018</xref>,
    <xref alt="2021" rid="ref-burknerBayesianItemResponse2021" ref-type="bibr">2021</xref>,
    <xref alt="2017" rid="ref-burknerBrmsPackageBayesian2017" ref-type="bibr">2017</xref>),
    cmdstanr (v0.8.0,
    <xref alt="Gabry et al. 2024" rid="ref-gabryCmdstanrInterfaceCmdStan2024" ref-type="bibr">Gabry
    et al. 2024</xref>), data.table (v1.15.4,
    <xref alt="Barrett et al. 2024" rid="ref-barrettDatatableExtensionDataframe2024" ref-type="bibr">Barrett
    et al. 2024</xref>), ggplot2 (v3.5.0,
    <xref alt="Wickham 2016" rid="ref-wickhamGgplot2ElegantGraphics2016" ref-type="bibr">Wickham
    2016</xref>), flextable (v0.9.5,
    <xref alt="Gohel and Skintzos 2024" rid="ref-gohelFlextableFunctionsTabular2024" ref-type="bibr">Gohel
    and Skintzos 2024</xref>), knitr (v1.46,
    <xref alt="Xie 2015" rid="ref-xieDynamicDocumentsKnitr2015" ref-type="bibr">Xie
    2015</xref>,
    <xref alt="2014" rid="ref-xieKnitrComprehensiveTool2014" ref-type="bibr">2014</xref>,
    <xref alt="2024" rid="ref-xieKnitrGeneralpurposePackage2024" ref-type="bibr">2024</xref>),
    marginaleffects (v0.19.0,
    <xref alt="Arel-Bundock 2024" rid="ref-arel-bundockMarginaleffectsPredictionsComparisons2024" ref-type="bibr">Arel-Bundock
    2024</xref>), mgcv (v1.9.0,
    <xref alt="Wood 2011" rid="ref-woodFastStableRestricted2011" ref-type="bibr">Wood
    2011</xref>,
    <xref alt="2017" rid="ref-woodGeneralizedAdditiveModels2017" ref-type="bibr">2017</xref>,
    <xref alt="2004" rid="ref-woodStableEfficientMultiple2004" ref-type="bibr">2004</xref>,
    <xref alt="2003" rid="ref-woodThinplateRegressionSplines2003" ref-type="bibr">2003</xref>;
    <xref alt="Wood, Pya, and Saefken 2016" rid="ref-woodSmoothingParameterModel2016" ref-type="bibr">Wood,
    Pya, and Saefken 2016</xref>), parameters (v0.21.6,
    <xref alt="Lüdecke et al. 2020" rid="ref-ludeckeExtractingComputingExploring2020" ref-type="bibr">Lüdecke
    et al. 2020</xref>), patchwork (v1.2.0,
    <xref alt="Pedersen 2024" rid="ref-pedersenPatchworkComposerPlots2024" ref-type="bibr">Pedersen
    2024</xref>), posterior (v1.5.0,
    <xref alt="Bürkner et al. 2023" rid="ref-burknerPosteriorToolsWorking2023" ref-type="bibr">Bürkner
    et al. 2023</xref>;
    <xref alt="Vehtari et al. 2021" rid="ref-vehtariRanknormalizationFoldingLocalization2021" ref-type="bibr">Vehtari
    et al. 2021</xref>), rlang (v1.1.3,
    <xref alt="Henry and Wickham 2024" rid="ref-henryRlangFunctionsBase2024" ref-type="bibr">Henry
    and Wickham 2024</xref>), scales (v1.3.0,
    <xref alt="Wickham, Pedersen, and Seidel 2023" rid="ref-wickhamScalesScaleFunctions2023" ref-type="bibr">Wickham,
    Pedersen, and Seidel 2023</xref>), scico (v1.5.0.9000,
    <xref alt="Pedersen and Crameri 2025" rid="ref-pedersenScicoColourPalettes2025" ref-type="bibr">Pedersen
    and Crameri 2025</xref>), showtext (v0.9.7,
    <xref alt="Qiu and details. 2024" rid="ref-qiuShowtextUsingFonts2024" ref-type="bibr">Qiu
    and details. 2024</xref>), StanHeaders (v2.36.0.9000,
    <xref alt="Stan Development Team 2020" rid="ref-standevelopmentteamStanHeadersHeadersInterface2020" ref-type="bibr">Stan
    Development Team 2020</xref>), and tidybayes (v3.0.6,
    <xref alt="Kay 2023" rid="ref-kayTidybayesTidyData2023" ref-type="bibr">Kay
    2023</xref>).</p>
  </sec>
</sec>
<sec id="results">
  <title>4. Results</title>
  <p>Results from the linear model reported below were highly similar to
  those in the more flexible non-linear model sensitivity analysis
  described above. Also note that parameters in the table are from a
  linear model for the distribution of
  log(<inline-formula><alternatives>
  <tex-math><![CDATA[\lambda]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>λ</mml:mi></mml:math></alternatives></inline-formula>)
  and log(<italic>k</italic>), while model expectations are on the
  response scale and can therefore display curvature even while the
  model is linear.</p>
  <p>The first section of the results concerns the population-level
  effects and showcases the expectations of cycle time conditional on
  the various co-varying factors we target. The second section explores
  the variability in these effects across time, across individuals, and
  across organizations.</p>
  <sec id="population-level-effects">
    <title>4.1 Population-level effects</title>
    <fig id="tbl-results-fe">
      <caption><p>Table 2: Population-level effect
      estimates</p></caption>
      <graphic mimetype="image" mime-subtype="png" xlink:href="index_files/figure-jats/tbl-results-fe-1.png" />
    </fig>
    <p>We find that all measured factors, both individual-difference and
    within-person deviations, have a non-zero association with cycle
    time, with 100% of the posterior distribution for these parameters
    sharing the same sign (see
    <xref alt="Table 2" rid="tbl-results-fe">Table 2</xref> for point
    estimates and uncertainty intervals). Within-quarter month showed a
    very small (relative to other effects shown below) negative
    association with cycle time, indicating that time to ticket
    completion is shorter at the end of quarters
    (<xref alt="Figure 2 (a)" rid="fig-quarter">Figure 2 (a)</xref>).
    Team size had almost no effect on cycle time
    (<xref alt="Table 2" rid="tbl-results-fe">Table 2</xref>). Cycle
    times tended to decrease slightly over the year
    (<xref alt="Figure 2 (b)" rid="fig-month">Figure 2 (b)</xref>). The
    proportion of unclosed tickets, an important control variable, on
    average had close to no effect on our measure of average monthly
    cycle time but interacted with month.</p>
    <fig id="fig-time">
      <caption><p>Figure 2</p></caption>
      <table-wrap>
        <table>
          <colgroup>
            <col width="49%" />
            <col width="2%" />
            <col width="49%" />
          </colgroup>
          <tbody>
            <tr>
              <td align="left"><p specific-use="wrapper">
                <boxed-text>
                  <fig id="fig-quarter">
                    <caption><p>(a) Within-quarter month doesn’t affect
                    cycle time. Background pixels represent density of
                    data, with darker colors indicating greater density.
                    Lines are median posterior expectations, with 95%
                    credible interval ribbons.</p></caption>
                    <graphic mimetype="image" mime-subtype="png" xlink:href="cycle_time_full_intx_lin_remonth_quarter.png" />
                  </fig>
                </boxed-text>
              </p></td>
              <td align="left"><p specific-use="wrapper">
                <boxed-text>
                  <p> </p>
                </boxed-text>
              </p></td>
              <td align="left"><p specific-use="wrapper">
                <boxed-text>
                  <fig id="fig-month">
                    <caption><p>(b) Slight reduction of cycle time
                    across the year. Background hexagons represent
                    density of data, with darker colors indicating
                    greater density. Lines are median posterior
                    expectations, with 95% credible interval
                    ribbons.</p></caption>
                    <graphic mimetype="image" mime-subtype="png" xlink:href="cycle_time_full_intx_lin_remonth_month_num.png" />
                  </fig>
                </boxed-text>
              </p></td>
            </tr>
          </tbody>
        </table>
      </table-wrap>
    </fig>
    <p>Specifically, when individuals increased average coding days per
    week month-to-month they also tended to have lower cycle times, and
    individuals with more average coding days per week across the year
    tended to have lower cycle times
    (<xref alt="Figure 3" rid="fig-codingdays">Figure 3</xref>). The
    association between coding days and cycle time also tended to
    increase in strength across months, with 97% of the posterior in
    this direction.</p>
    <fig id="fig-codingdays">
      <caption><p>Figure 3: More coding days is associated with shorter
      cycle times. Background hexagons represent density of data, with
      darker colors indicating greater density. Lines are median
      posterior expectations, with 95% credible interval
      ribbons.</p></caption>
      <graphic mimetype="image" mime-subtype="png" xlink:href="cycle_time_full_intx_lin_remonth_coding_days.png" />
    </fig>
    <p>More merged PRs was associated with lower cycle time for both
    individual average differences and within-person differences. This
    effect also may get stronger across the year with 90% of the
    posterior in this direction
    (<xref alt="Figure 4" rid="fig-mergedprs">Figure 4</xref>).</p>
    <fig id="fig-mergedprs">
      <caption><p>Figure 4: More merged PRs is associated with shorter
      cycle times. Background hexagons represent density of data, with
      darker colors indicating greater density. Lines are median
      posterior expectations, with 95% credible interval
      ribbons.</p></caption>
      <graphic mimetype="image" mime-subtype="png" xlink:href="cycle_time_full_intx_lin_remonth_merged_prs.png" />
    </fig>
    <p>The percent of defect tickets showed a negative association with
    cycle time for within-person deviations and a positive association
    for individual differences. In other words, individuals who tended
    to have more defect tickets as a proportion of their work across the
    course of the year also tended to have longer cycle times. However,
    for any given person, an increase in the proportion of defect
    tickets in a month was associated with lower cycle times
    (<xref alt="Figure 5" rid="fig-defecttickets">Figure 5</xref>). The
    interaction with month number for this effect was centered close to
    zero, with only 78% of the posterior in the negative direction with
    a fairly narrow distribution around zero (95% HDI = [-0.0003,
    0.0001]).</p>
    <fig id="fig-defecttickets">
      <caption><p>Figure 5: Higher-than-average proportion of defect
      tickets in a month is associated with shorter cycle times, while
      individuals with more defect tickets on average show longer cycle
      times. Background hexagons represent density of data, with darker
      colors indicating greater density. Lines are median posterior
      expectations, with 95% credible interval ribbons.</p></caption>
      <graphic mimetype="image" mime-subtype="png" xlink:href="cycle_time_full_intx_lin_remonth_defect_tickets.png" />
    </fig>
    <p>Degree centrality, as measured both by year-averaged individual
    differences and within-person deviations, showed a negative
    association with cycle time
    (<xref alt="Figure 6" rid="fig-degree">Figure 6</xref>). In other
    words, individuals who on average contribute code to PRs that have a
    lot of other contributors tend to have lower cycle times for tickets
    they own. Similarly, when individuals’ collaboration on PRs
    increases in a given month, their cycle time tends to go down. This
    effect does not unambiguously strengthen or weaken across the year
    with 71% of the posterior for the interaction effect having negative
    sign with a fairly narrow distribution around zero (95% HDI =
    [-0.0005, 0.0002]).</p>
    <fig id="fig-degree">
      <caption><p>Figure 6: Higher degree centrality is associated with
      shorter cycle times. Background hexagons represent density of
      data, with darker colors indicating greater density. Lines are
      median posterior expectations, with 95% credible interval
      ribbons.</p></caption>
      <graphic mimetype="image" mime-subtype="png" xlink:href="cycle_time_full_intx_lin_remonth_degree_cent.png" />
    </fig>
    <p>Finally, the number of comments per PR showed a positive
    association with cycle time. Individuals who tended to garner more
    comments on their PRs also tended to have higher cycle times, and
    within a given month, a higher number of comments per PR relative to
    a person’s average was also associated with higher cycle times
    (<xref alt="Figure 7" rid="fig-comments">Figure 7</xref>). This
    effect also does not unambiguously strengthen or weaken across the
    year with 59% of the posterior for the interaction effect having
    negative sign with a fairly narrow distribution around zero (95% HDI
    = [-0.0004, 0.0005]).</p>
    <fig id="fig-comments">
      <caption><p>Figure 7: More comments per PR is associated with
      longer cycle times. Background hexagons represent density of data,
      with darker colors indicating greater density. Lines are median
      posterior expectations, with 95% credible interval
      ribbons.</p></caption>
      <graphic mimetype="image" mime-subtype="png" xlink:href="cycle_time_full_intx_lin_remonth_pr_comments.png" />
    </fig>
  </sec>
  <sec id="effect-sizes-and-heterogeneity">
    <title>4.2 Effect sizes and heterogeneity</title>
    <p>Given the inherent non-linearity of the Weibull distribution, the
    effects of the predictors on cycle time are not constant across the
    range of the data. For example, the expected difference in
    cycle-time for a unit difference for within-person coding days per
    week will be different at different times of the year simply as a
    by-product that we are modeling the log of the scale parameter.
    Notice that this is true even in the absence of interactive effects,
    which further complicate the interpretation of the effect sizes for
    the year-average variables. Indeed, the random effects which allow
    intercept and month-effect variance both organizations and
    individuals also adds to the complexity of interpreting the effect
    sizes.</p>
    <p>To give the reader a sense for how these associations play out
    across organizations, we plot a range of expected changes in cycle
    time given a counterfactual change from the 50th percentile to the
    90th percentile on the variable of interest, all else held equal
    (<xref alt="Figure 8" rid="fig-heatmaps">Figure 8</xref>). We do
    this for each organization, for each month, and then plot these as a
    heatmap where the color represents the expected change in cycle
    time. This allows us to see how the effect of a variable on cycle
    time changes across organizations and across time.</p>
    <fig id="fig-heatmaps">
      <caption><p>Figure 8: Effect sizes for each variable are
      heterogeneous across time, organizations, and values of other
      predictors. These plots show the expected change in cycle time
      from 50th to 90th percentile of each variable, by organization and
      month. The color represents the expected change in cycle time,
      with warm indicating an increase in cycle time and cool indicating
      a decrease. The scale is the same across all plots.</p></caption>
      <table-wrap>
        <table>
          <colgroup>
            <col width="33%" />
            <col width="33%" />
            <col width="33%" />
          </colgroup>
          <tbody>
            <tr>
              <td align="left"><p specific-use="wrapper">
                <boxed-text>
                  <fig id="fig-heatmaps-coding">
                    <caption><p>(a) Avg. coding days per
                    Week</p></caption>
                    <graphic mimetype="image" mime-subtype="png" xlink:href="avg_coding_days_per_week_eff_size.png" />
                  </fig>
                </boxed-text>
              </p></td>
              <td align="left"><p specific-use="wrapper">
                <boxed-text>
                  <fig id="fig-heatmaps-prs">
                    <caption><p>(b) Total merged PRs</p></caption>
                    <graphic mimetype="image" mime-subtype="png" xlink:href="total_merged_prs_eff_size.png" />
                  </fig>
                </boxed-text>
              </p></td>
              <td align="left"><p specific-use="wrapper">
                <boxed-text>
                  <fig id="fig-heatmaps-defects">
                    <caption><p>(c) Defect tickets
                    percentage</p></caption>
                    <graphic mimetype="image" mime-subtype="png" xlink:href="defect_tickets_pct_indiv_eff_size.png" />
                  </fig>
                </boxed-text>
              </p></td>
            </tr>
          </tbody>
        </table>
      </table-wrap>
      <table-wrap>
        <table>
          <colgroup>
            <col width="17%" />
            <col width="33%" />
            <col width="33%" />
            <col width="17%" />
          </colgroup>
          <tbody>
            <tr>
              <td align="left"><p specific-use="wrapper">
                <boxed-text>
                  <p> </p>
                </boxed-text>
              </p></td>
              <td align="left"><p specific-use="wrapper">
                <boxed-text>
                  <fig id="fig-heatmaps-centrality">
                    <caption><p>(d) Degree centrality</p></caption>
                    <graphic mimetype="image" mime-subtype="png" xlink:href="degree_centrality_monthly_100_eff_size.png" />
                  </fig>
                </boxed-text>
              </p></td>
              <td align="left"><p specific-use="wrapper">
                <boxed-text>
                  <fig id="fig-heatmaps-comments">
                    <caption><p>(e) Comments per PR</p></caption>
                    <graphic mimetype="image" mime-subtype="png" xlink:href="comments_per_pr_eff_size.png" />
                  </fig>
                </boxed-text>
              </p></td>
              <td align="left"><p specific-use="wrapper">
                <boxed-text>
                  <p> </p>
                </boxed-text>
              </p></td>
            </tr>
          </tbody>
        </table>
      </table-wrap>
    </fig>
  </sec>
  <sec id="variability-in-effects">
    <title>4.3 Variability in effects</title>
    <p>There is heterogeneity in the distribution of cycle time across
    organizations in both the scale and shape parameters, which suggests
    that comparisons of cycle time trends between teams across different
    organizations may be difficult and should include careful approaches
    that take into account this variation
    (<xref alt="Table 3" rid="tbl-results-re">Table 3</xref>). This can
    be seen visually as differences in the posterior predictive
    distribution of cycle times across organizations especially when
    viewed on a log scale to emphasize differences at the low end of
    cycle times where the distribution tends to be most dense
    (<xref alt="Figure 9" rid="fig-pp-check-org">Figure 9</xref>).
    Different organizations likely have different guidelines and
    cultures around using tickets and this may show up as this kind of
    heterogeneity in cycle time. Incidentally we can also see, looking
    across the full data-set, that the posterior distribution of our
    model captures well our data distribution
    (<xref alt="Figure 10" rid="fig-pp-check-sum">Figure 10</xref>).</p>
    <fig id="tbl-results-re">
      <caption><p>Table 3: Variance and covariance of organization and
      individual-level effects</p></caption>
      <graphic mimetype="image" mime-subtype="png" xlink:href="index_files/figure-jats/tbl-results-re-1.png" />
    </fig>
    <p>Variation across individuals’ scale parameter after accounting
    for organization heterogeneity is also substantial, and greater in
    magnitude than organizational heterogeneity (sd = 0.65 [0.63, 0.66]
    versus sd = 0.47 [0.42, 0.53];
    <xref alt="Table 3" rid="tbl-results-re">Table 3</xref>). There is
    also notable heterogeneity in the effect of month both at the
    organization level and the level of individuals. There is a small
    negative correlation between individuals’ (and less credibly,
    organizations’) scale intercepts and the effect of month meaning
    that a person who has a higher cycle time at month 7 also tends to
    decrease more steeply in their cycle time across the year
    (<xref alt="Table 3" rid="tbl-results-re">Table 3</xref>).</p>
    <p>We also examine the variability around our population effects.
    <xref alt="Figure 11" rid="fig-bw-ct-traj">Figure 11</xref> shows
    model-expected cycle-time trajectories across the year for
    randomly-sampled individuals. One of the stronger effects at the
    population-level is the effect of the average number of
    coding-days-per-week (both averaged over the year, and month by
    month). To begin, we examine the effect of year-average
    coding-days-per-week. We split the sampled individuals into 5%-wide
    quantiles based on their yearly average coding days per week. The
    population-level effect discussed above reveals that, on average,
    individuals who have more coding-days-per-week also tend to have
    lower cycle times. This shows up subtly in Figure 9 as a decline in
    cycle-time from left-to-right across these quantiles, especially
    when examining the amount to which the trajectories occur below the
    thick black median-cycle-time line.</p>
    <fig id="fig-pp-check-org">
      <caption><p>Figure 9: Distributions of cycle time vary widely
      across organizations both in their central tendency and spread.
      Posterior prediction densities for model-expected distributions of
      cycle time are shown across all organizations with at least 10
      observations. Each density represents one organization, showing
      model-predicted cycle times from 50 posterior draws. The scale has
      been transformed slightly to better show the spread of data.
      Columns have been ordered by sample size, and rows are ordered by
      median predicted cycle time. Density fill colors reflect sample
      size. Note that distributions from larger orgs have less
      variability in their posterior predictions. Line at 4 weeks is set
      arbitrarily to aid in comparisons.</p></caption>
      <graphic mimetype="image" mime-subtype="png" xlink:href="cycle_time_full_intx_nlq_pp_check.png" />
    </fig>
    <fig id="fig-pp-check-sum">
      <caption><p>Figure 10: Model-predicted posterior distributions of
      cycle time captures the data distribution well. The posterior
      prediction density for cycle time is shown across all data points.
      The scale has been transformed slightly to better show the spread
      of data.</p></caption>
      <graphic mimetype="image" mime-subtype="png" xlink:href="cycle_time_full_intx_nlq_pp_check_summary.png" />
    </fig>
    <p>What is important about this illustration when interpreting these
    results in the context of a real software development team is that
    it shows a single measurement for a person on any given day or even
    averaged across a month may not be representative of that
    individual’s long-term trend. While some of this uncertainty
    reflects measurement error, much of it is irreducible given the
    factors we’ve considered in this analysis. It may be possible to
    reduce it by adding further information to the model. However, at
    present the conclusion must be that one must take great care in
    comparing cycle-time between individuals even in the same
    organization, or even against themselves.</p>
    <fig id="fig-bw-ct-traj">
      <caption><p>Figure 11: Individual observations of cycle time are
      highly variable across the year. Each line tracks cycle time
      month-to-month for one randomly sampled individual. Each facet
      shows the trajectories for individuals who have year-average
      average-coding-days-per-week in the quantile specified at the top
      of the facet. Shading represents prediction intervals from the
      model for plausible cycle time values for these
      individuals.</p></caption>
      <graphic mimetype="image" mime-subtype="png" xlink:href="cycle_time_full_intx_lin_remonth_post_pred_ids.png" />
    </fig>
    <p>We can also examine the effect of month-by-month deviations in
    coding-days-per-week at the level of these example individuals.
    <xref alt="Figure 12" rid="fig-wi-ct-traj">Figure 12</xref> shows
    data for the same quantiles as above, but now cycle time is
    normalized around each person’s median to better visualize
    within-person deviations in cycle time. Again, across the year we
    see that variation within-person is substantial. While we can see
    the tendency for within-person increases and decreases in
    average-coding-days-per-week to affect cycle time, there is
    considerable variation still, with many yellow-colored points above
    the 0 line and darker points below the zero line.</p>
    <p>We can unpack this variability further with the help of our
    model. We will again examine a random subset of 10 participants with
    complete data across the year. Again, each one is sampled from a
    different bin of values of one of our strongest predictors,
    year-average average-coding-days-per-week.
    <xref alt="Figure 13" rid="fig-ct-pp-traj">Figure 13</xref> (left)
    shows the model-expected central tendency (gloss as a sort of
    moving-average) of each of these participants, along with their
    observed data. We can also ask the model to generate plausible
    values for cycle time that we might observe; these are the gray
    lines behind everything. What is clear here is that there is some
    systematic effect on the central tendency for different levels of
    year-average coding days. Again, we see a lot of overlap across
    individuals. And when we examine both the observed data, and the
    model predictions, we see a whole lot more overlap.</p>
    <fig id="fig-wi-ct-traj">
      <caption><p>Figure 12: Individual month-to-month deviations from
      year-average cycle time are highly variable across the year. Each
      line tracks cycle time month-to-month for one randomly sampled
      individual. Each facet shows the trajectories for individuals who
      have year-average average-coding-days-per-week in the quantile
      specified at the top of the facet. Shading represents prediction
      intervals from the model for plausible cycle time values for these
      individuals.</p></caption>
      <graphic mimetype="image" mime-subtype="png" xlink:href="cycle_time_full_intx_nlq_post_pred_ids_win.png" />
    </fig>
    <p>The next thing we can do with the model is ask it to give us
    these expectations and predictions under the counterfactual
    condition of each of these participants having a different number of
    year-average coding days. This is just a simulation, not an
    experiment, so we should heed this caveat. In
    <xref alt="Figure 13" rid="fig-ct-pp-traj">Figure 13</xref> (right),
    we see model expectations and posterior predictions were each of
    these participants induced to take on the yearly-average number of
    coding days from the 10th, 50th, and 90th quantile of our data. This
    is a huge spread, but we see only small, incremental changes in the
    model expectations for each of them. More importantly, the spread of
    the posterior predictions, binned for ease of visualization in the
    pixels behind the expectation lines, are nearly indistinguishable.
    Taken together, these results once again suggest caution in the use
    of this highly variable software metric: taking a relatively
    unsophisticated monthly average of an individual developer’s cycle
    time data is not likely to be able to tell you what their cycle time
    will be like in the future. This further suggests that future work
    investigating the impact of interventions on factors that impact
    cycle time may expect to see relatively small or even invisible
    changes at the individual level, even when inducing changes that do
    scale to desired impact at the organizational level.</p>
    <fig id="fig-ct-pp-traj">
      <caption><p>Figure 13: Variability in cycle time within-person
      across time overwhelms subtle differences in averages. These plots
      show posterior predictions of reasonable monthly-median cycle time
      and counterfactual predictions. The <bold>left</bold> plot shows
      model expectations (our best guess at the central tendency) and
      95% credible intervals (colored lines and ribbons) of cycle time
      over the year for 10 randomly selected participants. Lines and
      ribbons are colored by the participants observed year-average
      average-coding-days-per-week. Black points and the stronger black
      line indicates observed data for these participants. Light gray
      lines represent model-derived posterior predictions of cycle times
      we might expect to see from these participants. The
      <bold>right</bold> plot shows these same participants under three
      counterfactual conditions: with their year-average-coding-days set
      to the 10th, 50th, and 90th quantile values. Each line represents
      the model expectation under these conditions, all else being
      equal. Posterior predictions of reasonable values for observed
      median-monthly cycle times are binned by these quantiles and by
      month in the pixels behind the expectations.</p></caption>
      <graphic mimetype="image" mime-subtype="png" xlink:href="cycle_time_full_intx_nlq_combined_post_pred_counterfactual.png" />
    </fig>
  </sec>
</sec>
<sec id="limitations">
  <title>5. Limitations</title>
  <p>Throughout the results, we have included commentary on the larger
  context of software work and associated cautions regarding the
  interpretation of our findings. In the following discussion section,
  we further elaborate on future research directions which may build on
  the evidence in the current paper. As noted in the introduction, there
  are many limitations to the usage of an output-based velocity metric,
  including that such a metric does not capture business outcomes, the
  quality of task performance, and perceived value of software
  development work. Nevertheless, monitoring cycle time is frequently
  recommended as a measurement practice for software management. Below,
  we elaborate on four key limitations of the current findings in
  greater detail, which are of course also opportunities for future
  research. In general, these limitations point to the need for more and
  better empirical evidence for software engineering
  (<xref alt="Devanbu, Zimmermann, and Bird 2016" rid="ref-devanbuBeliefEvidenceEmpirical2016" ref-type="bibr">Devanbu,
  Zimmermann, and Bird 2016</xref>;
  <xref alt="Kitchenham, Dyba, and Jorgensen 2004" rid="ref-kitchenhamEvidencebasedSoftwareEngineering2004" ref-type="bibr">Kitchenham,
  Dyba, and Jorgensen 2004</xref>;
  <xref alt="Sjoberg, Dyba, and Jorgensen 2007" rid="ref-sjobergFutureEmpiricalMethods2007" ref-type="bibr">Sjoberg,
  Dyba, and Jorgensen 2007</xref>).</p>
  <p>First, measurement validity challenges in ticket data and sample
  representativeness constrain our analysis. A primary contribution of
  this paper is to present findings from the analysis of a large (more
  than 55k observations across 216 organizations) and longitudinal (a
  calendar year) dataset of software work activity data. Metrics which
  are git-based can enhance the measurement validity of our project by
  providing this large-scale observation, unfiltered by individual
  perception, in the ecologically valid context of real working teams.
  Nevertheless, measurement validity may also be threatened by the way
  that data are defined and constructed in the process leading to the
  creation of variables around tickets: for instance, we rely on a
  general assumption that teams mark tickets in a fairly accurate and
  timely manner. Our dataset lacked contextual information that could
  serve to validate team practices around ticket entry, and while we
  sought to align our assumptions with known practices around these
  ticketing tools and software workflows, it is important to note that
  differences in the timeliness and accuracy of ticket entries may be an
  important factor complicating our ability to understand cycle time.
  This context limitation also applies to our sample of organizations
  which is non-random and reflects organizations that invested in the
  software metrics tool that provided that data, and does threaten the
  generalizability of these results
  (<xref alt="Baltes and Ralph 2021" rid="ref-baltesSamplingSoftwareEngineering2021a" ref-type="bibr">Baltes
  and Ralph 2021</xref>).</p>
  <p>Second, systematic differences in ticket assignment patterns may
  complicate cycle time interpretations. In this analysis, we have
  primarily explored cycle time as derived from a tickets-based metric.
  However, how a ticket and its associated work tasks are assigned
  inside of an organization is likely an important factor in how tickets
  are completed. Assignment of tickets, especially defect tickets, is
  complex over time and both the initial and subsequent assignments of
  tickets can be impacted by many factors. For example, after an initial
  assignment to a developer, bugs may frequently be reassigned due to
  diverse factors such as determining ownership, time constraints, and
  identifying developers who may have a particular view into the root
  cause of the bug
  (<xref alt="Guo et al. 2011" rid="ref-guoNotMyBug2011" ref-type="bibr">Guo
  et al. 2011</xref>). Some individuals may get assigned defect tickets
  systematically more often than others, and changes in the proportion
  of work that consists of defect tickets may change how fast someone is
  able to work in general, either because defect tickets tend to be
  larger or smaller in scope than other tickets, or because of
  disruptions.</p>
  <p>Third, our simplified measurement of team structures fails to
  capture the complex collaborative reality of software development. In
  this analysis, given limitations in our dataset about contexts such as
  internal team structures within organizations, we have operationalized
  team size with a generous attribution of team membership across shared
  activity, which almost certainly represents a very rough estimate of
  team size. We have also calculated team size as averaged in a static
  measure for the entire year, rather than captured over time. Given
  that team size likely impacts how quickly work is completed, we may
  miss out on nuanced effects here; for instance, it is reasonable to
  imagine that further variables around how resources are distributed
  and allocated to teams may provide further predictive value to our
  understanding of team-level factors that change cycle time. Team
  “assignment” itself is also highly complex in technical work, as
  cross-team collaboration is typical, and collaborations across
  software projects may frequently not match explicit organizational
  hierarchies. In our previous research using self-reports from software
  teams, we have found that over 60% of individual contributors on
  software teams report working closely with other individual
  collaborators who do not share their same manager
  (<xref alt="C. Hicks, Lee, and Ramsey 2023" rid="ref-hicksDeveloperThrivingFour2023" ref-type="bibr">C.
  Hicks, Lee, and Ramsey 2023</xref>). In short, software development is
  a collaborative exercise that is embedded in an ecosystem with history
  and many actors
  (<xref alt="C. M. Hicks and Hevesi 2024" rid="ref-hicksCumulativeCultureTheory2024" ref-type="bibr">C.
  M. Hicks and Hevesi 2024</xref>).</p>
  <p>Fourth, invisible collaborative activities and contributor role
  ambiguity limit interpretations of cycle time variations. Developers
  communicate and collaborate in many ways that may not be captured in a
  ticket, e.g. impromptu or formal mentorship, paired or mob
  programming, and planning meetings. Where activity data are collected
  for some of these activities, it is likely that such data may be
  perceived in our data collection as “belonging” to a single
  individual, but work may often reflect joint work (e.g., in the case
  of mentorship, paired, and planning activities where one developers
  “logs” the work of many). These organizational communication
  activities and social norms may provide informative context for
  interpreting cycle time activities. For instance, organizational
  planning data may provide a useful next step in understanding how
  planning meetings do or do not cause downstream cycle time to progress
  more efficiently. Also many people that work on software may not be
  represented in this ticketing data. We also do not know for certain
  the job titles of each contributor to this dataset and use the term
  software developer broadly.</p>
</sec>
<sec id="discussion">
  <title>6. Discussion</title>
  <sec id="take-aways-for-practitioners-and-anti-patterns">
    <title>6.1 Take-aways for practitioners and anti-patterns</title>
    <p>In this section, we summarize parts of our more thorough
    discussion (below) in plain language that we hope will be useful for
    software practitioners, highlighting not only the evidence at hand,
    but also cautionary anti-patterns we think may be likely when using
    cycle time data at scale.</p>
    <list list-type="bullet">
      <list-item>
        <p>We observe many robust influences on cycle time but with
        small effects. This means implementing a change targeting any
        one of these factors may help a little bit, but don’t expect a
        magic bullet. We recommend that practitioners consider the
        trade-offs of implementing any particular change by
        incorporating more context about developers’ work tasks that
        goes beyond activity data, as well as designing an iterative,
        experimental approach to evaluating changes that includes
        measures that go beyond cycle time, such as incorporating
        developers’ self-report on the utility of measurement
        practices.</p>
      </list-item>
      <list-item>
        <p>Any single observation of cycle time is a very noisy
        indication of what is typical. Again, remember that each
        ticket’s time-to-close is influenced by myriad factors, most of
        which are beyond the individual contributor’s control. Ensuring
        a standard and repeatable practice around how tickets are
        created and managed across teams is likely to be a necessary
        precondition to relying on ticket data to make valid
        comparisons.</p>
      </list-item>
      <list-item>
        <p>Practitioners can use this research to feel justified in
        seeking more shared and environmental explanations for the speed
        of work while doing complex software development, rather than
        locating their explanations in individual blame, or praise.</p>
      </list-item>
      <list-item>
        <p>We can start to build up a sense of cycle times for teams and
        individuals if we are willing to observe patiently over long
        periods of time. Since we rarely observe identical task
        repetition, we need more observations to establish “typical”
        performance and identify factors that influence cycle time.
        Similar to public health research, understanding software work
        requires studying diverse contexts across industries and
        companies. This broad scope also creates opportunities for
        natural experiments. While organizations may hesitate to share
        data, these “secrets” typically diffuse naturally, and “free
        revealing<xref ref-type="fn" rid="fn4">4</xref>” may ultimately
        prove more profitable, as described by Von Hippel and Von Krogh
        (<xref alt="2006" rid="ref-vonhippelFreeRevealingPrivatecollective2006" ref-type="bibr">2006</xref>).</p>
      </list-item>
      <list-item>
        <p>We should understand that cycle time is still quite distant
        from the ultimate objective: efficient delivery of value in a
        context that supports those who produce that value.</p>
      </list-item>
      <list-item>
        <p>Although we did not have self-report data from individual
        contributors in the context of this analysis, it is possible
        that their perceptions and experience of doing software work
        gives them an accurate sense of what can help or hinder their
        problem solving. The measurement and attempt to change any
        particular objective indicator of software work, such as cycle
        time, should happen in conversation with these experts.</p>
      </list-item>
      <list-item>
        <p>If you collect your own data on this, be aware that sometimes
        data can be too noisy to draw any credible conclusions. That in
        itself is a signal you can use to improve how and what you
        measure. At the end of the day, software development
        problem-solving is a social, human activity, and these are
        notoriously complex.</p>
      </list-item>
    </list>
  </sec>
  <sec id="general-discussion">
    <title>6.2 General Discussion</title>
    <p>Our analyses revealed precise directional associations between
    the factors of interest and cycle time, though the magnitude of
    these effects warrants careful consideration. These effects were
    generally in an intuitive direction for coding time, task scoping,
    and collaboration. More coding days, both on average across the year
    (between-person), and month-to-month variations from that average
    (within-person) was associated with lower cycle times. Moreover, the
    effect of average coding days on cycle-time had a larger effect
    later in the year. Having more merged PRs both on average, and
    month-to-month was also associated with lower cycle-time. Greater
    collaboration at both the between- and within-person level, and as
    measured by shared work on the same pull request (and
    operationalized as degree centrality), were associated with lower
    cycle-times as well. Two main results will require more nuance in
    their interpretation. The effect of task scoping as measured by
    defect tickets (where a lower percentage of defect tickets,
    representing unplanned work, was taken as better task scoping) was
    associated with faster cycle times at the within-person level and
    greater cycle times at the between-person level. Finally,
    collaboration as measured by comments-per-PR was associated with
    longer cycle times. These main effects, while quite precise, were
    also somewhat small, and are set against a backdrop of substantial
    unexplained between- and within-person variation. This suggests that
    while there are a number of factors that do push around cycle-time,
    each the life cycle of each ticket is a complex function that is not
    necessarily captured by the metrics we have available, some of which
    are quite commonly recommended as important inputs to cycle
    time.</p>
    <p>It is perhaps not surprising that cycle time benefits when
    individuals have more time to code, either as a deviation from their
    usual, or than other people doing similar work. When task completion
    requires writing code, more time to code will obviously decrease
    time until completion. Similarly, being able to break work into more
    discrete chunks and completing more of these chunks should also
    benefit cycle time. Keep in mind that these results both control for
    the other. That is, this is the effect of more PRs for the same
    amount of coding time, and vice versa (we discuss this benefit of
    our modeling approach more below).</p>
    <p>Perhaps not as obviously, contributing code to a PR that is being
    contributed to by others (what is captured by our degree centrality
    measure) also benefits cycle time. Contrary to the possibility that
    there are too many cooks in the kitchen, we show that on average
    cycle time is lower when people work together on a shared problem.
    Again, this is all-else-equal controlling for coding time, total
    PRs, and the other variables in our model. However, we must also
    consider that more comments per PR is associated with higher cycle
    time. This is another signal of coordination and collaboration, but
    has an opposite effect. Although speculative, we think that this
    reflects cases where a particular PR is attempting to solve a
    difficult problem, and where discussion is needed. Of course, this
    may also be a signal that communication can sometimes become
    problematic. Future work would have to examine the content of the PR
    and communication to disambiguate these possibilities as well as
    others.</p>
    <p>To finish our preliminary discussion of the main effects, we
    consider the effect of defect tickets. Individuals with a higher
    proportion of defect tickets on average over the course of the year
    tend to also have longer cycle times, while a person who suddenly
    has more defect tickets in a given month tends to have lower cycle
    times that month. We speculate that the between-person effect may be
    a result of different roles: in other words, people whose general
    workload is bug squashing may simply be given more difficult bugs to
    squash; alternatively, if less experienced programmers are generally
    given more bugs as a share of work, they may be slower at completing
    their tasks. Organizational factors may also be a culprit: if one’s
    work is, on average over the course of a year, swamped by defect
    tickets, one doesn’t have time to complete other tasks.</p>
    <p>Considering the association of lower cycle-times during months
    when a person tends to have more defect tickets, we speculate that
    this may be a result of a shift in work from larger pieces of
    generative work to fixing a lot of small errors. Again, as is the
    case with the between-person effect here, and with the effect of
    comments per PR above, these results suggest that a holistic and
    diagnostic approach to understanding cycle time changes and their
    relationship to tickets would need to include measures of the
    content of tickets (and context around ticket assignment) in a more
    granular way than was possible within the scope of this project.</p>
    <p>The substantial individual differences observed in our analysis,
    coupled with considerable residual variance after accounting for all
    measured factors, presents both methodological and practical
    implications for the assessment of software work. This heterogeneity
    in software metrics suggests that detecting the impact of specific
    interventions on cycle time may prove challenging unless the effect
    size substantially exceeds the natural variation in individual and
    team performance. The magnitude of unexplained variance serves as a
    crucial caveat for practitioners and researchers attempting to
    implement and evaluate software work interventions in software
    development contexts.</p>
    <p>The observed variability itself constitutes a meaningful signal
    that resonates with the lived experience of software development
    practitioners. Our findings suggest that there exists no universal
    formula for optimizing cycle time or enhancing software work across
    all contexts and individuals. Rather, the path toward improved
    development efficiency likely requires a nuanced approach that
    acknowledges this inherent variability while simultaneously pursuing
    refined measurement methodologies and targeted interventions.
    Success in this domain may depend on our ability to identify and
    mitigate confounding factors while developing increasingly
    sophisticated metrics that capture the complexity of software
    development processes.</p>
    <p>Indeed, the amount of variability apparent in these ticket data
    is likely the result of the complexity of each unit of work in
    software development. The process of setting a particular goal, and
    then of planning how to reach that goal by breaking the work into
    discrete tickets and tasks, is itself both conceptually and socially
    complex, and may impact cycle-time. Moreover, the preconditions set
    by previous work on a codebase determines what a software developer
    is able to do to reach a particular goal and close a ticket. The
    discussion of the process of ticket assignment in the limitations,
    above, is also relevant here. Though crucially important as inputs
    to software work, these sources of variability are not often
    measured and may be considered by some to be immeasurable.</p>
    <p>This work shows some clear signals about what might get in the
    way of closing tickets. Developers may lack enough time for coding,
    may not have enough collaborators, or may be bogged down with defect
    tickets. These are not necessarily factors individual contributors
    (ICs) have any control over. Again, the agency that any one person
    has to meaningfully alter cycle-time is likely limited. This points
    toward the need for systems-level thinking at the level of teams,
    units, organizations, and interactions between these elements over
    time, rather than models which only measure interventions on
    particular ICs in snapshots at a single point in time.</p>
    <p>What about the individual? Many practitioners reading this will
    wonder what this means for their own productivity, or that of their
    direct reports. Is cycle-time a good way to measure productivity?
    Can I just give my team an extra head-down coding day and boost
    productivity? We think that some of these signals are
    straightforward and will likely help. As is often the case, more
    research is necessary. Testing actual changes (i.e., interventions)
    with good measurement would help us figure this out. However, for
    any one person, the effect on cycle-time will likely be small and
    hard to see unless one is taking careful data over a long period of
    time. That is perhaps the strongest message this research sends to
    the practitioner: cycle-time is a very poor-resolution tool for
    taking a snapshot of software work velocity because there are so
    many inputs that go into the time it takes to close a particular
    ticket. Resolution increases with more measurements across time, and
    across people. As we refine our measures of software work velocity
    it may be possible to make inferences about individuals in shorter
    time-scales but we do not know of a measure with such properties and
    the present work very strongly shows that cycle-time, as useful as
    it is, and as much as it can tell us in the aggregate, is not such a
    measure. One practical take-away for a practitioner may in fact be
    to feel justified in seeking more shared and environmental
    explanations for the speed of work while doing complex software
    development, rather than locating their explanations in individual
    blame, or praise.</p>
    <p>The present work demonstrates numerous methodological strengths
    that also reveal ways in which inferences can be biased when data
    complexities are not accounted for. This is important to understand
    both for research like the current report but also for teams and
    organizations modeling their data internally. Primarily, the
    analyses presented here appropriately model cycle-time as
    Weibull-distributed. This is a probability distribution that has a
    lower bound at 0, and no upper bound. The distribution’s shape
    parameter characterizes the temporal dynamics of ticket closure
    probability (whether tickets become more or less likely to close as
    time passes), while the scale parameter (our focus in these
    analyses) determines the typical time window in which tickets tend
    to close. The shape of observed cycle-times, with the majority
    clustering around the low end but with a long right tail, is well
    described by this distribution. The more common Gaussian (normal)
    distribution has support on all real numbers (i.e., assumes negative
    cycle-times are plausible!), and the bulk of the distribution is
    centered symmetrically about the mean. Attempting to represent the
    influence of various factors on cycle-time data using an
    inappropriate distribution will have unintended consequences on the
    observed relationships, which may be biased, and can lead to mode
    predictions outside the range of possible values
    (<xref alt="Collett 1994" rid="ref-collettModellingSurvivalData1994" ref-type="bibr">Collett
    1994</xref>;
    <xref alt="Lawless 2003" rid="ref-lawlessStatisticalModelsMethods2003" ref-type="bibr">Lawless
    2003</xref>;
    <xref alt="McElreath 2020" rid="ref-mcelreathStatisticalRethinkingBayesian2020" ref-type="bibr">McElreath
    2020</xref>;
    <xref alt="Nelson 1982" rid="ref-nelsonAppliedLifeData1982" ref-type="bibr">Nelson
    1982</xref>).</p>
    <p>Another strength that is relevant to both researchers and
    practitioners is the inclusion, simultaneously, of multiple factors
    in the same models. Splitting the data into groups using some factor
    like coding days and taking the average cycle time for each group,
    as a basis for making inferences about differences between groups,
    is not sufficient to account for the possibility that other factors
    systematically differ between those groups. Nevertheless, this is an
    approach which we have frequently seen in the industry. Modeling
    these factors simultaneously as continuous variables allows us to
    get closer to the idea of “X has an effect on Y, all else being held
    equal.” This is necessary for starting to figure out the effect of a
    particular factor in isolation. Of course, if one has access to even
    more sophisticated observational-causal-inference methods (e.g.,
    natural experiments, or matching) or even interventional approaches,
    these would be even better. If this sounds a little bit difficult,
    it’s because, like many things in software development, it is.
    There’s no free lunch; and there are no solutions, only tradeoffs.
    If one wants easy quantitative answers, one must be willing to
    trade-off accuracy (and we almost never can say how much accuracy is
    lost until we do it the hard way too).</p>
    <p>We have emphasized in this work the small size of these observed
    associations, and the vast variability in the outcome of interest.
    This may belie the utility of what can be gained by further
    investigation into these constructs. What we cannot know from this
    work is what a change in one of our workplace factors would really
    mean for cycle time, and what that might mean for an organization.
    We also have not yet emphasized how small effects can accumulate if
    sustained. For example, the 50th and 90th percentile in year-average
    average-coding-days-per-week is about 1 day. If we look at the
    model-expected association with an increase of 1 coding day per
    week, we reduce cycle time by roughly 2 days (compared to a raw
    median of 13 days;
    <xref alt="Figure 8" rid="fig-heatmaps">Figure 8</xref>). Across an
    entire organization, this average may mean a lot. It is also worth
    noting that in the software literature, developers have reported
    substantial social-psychological benefits from increases to focus
    time, deep work, and days spent coding that may provide real and
    meaningful impacts on the quality of software work whether or not
    they result in cycle time change
    (<xref alt="Andre N. Meyer et al. 2021" rid="ref-meyerTodayWasGood2021" ref-type="bibr">Andre
    N. Meyer et al. 2021</xref>).</p>
  </sec>
  <sec id="future-research-directions">
    <title>6.3 Future Research Directions</title>
    <p>Looking forward, our findings suggest two primary directions for
    future research. In the domain of observational studies, increased
    attention to a ticket’s lifecycle, and process analysis appears as a
    tractable area for new longitudinal investigations. There are a
    number of measurable properties of tickets and code contributions
    that would be useful for distinguishing between different kinds of
    work and different interactions. For example, determining the
    expected scope or difficulty of tickets would allow for important
    statistical control, ensuring we compare like with like. Different
    kinds of work may also show different pitfalls and benefits, and
    could plausibly be determined from the content of a ticket or by
    assignment by those creating the tickets (for example, not all
    tickets will have a programming solution). Understanding and
    quantifying the type of content in PR comments would be useful in
    determining the causes and consequences of this avenue for
    collaboration. Ticket scope may also be contrasted with the ultimate
    complexity of the work that closes that ticket. Because of the
    creative and complex nature of software development, understanding
    what gets it stuck and what helps it flow will almost certainly have
    to wrestle with this complexity.</p>
    <p>In the domain of intervention studies, we have argued that while
    software metrics may play a role in evaluating the impact of changes
    made to engineering organizations (or broader product and other
    cross-functional partnerships that include engineering
    organizations), determining this impact is not as simple as
    expecting a coherent, consistent and average increase in a metric
    such as cycle time to result from a change. Changes which may be
    meaningful at the scale of an organization may be relatively small
    or invisible on the individual level, and changes which are
    meaningful to individuals may not reflect an intervention that
    scales to an organization. Nevertheless, engineering (and other)
    orgs are currently seeking to become data-driven and use their own
    activity data as a point of reflection on both sides of this
    question. Increased attention to developing robust efficacy measures
    for behavioral interventions at scale, and detailing the nuances of
    how these changes show up in software activity metrics, will be
    needed to answer these questions. Detailing the potential
    methodological and statistical pitfalls of these data may also play
    a critical role in steering organizations away from misleading and
    inaccurate summaries, and toward appropriate methodologies.
    Understanding how to implement a software work intervention across
    an organization in a standardized way presents its own set of
    research questions for the future. For this, we believe that
    increased attention to developers’ own within-person growth,
    wellbeing, and work will also be necessary to provide a full
    understanding of software work.</p>
    <p>As the findings of the current work have demonstrated, moving
    toward a greater understanding of how to improve software
    development will likely require a plurality of methods,
    measurements, and thoughtful experimental practices within software
    engineering organizations, rather than silver bullet, isolated
    metrics.</p>
  </sec>
</sec>
<sec id="acknowledgements">
  <title>7. Acknowledgements</title>
  <p>We would like to thank Kristen Foster-Marks for advice on the
  project and helpful feedback on a draft; also thanks to Bennet Cook
  for his help navigating many databases.</p>
</sec>
<sec id="contributions">
  <title>8. Contributions</title>
  <p>Contribution roles listed are defined in NISO CRediT Working Group
  (<xref alt="2022" rid="ref-nisocreditworkinggroupANSINISOZ3910420222022" ref-type="bibr">2022</xref>).</p>
  <p>John C. Flournoy: Conceptualization, Data curation, Formal
  analysis, Investigation, Methodology, Visualization, Writing –
  original draft, Writing – review &amp; editing. Carol S. Lee:
  Conceptualization, Data curation, Formal analysis, Investigation,
  Methodology, Writing – original draft, Writing – review &amp; editing.
  Catherine M. Hicks: Conceptualization, Funding acquisition,
  Investigation, Methodology, Project administration, Resources,
  Supervision, Writing – review &amp; editing. Maggie Wu:
  Conceptualization, Data curation, Formal analysis, Investigation,
  Methodology.</p>
</sec>
</body>

<back>
<ref-list>
  <title>References</title>
  <ref id="ref-agrawalSoftwareEffortQuality2007">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Agrawal</surname><given-names>Manish</given-names></name>
        <name><surname>Chari</surname><given-names>Kaushal</given-names></name>
      </person-group>
      <article-title>Software Effort, Quality, and Cycle Time: A Study of CMM Level 5 Projects</article-title>
      <source>IEEE Transactions on Software Engineering</source>
      <year iso-8601-date="2007-03">2007</year><month>03</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2025-02-06">2025</year><month>02</month><day>06</day></date-in-citation>
      <volume>33</volume>
      <issue>3</issue>
      <issn>1939-3520</issn>
      <pub-id pub-id-type="doi">10.1109/TSE.2007.29</pub-id>
      <fpage>145</fpage>
      <lpage>156</lpage>
    </element-citation>
  </ref>
  <ref id="ref-ahmadPandorasBoxSocial2024">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Ahmad</surname><given-names>Muhammad Ovais</given-names></name>
        <name><surname>Gustavsson</surname><given-names>Tomas</given-names></name>
      </person-group>
      <article-title>The Pandora’s box of social, process, and people debts in software engineering</article-title>
      <source>Journal of Software: Evolution and Process</source>
      <year iso-8601-date="2024">2024</year>
      <date-in-citation content-type="access-date"><year iso-8601-date="2025-02-14">2025</year><month>02</month><day>14</day></date-in-citation>
      <volume>36</volume>
      <issue>2</issue>
      <issn>2047-7481</issn>
      <pub-id pub-id-type="doi">10.1002/smr.2516</pub-id>
      <fpage>e2516</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-arel-bundockMarginaleffectsPredictionsComparisons2024">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Arel-Bundock</surname><given-names>Vincent</given-names></name>
      </person-group>
      <source>Marginaleffects: Predictions, comparisons, slopes, marginal means, and hypothesis tests</source>
      <year iso-8601-date="2024">2024</year>
    </element-citation>
  </ref>
  <ref id="ref-ballWorkplaceSurveillanceOverview2010">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Ball</surname><given-names>Kirstie</given-names></name>
      </person-group>
      <article-title>Workplace surveillance: An overview</article-title>
      <source>Labor History</source>
      <publisher-name>Routledge</publisher-name>
      <year iso-8601-date="2010-02">2010</year><month>02</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2025-02-06">2025</year><month>02</month><day>06</day></date-in-citation>
      <volume>51</volume>
      <issue>1</issue>
      <issn>0023-656X</issn>
      <pub-id pub-id-type="doi">10.1080/00236561003654776</pub-id>
      <fpage>87</fpage>
      <lpage>106</lpage>
    </element-citation>
  </ref>
  <ref id="ref-baltesSamplingSoftwareEngineering2021a">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Baltes</surname><given-names>Sebastian</given-names></name>
        <name><surname>Ralph</surname><given-names>Paul</given-names></name>
      </person-group>
      <article-title>Sampling in Software Engineering Research: A Critical Review and Guidelines</article-title>
      <publisher-name>arXiv</publisher-name>
      <year iso-8601-date="2021-10">2021</year><month>10</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2025-02-28">2025</year><month>02</month><day>28</day></date-in-citation>
      <uri>https://arxiv.org/abs/2002.07764</uri>
      <pub-id pub-id-type="doi">10.48550/arXiv.2002.07764</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-barrettDatatableExtensionDataframe2024">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Barrett</surname><given-names>Tyson</given-names></name>
        <name><surname>Dowle</surname><given-names>Matt</given-names></name>
        <name><surname>Srinivasan</surname><given-names>Arun</given-names></name>
        <name><surname>Gorecki</surname><given-names>Jan</given-names></name>
        <name><surname>Chirico</surname><given-names>Michael</given-names></name>
        <name><surname>Hocking</surname><given-names>Toby</given-names></name>
      </person-group>
      <source>Data.table: Extension of ‘data.frame‘</source>
      <year iso-8601-date="2024">2024</year>
    </element-citation>
  </ref>
  <ref id="ref-beskerTechnicalDebtCripples2018">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Besker</surname><given-names>Terese</given-names></name>
        <name><surname>Martini</surname><given-names>Antonio</given-names></name>
        <name><surname>Bosch</surname><given-names>Jan</given-names></name>
      </person-group>
      <article-title>Technical debt cripples software developer productivity: A longitudinal study on developers’ daily software development work</article-title>
      <source>Proceedings of the 2018 International Conference on Technical Debt</source>
      <publisher-name>ACM</publisher-name>
      <publisher-loc>Gothenburg Sweden</publisher-loc>
      <year iso-8601-date="2018-05">2018</year><month>05</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2024-10-02">2024</year><month>10</month><day>02</day></date-in-citation>
      <isbn>978-1-4503-5713-5</isbn>
      <pub-id pub-id-type="doi">10.1145/3194164.3194178</pub-id>
      <fpage>105</fpage>
      <lpage>114</lpage>
    </element-citation>
  </ref>
  <ref id="ref-blackburnImprovingSpeedProductivity1996">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Blackburn</surname><given-names>J. D.</given-names></name>
        <name><surname>Scudder</surname><given-names>G. D.</given-names></name>
        <name><surname>Van Wassenhove</surname><given-names>L. N.</given-names></name>
      </person-group>
      <article-title>Improving speed and productivity of software development: A global survey of software developers</article-title>
      <source>IEEE Transactions on Software Engineering</source>
      <year iso-8601-date="1996-12">1996</year><month>12</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2025-02-05">2025</year><month>02</month><day>05</day></date-in-citation>
      <volume>22</volume>
      <issue>12</issue>
      <issn>1939-3520</issn>
      <pub-id pub-id-type="doi">10.1109/32.553636</pub-id>
      <fpage>875</fpage>
      <lpage>885</lpage>
    </element-citation>
  </ref>
  <ref id="ref-bouwersSoftwareMetricsPitfalls2013">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Bouwers</surname><given-names>Eric</given-names></name>
        <name><surname>van Deursen</surname><given-names>Arie</given-names></name>
        <name><surname>Visser</surname><given-names>Joost</given-names></name>
      </person-group>
      <article-title>Software metrics: Pitfalls and best practices</article-title>
      <source>2013 35th International Conference on Software Engineering (ICSE)</source>
      <year iso-8601-date="2013-05">2013</year><month>05</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2025-02-14">2025</year><month>02</month><day>14</day></date-in-citation>
      <issn>1558-1225</issn>
      <pub-id pub-id-type="doi">10.1109/ICSE.2013.6606755</pub-id>
      <fpage>1491</fpage>
      <lpage>1492</lpage>
    </element-citation>
  </ref>
  <ref id="ref-brocknerInteractiveEffectsProcedural1994">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Brockner</surname><given-names>Joel</given-names></name>
        <name><surname>Konovsky</surname><given-names>Mary</given-names></name>
        <name><surname>Cooper-Schneider</surname><given-names>Rochelle</given-names></name>
        <name><surname>Folger</surname><given-names>Robert</given-names></name>
        <name><surname>Martin</surname><given-names>Christopher</given-names></name>
        <name><surname>Bies</surname><given-names>Robert J.</given-names></name>
      </person-group>
      <article-title>Interactive Effects of Procedural Justice and Outcome Negativity on Victims and Survivors of Job Loss</article-title>
      <source>Academy of Management Journal</source>
      <publisher-name>Academy of Management</publisher-name>
      <year iso-8601-date="1994-04">1994</year><month>04</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2025-02-14">2025</year><month>02</month><day>14</day></date-in-citation>
      <volume>37</volume>
      <issue>2</issue>
      <issn>0001-4273</issn>
      <pub-id pub-id-type="doi">10.5465/256835</pub-id>
      <fpage>397</fpage>
      <lpage>409</lpage>
    </element-citation>
  </ref>
  <ref id="ref-brocknerProceduralFairnessOutcome2007">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Brockner</surname><given-names>Joel</given-names></name>
        <name><surname>Fishman</surname><given-names>Ariel Y.</given-names></name>
        <name><surname>Reb</surname><given-names>Jochen</given-names></name>
        <name><surname>Goldman</surname><given-names>Barry</given-names></name>
        <name><surname>Spiegel</surname><given-names>Scott</given-names></name>
        <name><surname>Garden</surname><given-names>Charlee</given-names></name>
      </person-group>
      <article-title>Procedural fairness, outcome favorability, and judgments of an authority’s responsibility</article-title>
      <source>Journal of Applied Psychology</source>
      <publisher-name>American Psychological Association</publisher-name>
      <publisher-loc>US</publisher-loc>
      <year iso-8601-date="2007">2007</year>
      <volume>92</volume>
      <issue>6</issue>
      <issn>1939-1854</issn>
      <pub-id pub-id-type="doi">10.1037/0021-9010.92.6.1657</pub-id>
      <fpage>1657</fpage>
      <lpage>1671</lpage>
    </element-citation>
  </ref>
  <ref id="ref-brooksMythicalManmonthEssays1975">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Brooks</surname><given-names>Frederick P.</given-names></name>
      </person-group>
      <source>The mythical man-month: Essays on software engineering</source>
      <publisher-name>Addison-Wesley Pub. Co.</publisher-name>
      <publisher-loc>Reading, Mass.</publisher-loc>
      <year iso-8601-date="1975">1975</year>
      <isbn>978-0-201-00650-6</isbn>
    </element-citation>
  </ref>
  <ref id="ref-bruneauxWhatMcKinseyHas2024">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Bruneaux</surname><given-names>Taylor</given-names></name>
      </person-group>
      <article-title>What McKinsey has to say about developer productivity</article-title>
      <publisher-name>https://getdx.com/blog/mckinsey-developer-productivity/</publisher-name>
      <year iso-8601-date="2024-05">2024</year><month>05</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2025-02-06">2025</year><month>02</month><day>06</day></date-in-citation>
    </element-citation>
  </ref>
  <ref id="ref-burknerAdvancedBayesianMultilevel2018">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Bürkner</surname><given-names>Paul-Christian</given-names></name>
      </person-group>
      <article-title>Advanced Bayesian multilevel modeling with the R package brms</article-title>
      <source>The R Journal</source>
      <year iso-8601-date="2018">2018</year>
      <volume>10</volume>
      <issue>1</issue>
      <pub-id pub-id-type="doi">10.32614/RJ-2018-017</pub-id>
      <fpage>395</fpage>
      <lpage>411</lpage>
    </element-citation>
  </ref>
  <ref id="ref-burknerBayesianItemResponse2021">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Bürkner</surname><given-names>Paul-Christian</given-names></name>
      </person-group>
      <article-title>Bayesian Item Response Modeling in R with brms and Stan</article-title>
      <source>Journal of Statistical Software</source>
      <year iso-8601-date="2021-11">2021</year><month>11</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2025-02-11">2025</year><month>02</month><day>11</day></date-in-citation>
      <volume>100</volume>
      <issn>1548-7660</issn>
      <pub-id pub-id-type="doi">10.18637/jss.v100.i05</pub-id>
      <fpage>1</fpage>
      <lpage>54</lpage>
    </element-citation>
  </ref>
  <ref id="ref-burknerBrmsPackageBayesian2017">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Bürkner</surname><given-names>Paul-Christian</given-names></name>
      </person-group>
      <article-title>Brms: An R Package for Bayesian Multilevel Models Using Stan</article-title>
      <source>Journal of Statistical Software</source>
      <year iso-8601-date="2017-08">2017</year><month>08</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2021-03-26">2021</year><month>03</month><day>26</day></date-in-citation>
      <volume>80</volume>
      <issue>1</issue>
      <issn>1548-7660</issn>
      <pub-id pub-id-type="doi">10.18637/jss.v080.i01</pub-id>
      <fpage>1</fpage>
      <lpage>28</lpage>
    </element-citation>
  </ref>
  <ref id="ref-burknerPosteriorToolsWorking2023">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Bürkner</surname><given-names>Paul-Christian</given-names></name>
        <name><surname>Gabry</surname><given-names>Jonah</given-names></name>
        <name><surname>Kay</surname><given-names>Matthew</given-names></name>
        <name><surname>Vehtari</surname><given-names>Aki</given-names></name>
      </person-group>
      <article-title>Posterior: Tools for working with posterior distributions</article-title>
      <year iso-8601-date="2023">2023</year>
    </element-citation>
  </ref>
  <ref id="ref-caesensPerceivedOrganizationalSupport2017">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Caesens</surname><given-names>Gaëtane</given-names></name>
        <name><surname>Stinglhamber</surname><given-names>Florence</given-names></name>
        <name><surname>Demoulin</surname><given-names>Stéphanie</given-names></name>
        <name><surname>De Wilde</surname><given-names>Matthias</given-names></name>
      </person-group>
      <article-title>Perceived organizational support and employees’ well-being: The mediating role of organizational dehumanization</article-title>
      <source>European Journal of Work and Organizational Psychology</source>
      <publisher-name>Routledge</publisher-name>
      <year iso-8601-date="2017-07">2017</year><month>07</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2025-02-14">2025</year><month>02</month><day>14</day></date-in-citation>
      <volume>26</volume>
      <issue>4</issue>
      <issn>1359-432X</issn>
      <pub-id pub-id-type="doi">10.1080/1359432X.2017.1319817</pub-id>
      <fpage>527</fpage>
      <lpage>540</lpage>
    </element-citation>
  </ref>
  <ref id="ref-careyWhy70Engineers2024">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Carey</surname><given-names>Scott</given-names></name>
      </person-group>
      <article-title>Why 70% of engineers avoid measuring lines of code</article-title>
      <source>LeadDev</source>
      <publisher-name>https://leaddev.com/reporting/why-70-of-engineers-avoid-measuring-lines-of-code</publisher-name>
      <year iso-8601-date="2024-12">2024</year><month>12</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2024-12-05">2024</year><month>12</month><day>05</day></date-in-citation>
    </element-citation>
  </ref>
  <ref id="ref-carmelCycleTimePackaged1995">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Carmel</surname><given-names>Erran</given-names></name>
      </person-group>
      <article-title>Cycle Time in Packaged Software Firms</article-title>
      <source>Journal of Product Innovation Management</source>
      <year iso-8601-date="1995">1995</year>
      <date-in-citation content-type="access-date"><year iso-8601-date="2025-02-06">2025</year><month>02</month><day>06</day></date-in-citation>
      <volume>12</volume>
      <issue>2</issue>
      <issn>1540-5885</issn>
      <pub-id pub-id-type="doi">10.1111/j.1540-5885.1995.jpim122_0110.xml.x</pub-id>
      <fpage>110</fpage>
      <lpage>123</lpage>
    </element-citation>
  </ref>
  <ref id="ref-chhunejaWhy50Developers2024">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Chhuneja</surname><given-names>Shivam</given-names></name>
      </person-group>
      <article-title>Why 50% Developers Hate DORA Metrics?</article-title>
      <publisher-name>https://middlewarehq.com/blog/why-50-developers-hate-dora-metrics</publisher-name>
      <year iso-8601-date="2024-04">2024</year><month>04</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2025-02-06">2025</year><month>02</month><day>06</day></date-in-citation>
    </element-citation>
  </ref>
  <ref id="ref-clincySoftwareDevelopmentProductivity2003">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Clincy</surname><given-names>Victor</given-names></name>
      </person-group>
      <article-title>Software Development Productivity and Cycle Time Reduction</article-title>
      <source>Journal of Computing Sciences in Colleges</source>
      <year iso-8601-date="2003-12">2003</year><month>12</month>
      <volume>19</volume>
      <issue>2</issue>
      <fpage>278</fpage>
      <lpage>287</lpage>
    </element-citation>
  </ref>
  <ref id="ref-collettModellingSurvivalData1994">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Collett</surname><given-names>D.</given-names></name>
      </person-group>
      <source>Modelling survival data in medical research</source>
      <publisher-name>Chapman &amp; Hall</publisher-name>
      <publisher-loc>London ; New York</publisher-loc>
      <year iso-8601-date="1994">1994</year>
      <edition>1st ed.</edition>
      <isbn>978-0-412-44880-5</isbn>
    </element-citation>
  </ref>
  <ref id="ref-coteOnlyPeopleWho2023">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Coté</surname></name>
      </person-group>
      <article-title>The only people who don’t like metrics are the people being measured, or, developer productivity metrics quicksand</article-title>
      <publisher-name>https://newsletter.cote.io/p/the-only-people-who-dont-like-metrics</publisher-name>
      <year iso-8601-date="2023-02">2023</year><month>02</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2025-02-06">2025</year><month>02</month><day>06</day></date-in-citation>
    </element-citation>
  </ref>
  <ref id="ref-curranDisaggregationPersonPerson2011">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Curran</surname><given-names>Patrick J.</given-names></name>
        <name><surname>Bauer</surname><given-names>Daniel J.</given-names></name>
      </person-group>
      <article-title>The Disaggregation of Within-Person and Between-Person Effects in Longitudinal Models of Change</article-title>
      <source>Annual Review of Psychology</source>
      <year iso-8601-date="2011-01">2011</year><month>01</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2018-10-25">2018</year><month>10</month><day>25</day></date-in-citation>
      <volume>62</volume>
      <issue>1</issue>
      <issn>0066-4308, 1545-2085</issn>
      <pub-id pub-id-type="doi">10.1146/annurev.psych.093008.100356</pub-id>
      <fpage>583</fpage>
      <lpage>619</lpage>
    </element-citation>
  </ref>
  <ref id="ref-denisov-blanchPredictingExpertEvaluations2024">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Denisov-Blanch</surname><given-names>Yegor</given-names></name>
        <name><surname>Ciobanu</surname><given-names>Igor</given-names></name>
        <name><surname>Obstbaum</surname><given-names>Simon</given-names></name>
        <name><surname>Kosinski</surname><given-names>Michal</given-names></name>
      </person-group>
      <article-title>Predicting Expert Evaluations in Software Code Reviews</article-title>
      <publisher-name>arXiv</publisher-name>
      <year iso-8601-date="2024-09">2024</year><month>09</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2024-12-17">2024</year><month>12</month><day>17</day></date-in-citation>
      <uri>https://arxiv.org/abs/2409.15152</uri>
      <pub-id pub-id-type="doi">10.48550/arXiv.2409.15152</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-devanbuBeliefEvidenceEmpirical2016">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Devanbu</surname><given-names>Prem</given-names></name>
        <name><surname>Zimmermann</surname><given-names>Thomas</given-names></name>
        <name><surname>Bird</surname><given-names>Christian</given-names></name>
      </person-group>
      <article-title>Belief &amp; evidence in empirical software engineering</article-title>
      <source>Proceedings of the 38th International Conference on Software Engineering</source>
      <publisher-name>Association for Computing Machinery</publisher-name>
      <publisher-loc>New York, NY, USA</publisher-loc>
      <year iso-8601-date="2016-05">2016</year><month>05</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2025-02-27">2025</year><month>02</month><day>27</day></date-in-citation>
      <isbn>978-1-4503-3900-1</isbn>
      <pub-id pub-id-type="doi">10.1145/2884781.2884812</pub-id>
      <fpage>108</fpage>
      <lpage>119</lpage>
    </element-citation>
  </ref>
  <ref id="ref-eversImprovingEngineeringProductivity1998">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Evers</surname><given-names>J. H.</given-names></name>
        <name><surname>Oehler</surname><given-names>G. M.</given-names></name>
        <name><surname>Tucker</surname><given-names>M. G.</given-names></name>
      </person-group>
      <article-title>Improving engineering productivity: A time study of an engineer’s typical work day</article-title>
      <source>IEMC ’98 Proceedings. International Conference on Engineering and Technology Management. Pioneering New Technologies: Management Issues and Challenges in the Third Millennium (Cat. No.98CH36266)</source>
      <year iso-8601-date="1998-10">1998</year><month>10</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2025-02-07">2025</year><month>02</month><day>07</day></date-in-citation>
      <pub-id pub-id-type="doi">10.1109/IEMC.1998.727789</pub-id>
      <fpage>377</fpage>
      <lpage>383</lpage>
    </element-citation>
  </ref>
  <ref id="ref-finster5MinuteDevOps2023">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Finster</surname><given-names>Bryan</given-names></name>
      </person-group>
      <article-title>5 Minute DevOps: McKinsey Gets Developer Productivity Wrong</article-title>
      <source>Medium</source>
      <year iso-8601-date="2023-09">2023</year><month>09</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2025-02-06">2025</year><month>02</month><day>06</day></date-in-citation>
    </element-citation>
  </ref>
  <ref id="ref-flowHowIncreaseSoftware">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Flow</surname></name>
      </person-group>
      <article-title>How to increase software delivery speeds by reducing cycle time</article-title>
    </element-citation>
  </ref>
  <ref id="ref-fraserNoSilverBullet2007">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Fraser</surname><given-names>Steven D.</given-names></name>
        <name><surname>Brooks</surname><given-names>Frederick P.</given-names></name>
        <name><surname>Fowler</surname><given-names>Martin</given-names></name>
        <name><surname>Lopez</surname><given-names>Ricardo</given-names></name>
        <name><surname>Namioka</surname><given-names>Aki</given-names></name>
        <name><surname>Northrop</surname><given-names>Linda</given-names></name>
        <name><surname>Parnas</surname><given-names>David Lorge</given-names></name>
        <name><surname>Thomas</surname><given-names>David</given-names></name>
      </person-group>
      <article-title>&quot;No silver bullet&quot; reloaded: Retrospective on &quot;essence and accidents of software engineering&quot;</article-title>
      <source>Companion to the 22nd ACM SIGPLAN conference on Object-oriented programming systems and applications companion</source>
      <publisher-name>Association for Computing Machinery</publisher-name>
      <publisher-loc>New York, NY, USA</publisher-loc>
      <year iso-8601-date="2007-10">2007</year><month>10</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2025-02-14">2025</year><month>02</month><day>14</day></date-in-citation>
      <isbn>978-1-59593-865-7</isbn>
      <pub-id pub-id-type="doi">10.1145/1297846.1297973</pub-id>
      <fpage>1026</fpage>
      <lpage>1030</lpage>
    </element-citation>
  </ref>
  <ref id="ref-gabryCmdstanrInterfaceCmdStan2024">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Gabry</surname><given-names>Jonah</given-names></name>
        <name><surname>Češnovar</surname><given-names>Rok</given-names></name>
        <name><surname>Johnson</surname><given-names>Andrew</given-names></name>
        <name><surname>Bronder</surname><given-names>Steve</given-names></name>
      </person-group>
      <source>Cmdstanr: R Interface to ’CmdStan’</source>
      <year iso-8601-date="2024">2024</year>
    </element-citation>
  </ref>
  <ref id="ref-gelman">
    <element-citation publication-type="report">
      <person-group person-group-type="author">
        <string-name>Stan Development Team</string-name>
      </person-group>
      <article-title>Stan Modeling Language Users Guide and Reference Manual, 2.35</article-title>
      <year iso-8601-date="2024">2024</year>
    </element-citation>
  </ref>
  <ref id="ref-GelmanPowerCalculationsAssessing2014">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Gelman</surname><given-names>Andrew</given-names></name>
        <name><surname>Carlin</surname><given-names>John</given-names></name>
      </person-group>
      <article-title>Beyond Power Calculations Assessing Type S (Sign) and Type M (Magnitude) Errors</article-title>
      <source>Perspectives on Psychological Science</source>
      <year iso-8601-date="2014-11">2014</year><month>11</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2015-01-15">2015</year><month>01</month><day>15</day></date-in-citation>
      <volume>9</volume>
      <issue>6</issue>
      <issn>1745-6916, 1745-6924</issn>
      <pub-id pub-id-type="doi">10.1177/1745691614551642</pub-id>
      <fpage>641</fpage>
      <lpage>651</lpage>
    </element-citation>
  </ref>
  <ref id="ref-gohelFlextableFunctionsTabular2024">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Gohel</surname><given-names>David</given-names></name>
        <name><surname>Skintzos</surname><given-names>Panagiotis</given-names></name>
      </person-group>
      <source>Flextable: Functions for tabular reporting</source>
      <year iso-8601-date="2024">2024</year>
    </element-citation>
  </ref>
  <ref id="ref-gralhaReduceCycleTime2022">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Gralha</surname><given-names>Catarina</given-names></name>
      </person-group>
      <article-title>Reduce cycle time - best practices</article-title>
      <year iso-8601-date="2022-08">2022</year><month>08</month>
    </element-citation>
  </ref>
  <ref id="ref-griffinMetricsMeasuringProduct1993">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Griffin</surname><given-names>Abbie</given-names></name>
      </person-group>
      <article-title>Metrics for Measuring Product Development Cycle Time</article-title>
      <source>Journal of Product Innovation Management</source>
      <year iso-8601-date="1993">1993</year>
      <date-in-citation content-type="access-date"><year iso-8601-date="2025-02-14">2025</year><month>02</month><day>14</day></date-in-citation>
      <volume>10</volume>
      <issue>2</issue>
      <issn>1540-5885</issn>
      <pub-id pub-id-type="doi">10.1111/1540-5885.1020112</pub-id>
      <fpage>112</fpage>
      <lpage>125</lpage>
    </element-citation>
  </ref>
  <ref id="ref-grisoldDigitalSurveillanceOrganizations2024">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Grisold</surname><given-names>Thomas</given-names></name>
        <name><surname>Seidel</surname><given-names>Stefan</given-names></name>
        <name><surname>Heck</surname><given-names>Markus</given-names></name>
        <name><surname>Berente</surname><given-names>Nicholas</given-names></name>
      </person-group>
      <article-title>Digital Surveillance in Organizations</article-title>
      <source>Business &amp; Information Systems Engineering</source>
      <year iso-8601-date="2024-06">2024</year><month>06</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2025-02-06">2025</year><month>02</month><day>06</day></date-in-citation>
      <volume>66</volume>
      <issue>3</issue>
      <issn>1867-0202</issn>
      <pub-id pub-id-type="doi">10.1007/s12599-024-00866-7</pub-id>
      <fpage>401</fpage>
      <lpage>410</lpage>
    </element-citation>
  </ref>
  <ref id="ref-guoNotMyBug2011">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Guo</surname><given-names>Philip J.</given-names></name>
        <name><surname>Zimmermann</surname><given-names>Thomas</given-names></name>
        <name><surname>Nagappan</surname><given-names>Nachiappan</given-names></name>
        <name><surname>Murphy</surname><given-names>Brendan</given-names></name>
      </person-group>
      <article-title>&quot;Not my bug!&quot; and other reasons for software bug report reassignments</article-title>
      <source>Proceedings of the ACM 2011 conference on Computer supported cooperative work</source>
      <publisher-name>ACM</publisher-name>
      <publisher-loc>Hangzhou China</publisher-loc>
      <year iso-8601-date="2011-03">2011</year><month>03</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2024-10-02">2024</year><month>10</month><day>02</day></date-in-citation>
      <isbn>978-1-4503-0556-3</isbn>
      <pub-id pub-id-type="doi">10.1145/1958824.1958887</pub-id>
      <fpage>395</fpage>
      <lpage>404</lpage>
    </element-citation>
  </ref>
  <ref id="ref-guptaKeyDriversReduced1998">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Gupta</surname><given-names>Ashok K.</given-names></name>
        <name><surname>Souder</surname><given-names>William E.</given-names></name>
      </person-group>
      <article-title>Key Drivers of Reduced Cycle Time</article-title>
      <source>Research-Technology Management</source>
      <publisher-name>Routledge</publisher-name>
      <year iso-8601-date="1998-07">1998</year><month>07</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2025-02-06">2025</year><month>02</month><day>06</day></date-in-citation>
      <volume>41</volume>
      <issue>4</issue>
      <issn>0895-6308</issn>
      <pub-id pub-id-type="doi">10.1080/08956308.1998.11671221</pub-id>
      <fpage>38</fpage>
      <lpage>43</lpage>
    </element-citation>
  </ref>
  <ref id="ref-harrellRegressionModelingStrategies2015">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Harrell</surname><given-names>Frank E.</given-names></name>
      </person-group>
      <source>Regression Modeling Strategies: With Applications to Linear Models, Logistic and Ordinal Regression, and Survival Analysis</source>
      <publisher-name>Springer International Publishing</publisher-name>
      <publisher-loc>Cham</publisher-loc>
      <year iso-8601-date="2015">2015</year>
      <date-in-citation content-type="access-date"><year iso-8601-date="2024-10-08">2024</year><month>10</month><day>08</day></date-in-citation>
      <isbn>978-3-319-19424-0 978-3-319-19425-7</isbn>
      <pub-id pub-id-type="doi">10.1007/978-3-319-19425-7</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-henryRlangFunctionsBase2024">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Henry</surname><given-names>Lionel</given-names></name>
        <name><surname>Wickham</surname><given-names>Hadley</given-names></name>
      </person-group>
      <source>Rlang: Functions for base types and core R and ’tidyverse’ features</source>
      <year iso-8601-date="2024">2024</year>
    </element-citation>
  </ref>
  <ref id="ref-hicksCumulativeCultureTheory2024">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Hicks</surname><given-names>Catherine M.</given-names></name>
        <name><surname>Hevesi</surname><given-names>Ana</given-names></name>
      </person-group>
      <article-title>A Cumulative Culture Theory for Developer Problem-Solving</article-title>
      <publisher-name>PsyArXiv</publisher-name>
      <year iso-8601-date="2024-11">2024</year><month>11</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2025-02-05">2025</year><month>02</month><day>05</day></date-in-citation>
      <pub-id pub-id-type="doi">10.31234/osf.io/tfjyw</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-hicksDeveloperThrivingFour2023">
    <element-citation publication-type="report">
      <person-group person-group-type="author">
        <name><surname>Hicks</surname><given-names>Catherine</given-names></name>
        <name><surname>Lee</surname><given-names>Carol S.</given-names></name>
        <name><surname>Ramsey</surname><given-names>Morgan</given-names></name>
      </person-group>
      <article-title>Developer Thriving: The four factors that drive Software Developer Productivity across Industries</article-title>
      <publisher-name>Developer Success Lab at Pluralsight</publisher-name>
      <year iso-8601-date="2023-03">2023</year><month>03</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2025-01-08">2025</year><month>01</month><day>08</day></date-in-citation>
    </element-citation>
  </ref>
  <ref id="ref-hicksDeveloperThrivingFour2024">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Hicks</surname><given-names>Catherine M.</given-names></name>
        <name><surname>Lee</surname><given-names>Carol S.</given-names></name>
        <name><surname>Ramsey</surname><given-names>Morgan</given-names></name>
      </person-group>
      <article-title>Developer Thriving: Four Sociocognitive Factors That Create Resilient Productivity on Software Teams</article-title>
      <source>IEEE Software</source>
      <year iso-8601-date="2024-07">2024</year><month>07</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2025-01-08">2025</year><month>01</month><day>08</day></date-in-citation>
      <volume>41</volume>
      <issue>4</issue>
      <issn>1937-4194</issn>
      <pub-id pub-id-type="doi">10.1109/MS.2024.3382957</pub-id>
      <fpage>68</fpage>
      <lpage>77</lpage>
    </element-citation>
  </ref>
  <ref id="ref-hicksNewDeveloperAI2024">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Hicks</surname><given-names>Catherine M.</given-names></name>
        <name><surname>Lee</surname><given-names>Carol</given-names></name>
        <name><surname>Foster-Marks</surname><given-names>Kristen</given-names></name>
      </person-group>
      <article-title>The New Developer: AI Skill Threat, Identity Change &amp; Developer Thriving in the Transition to AI-Assisted Software Development</article-title>
      <publisher-name>OSF</publisher-name>
      <year iso-8601-date="2024-04">2024</year><month>04</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2024-10-02">2024</year><month>10</month><day>02</day></date-in-citation>
      <pub-id pub-id-type="doi">10.31234/osf.io/2gej5</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-hicksPsychologicalAffordancesCan2024">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Hicks</surname><given-names>Catherine M.</given-names></name>
      </person-group>
      <article-title>Psychological Affordances Can Provide a Missing Explanatory Layer for Why Interventions to Improve Developer Experience Take Hold or Fail</article-title>
      <publisher-name>OSF</publisher-name>
      <year iso-8601-date="2024-01">2024</year><month>01</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2025-02-15">2025</year><month>02</month><day>15</day></date-in-citation>
      <pub-id pub-id-type="doi">10.31234/osf.io/qz43x</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-kayTidybayesTidyData2023">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Kay</surname><given-names>Matthew</given-names></name>
      </person-group>
      <source>tidybayes: Tidy data and geoms for Bayesian models</source>
      <year iso-8601-date="2023">2023</year>
      <pub-id pub-id-type="doi">10.5281/zenodo.1308151</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-kitchenhamEvidencebasedSoftwareEngineering2004">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Kitchenham</surname><given-names>B. A.</given-names></name>
        <name><surname>Dyba</surname><given-names>T.</given-names></name>
        <name><surname>Jorgensen</surname><given-names>M.</given-names></name>
      </person-group>
      <article-title>Evidence-based software engineering</article-title>
      <source>Proceedings. 26th International Conference on Software Engineering</source>
      <year iso-8601-date="2004-05">2004</year><month>05</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2025-02-28">2025</year><month>02</month><day>28</day></date-in-citation>
      <issn>0270-5257</issn>
      <pub-id pub-id-type="doi">10.1109/ICSE.2004.1317449</pub-id>
      <fpage>273</fpage>
      <lpage>281</lpage>
    </element-citation>
  </ref>
  <ref id="ref-kruschkeRejectingAcceptingParameter2018">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Kruschke</surname><given-names>John K.</given-names></name>
      </person-group>
      <article-title>Rejecting or Accepting Parameter Values in Bayesian Estimation</article-title>
      <source>Advances in Methods and Practices in Psychological Science</source>
      <publisher-name>SAGE Publications Inc</publisher-name>
      <year iso-8601-date="2018-06">2018</year><month>06</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2025-02-26">2025</year><month>02</month><day>26</day></date-in-citation>
      <volume>1</volume>
      <issue>2</issue>
      <issn>2515-2459</issn>
      <pub-id pub-id-type="doi">10.1177/2515245918771304</pub-id>
      <fpage>270</fpage>
      <lpage>280</lpage>
    </element-citation>
  </ref>
  <ref id="ref-kudrjavetsSmallCodeChanges2022">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Kudrjavets</surname><given-names>Gunnar</given-names></name>
        <name><surname>Nagappan</surname><given-names>Nachiappan</given-names></name>
        <name><surname>Rastogi</surname><given-names>Ayushi</given-names></name>
      </person-group>
      <article-title>Do small code changes merge faster?: A multi-language empirical investigation</article-title>
      <source>Proceedings of the 19th International Conference on Mining Software Repositories</source>
      <publisher-name>ACM</publisher-name>
      <publisher-loc>Pittsburgh Pennsylvania</publisher-loc>
      <year iso-8601-date="2022-05">2022</year><month>05</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2025-02-11">2025</year><month>02</month><day>11</day></date-in-citation>
      <isbn>978-1-4503-9303-4</isbn>
      <pub-id pub-id-type="doi">10.1145/3524842.3528448</pub-id>
      <fpage>537</fpage>
      <lpage>548</lpage>
    </element-citation>
  </ref>
  <ref id="ref-lagiosExplainingNegativeConsequences2022">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Lagios</surname><given-names>Constantin</given-names></name>
        <name><surname>Caesens</surname><given-names>Gaëtane</given-names></name>
        <name><surname>Nguyen</surname><given-names>Nathan</given-names></name>
        <name><surname>Stinglhamber</surname><given-names>Florence</given-names></name>
      </person-group>
      <article-title>Explaining the Negative Consequences of Organizational Dehumanization</article-title>
      <source>Journal of Personnel Psychology</source>
      <publisher-name>Hogrefe Publishing</publisher-name>
      <year iso-8601-date="2022-04">2022</year><month>04</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2025-02-14">2025</year><month>02</month><day>14</day></date-in-citation>
      <volume>21</volume>
      <issue>2</issue>
      <issn>1866-5888</issn>
      <pub-id pub-id-type="doi">10.1027/1866-5888/a000286</pub-id>
      <fpage>86</fpage>
      <lpage>93</lpage>
    </element-citation>
  </ref>
  <ref id="ref-lawlessStatisticalModelsMethods2003">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Lawless</surname><given-names>Jerald F.</given-names></name>
      </person-group>
      <source>Statistical models and methods for lifetime data</source>
      <publisher-name>Wiley-Interscience</publisher-name>
      <publisher-loc>Hoboken, N.J.</publisher-loc>
      <year iso-8601-date="2003">2003</year>
      <edition>2nd ed.</edition>
      <isbn>978-0-471-37215-8</isbn>
    </element-citation>
  </ref>
  <ref id="ref-linesWhyEliteDev2023">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Lines</surname><given-names>Dan</given-names></name>
      </person-group>
      <article-title>Why elite dev teams focus on pull-request metrics</article-title>
      <source>LeadDev</source>
      <publisher-name>https://leaddev.com/reporting/why-elite-dev-teams-focus-pull-request-metrics</publisher-name>
      <year iso-8601-date="2023-05">2023</year><month>05</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2025-02-07">2025</year><month>02</month><day>07</day></date-in-citation>
    </element-citation>
  </ref>
  <ref id="ref-ludeckeExtractingComputingExploring2020">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Lüdecke</surname><given-names>Daniel</given-names></name>
        <name><surname>Ben-Shachar</surname><given-names>Mattan S.</given-names></name>
        <name><surname>Patil</surname><given-names>Indrajeet</given-names></name>
        <name><surname>Makowski</surname><given-names>Dominique</given-names></name>
      </person-group>
      <article-title>Extracting, computing and exploring the parameters of statistical models using R.</article-title>
      <source>Journal of Open Source Software</source>
      <year iso-8601-date="2020">2020</year>
      <volume>5</volume>
      <issue>53</issue>
      <pub-id pub-id-type="doi">10.21105/joss.02445</pub-id>
      <fpage>2445</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-maxwellSoftwareDevelopmentProductivity1996">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Maxwell</surname><given-names>K. D.</given-names></name>
        <name><surname>Van Wassenhove</surname><given-names>L.</given-names></name>
        <name><surname>Dutta</surname><given-names>S.</given-names></name>
      </person-group>
      <article-title>Software development productivity of European space, military, and industrial applications</article-title>
      <source>IEEE Transactions on Software Engineering</source>
      <year iso-8601-date="1996-10">1996</year><month>10</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2025-02-05">2025</year><month>02</month><day>05</day></date-in-citation>
      <volume>22</volume>
      <issue>10</issue>
      <issn>1939-3520</issn>
      <pub-id pub-id-type="doi">10.1109/32.544349</pub-id>
      <fpage>706</fpage>
      <lpage>718</lpage>
    </element-citation>
  </ref>
  <ref id="ref-mcelreathStatisticalRethinkingBayesian2020">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>McElreath</surname><given-names>Richard</given-names></name>
      </person-group>
      <source>Statistical Rethinking: A Bayesian Course with Examples in R and Stan</source>
      <publisher-name>Chapman and Hall/CRC</publisher-name>
      <publisher-loc>Boca Raton</publisher-loc>
      <year iso-8601-date="2020-03">2020</year><month>03</month>
      <edition>2</edition>
      <isbn>978-0-429-02960-8</isbn>
      <pub-id pub-id-type="doi">10.1201/9780429029608</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-mettlerConnectedWorkplaceCharacteristics2024">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Mettler</surname><given-names>Tobias</given-names></name>
      </person-group>
      <article-title>The connected workplace: Characteristics and social consequences of work surveillance in the age of datification, sensorization, and artificial intelligence</article-title>
      <source>Journal of Information Technology</source>
      <publisher-name>SAGE Publications Ltd</publisher-name>
      <year iso-8601-date="2024-09">2024</year><month>09</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2025-02-06">2025</year><month>02</month><day>06</day></date-in-citation>
      <volume>39</volume>
      <issue>3</issue>
      <issn>0268-3962</issn>
      <pub-id pub-id-type="doi">10.1177/02683962231202535</pub-id>
      <fpage>547</fpage>
      <lpage>567</lpage>
    </element-citation>
  </ref>
  <ref id="ref-meyerTodayWasGood2021">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Meyer</surname><given-names>Andre N.</given-names></name>
        <name><surname>Barr</surname><given-names>Earl T.</given-names></name>
        <name><surname>Bird</surname><given-names>Christian</given-names></name>
        <name><surname>Zimmermann</surname><given-names>Thomas</given-names></name>
      </person-group>
      <article-title>Today Was a Good Day: The Daily Life of Software Developers</article-title>
      <source>IEEE Transactions on Software Engineering</source>
      <year iso-8601-date="2021-05">2021</year><month>05</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2024-10-17">2024</year><month>10</month><day>17</day></date-in-citation>
      <volume>47</volume>
      <issue>5</issue>
      <issn>0098-5589, 1939-3520, 2326-3881</issn>
      <pub-id pub-id-type="doi">10.1109/TSE.2019.2904957</pub-id>
      <fpage>863</fpage>
      <lpage>880</lpage>
    </element-citation>
  </ref>
  <ref id="ref-murphy-hillWhatPredictsSoftware2021">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Murphy-Hill</surname><given-names>Emerson</given-names></name>
        <name><surname>Jaspan</surname><given-names>Ciera</given-names></name>
        <name><surname>Sadowski</surname><given-names>Caitlin</given-names></name>
        <name><surname>Shepherd</surname><given-names>David</given-names></name>
        <name><surname>Phillips</surname><given-names>Michael</given-names></name>
        <name><surname>Winter</surname><given-names>Collin</given-names></name>
        <name><surname>Knight</surname><given-names>Andrea</given-names></name>
        <name><surname>Smith</surname><given-names>Edward</given-names></name>
        <name><surname>Jorde</surname><given-names>Matthew</given-names></name>
      </person-group>
      <article-title>What Predicts Software Developers’ Productivity?</article-title>
      <source>IEEE Transactions on Software Engineering</source>
      <year iso-8601-date="2021-03">2021</year><month>03</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2024-10-02">2024</year><month>10</month><day>02</day></date-in-citation>
      <volume>47</volume>
      <issue>3</issue>
      <issn>0098-5589, 1939-3520, 2326-3881</issn>
      <pub-id pub-id-type="doi">10.1109/TSE.2019.2900308</pub-id>
      <fpage>582</fpage>
      <lpage>594</lpage>
    </element-citation>
  </ref>
  <ref id="ref-nanImpactBudgetSchedule2009">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Nan</surname><given-names>Ning</given-names></name>
        <name><surname>Harter</surname><given-names>Donald E.</given-names></name>
      </person-group>
      <article-title>Impact of Budget and Schedule Pressure on Software Development Cycle Time and Effort</article-title>
      <source>IEEE Transactions on Software Engineering</source>
      <year iso-8601-date="2009-09">2009</year><month>09</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2025-02-07">2025</year><month>02</month><day>07</day></date-in-citation>
      <volume>35</volume>
      <issue>5</issue>
      <issn>1939-3520</issn>
      <pub-id pub-id-type="doi">10.1109/TSE.2009.18</pub-id>
      <fpage>624</fpage>
      <lpage>637</lpage>
    </element-citation>
  </ref>
  <ref id="ref-nelsonAppliedLifeData1982">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Nelson</surname><given-names>Wayne</given-names></name>
      </person-group>
      <source>Applied life data analysis</source>
      <publisher-name>Wiley</publisher-name>
      <publisher-loc>New York</publisher-loc>
      <year iso-8601-date="1982">1982</year>
      <isbn>978-0-471-09458-6</isbn>
    </element-citation>
  </ref>
  <ref id="ref-nicholsEndMythIndividual2019">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Nichols</surname><given-names>William R.</given-names></name>
      </person-group>
      <article-title>The End to the Myth of Individual Programmer Productivity</article-title>
      <source>IEEE Software</source>
      <year iso-8601-date="2019-09">2019</year><month>09</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2024-10-02">2024</year><month>10</month><day>02</day></date-in-citation>
      <volume>36</volume>
      <issue>5</issue>
      <issn>1937-4194</issn>
      <pub-id pub-id-type="doi">10.1109/MS.2019.2908576</pub-id>
      <fpage>71</fpage>
      <lpage>75</lpage>
    </element-citation>
  </ref>
  <ref id="ref-nisocreditworkinggroupANSINISOZ3910420222022">
    <element-citation>
      <person-group person-group-type="author">
        <string-name>NISO CRediT Working Group</string-name>
      </person-group>
      <article-title>ANSI/NISO Z39.104-2022, CRediT, Contributor Roles Taxonomy</article-title>
      <publisher-name>NISO</publisher-name>
      <publisher-loc>3600 Clipper Mill Road Suite 302 Baltimore, MD 21211</publisher-loc>
      <year iso-8601-date="2022-01">2022</year><month>01</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2025-01-08">2025</year><month>01</month><day>08</day></date-in-citation>
      <pub-id pub-id-type="doi">10.3789/ansi.niso.z39.104-2022</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-obstbaumOngoingResearchSoftware">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Obstbaum</surname><given-names>Simon</given-names></name>
        <name><surname>Denisov-Blanch</surname><given-names>Yegor</given-names></name>
      </person-group>
      <article-title>Ongoing Research on Software Engineering Productivity</article-title>
    </element-citation>
  </ref>
  <ref id="ref-oroszMeasuringDeveloperProductivity2024">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Orosz</surname><given-names>Gergely</given-names></name>
      </person-group>
      <article-title>Measuring developer productivity? A response to McKinsey</article-title>
      <publisher-name>https://newsletter.pragmaticengineer.com/p/measuring-developer-productivity</publisher-name>
      <year iso-8601-date="2024-01">2024</year><month>01</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2025-01-08">2025</year><month>01</month><day>08</day></date-in-citation>
    </element-citation>
  </ref>
  <ref id="ref-oroszMeasuringDeveloperProductivity2024a">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Orosz</surname><given-names>Gergely</given-names></name>
      </person-group>
      <article-title>Measuring developer productivity? A response to McKinsey, Part 2</article-title>
      <publisher-name>https://newsletter.pragmaticengineer.com/p/measuring-developer-productivity-part-2</publisher-name>
      <year iso-8601-date="2024-10">2024</year><month>10</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2025-02-06">2025</year><month>02</month><day>06</day></date-in-citation>
    </element-citation>
  </ref>
  <ref id="ref-paudelMeasuringImpactTechnical2024">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Paudel</surname><given-names>Bhuwan</given-names></name>
        <name><surname>Gonzalez-Huerta</surname><given-names>Javier</given-names></name>
        <name><surname>Zabardast</surname><given-names>Ehsan</given-names></name>
        <name><surname>Klotins</surname><given-names>Eriks</given-names></name>
      </person-group>
      <article-title>Towards Measuring the Impact of Technical Debt on Lead Time: An Industrial Case Study</article-title>
      <publisher-name>arXiv</publisher-name>
      <year iso-8601-date="2024-06">2024</year><month>06</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2025-02-07">2025</year><month>02</month><day>07</day></date-in-citation>
      <uri>https://arxiv.org/abs/2406.01578</uri>
      <pub-id pub-id-type="doi">10.48550/arXiv.2406.01578</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-pedersenPatchworkComposerPlots2024">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Pedersen</surname><given-names>Thomas Lin</given-names></name>
      </person-group>
      <source>Patchwork: The composer of plots</source>
      <year iso-8601-date="2024">2024</year>
    </element-citation>
  </ref>
  <ref id="ref-pedersenScicoColourPalettes2025">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Pedersen</surname><given-names>Thomas Lin</given-names></name>
        <name><surname>Crameri</surname><given-names>Fabio</given-names></name>
      </person-group>
      <source>Scico: Colour palettes based on the scientific colour-maps</source>
      <year iso-8601-date="2025">2025</year>
    </element-citation>
  </ref>
  <ref id="ref-qiuShowtextUsingFonts2024">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Qiu</surname><given-names>Yixuan</given-names></name>
        <name><surname>details.</surname><given-names>authors/contributors of the included software. See file AUTHORS for</given-names></name>
      </person-group>
      <source>Showtext: Using fonts more easily in R graphs</source>
      <year iso-8601-date="2024">2024</year>
    </element-citation>
  </ref>
  <ref id="ref-quadlinMarkWomansRecord2018">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Quadlin</surname><given-names>Natasha</given-names></name>
      </person-group>
      <article-title>The Mark of a Woman’s Record: Gender and Academic Performance in Hiring</article-title>
      <source>American Sociological Review</source>
      <publisher-name>SAGE Publications Inc</publisher-name>
      <year iso-8601-date="2018-04">2018</year><month>04</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2025-02-15">2025</year><month>02</month><day>15</day></date-in-citation>
      <volume>83</volume>
      <issue>2</issue>
      <issn>0003-1224</issn>
      <pub-id pub-id-type="doi">10.1177/0003122418762291</pub-id>
      <fpage>331</fpage>
      <lpage>360</lpage>
    </element-citation>
  </ref>
  <ref id="ref-ramirezMeasuringKnowledgeWorker2004">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Ramírez</surname><given-names>Yuri W.</given-names></name>
        <name><surname>Nembhard</surname><given-names>David A.</given-names></name>
      </person-group>
      <article-title>Measuring knowledge worker productivity</article-title>
      <source>Journal of Intellectual Capital</source>
      <publisher-name>Emerald Group Publishing Limited</publisher-name>
      <year iso-8601-date="2004-01">2004</year><month>01</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2024-10-02">2024</year><month>10</month><day>02</day></date-in-citation>
      <volume>5</volume>
      <issue>4</issue>
      <issn>1469-1930</issn>
      <pub-id pub-id-type="doi">10.1108/14691930410567040</pub-id>
      <fpage>602</fpage>
      <lpage>628</lpage>
    </element-citation>
  </ref>
  <ref id="ref-rcoreteamLanguageEnvironmentStatistical2023">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <string-name>R Core Team</string-name>
      </person-group>
      <source>R: A language and environment for statistical computing</source>
      <publisher-name>R Foundation for Statistical Computing</publisher-name>
      <publisher-loc>Vienna, Austria</publisher-loc>
      <year iso-8601-date="2023">2023</year>
    </element-citation>
  </ref>
  <ref id="ref-rigginsWhatMcKinseyGot2023">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Riggins</surname><given-names>Jennifer</given-names></name>
      </person-group>
      <article-title>What McKinsey got wrong about developer productivity</article-title>
      <source>LeadDev</source>
      <publisher-name>https://leaddev.com/career-development/what-mckinsey-got-wrong-about-developer-productivity</publisher-name>
      <year iso-8601-date="2023-10">2023</year><month>10</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2024-12-17">2024</year><month>12</month><day>17</day></date-in-citation>
    </element-citation>
  </ref>
  <ref id="ref-riosaWrittenUnwrittenGuide2019">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Riosa</surname><given-names>Blake</given-names></name>
      </person-group>
      <article-title>The (written) unwritten guide to pull requests</article-title>
      <source>Work Life by Atlassian</source>
      <publisher-name>https://www.atlassian.com/blog/git/written-unwritten-guide-pull-requests</publisher-name>
      <year iso-8601-date="2019-07">2019</year><month>07</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2025-02-07">2025</year><month>02</month><day>07</day></date-in-citation>
    </element-citation>
  </ref>
  <ref id="ref-rosserSystemsPerspectiveTechnical2021">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Rosser</surname><given-names>Larri Ann</given-names></name>
        <name><surname>Norton</surname><given-names>John H</given-names></name>
      </person-group>
      <article-title>A Systems Perspective on Technical Debt</article-title>
      <source>2021 IEEE Aerospace Conference (50100)</source>
      <year iso-8601-date="2021-03">2021</year><month>03</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2025-02-07">2025</year><month>02</month><day>07</day></date-in-citation>
      <issn>1095-323X</issn>
      <pub-id pub-id-type="doi">10.1109/AERO50100.2021.9438359</pub-id>
      <fpage>1</fpage>
      <lpage>10</lpage>
    </element-citation>
  </ref>
  <ref id="ref-rummelAverageWeibullAnalysis2017">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Rummel</surname><given-names>Bernard</given-names></name>
      </person-group>
      <article-title>Beyond Average: Weibull Analysis of Task Completion Times</article-title>
      <year iso-8601-date="2017">2017</year>
      <volume>12</volume>
      <issue>2</issue>
    </element-citation>
  </ref>
  <ref id="ref-ruvimovaExploratoryStudyProductivity2022">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Ruvimova</surname><given-names>Anastasia</given-names></name>
        <name><surname>Lill</surname><given-names>Alexander</given-names></name>
        <name><surname>Gugler</surname><given-names>Jan</given-names></name>
        <name><surname>Howe</surname><given-names>Lauren</given-names></name>
        <name><surname>Huang</surname><given-names>Elaine</given-names></name>
        <name><surname>Murphy</surname><given-names>Gail</given-names></name>
        <name><surname>Fritz</surname><given-names>Thomas</given-names></name>
      </person-group>
      <article-title>An exploratory study of productivity perceptions in software teams</article-title>
      <source>Proceedings of the 44th International Conference on Software Engineering</source>
      <publisher-name>ACM</publisher-name>
      <publisher-loc>Pittsburgh Pennsylvania</publisher-loc>
      <year iso-8601-date="2022-05">2022</year><month>05</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2022-11-12">2022</year><month>11</month><day>12</day></date-in-citation>
      <isbn>978-1-4503-9221-1</isbn>
      <pub-id pub-id-type="doi">10.1145/3510003.3510081</pub-id>
      <fpage>99</fpage>
      <lpage>111</lpage>
    </element-citation>
  </ref>
  <ref id="ref-sackmanExploratoryExperimentalStudies1968">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Sackman</surname><given-names>H.</given-names></name>
        <name><surname>Erikson</surname><given-names>W. J.</given-names></name>
        <name><surname>Grant</surname><given-names>E. E.</given-names></name>
      </person-group>
      <article-title>Exploratory experimental studies comparing online and offline programming performance</article-title>
      <source>Communications of the ACM</source>
      <year iso-8601-date="1968-01">1968</year><month>01</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2024-10-02">2024</year><month>10</month><day>02</day></date-in-citation>
      <volume>11</volume>
      <issue>1</issue>
      <issn>0001-0782, 1557-7317</issn>
      <pub-id pub-id-type="doi">10.1145/362851.362858</pub-id>
      <fpage>3</fpage>
      <lpage>11</lpage>
    </element-citation>
  </ref>
  <ref id="ref-sadowskiRethinkingProductivitySoftware2019">
    <element-citation publication-type="book">
      <source>Rethinking Productivity in Software Engineering</source>
      <person-group person-group-type="editor">
        <name><surname>Sadowski</surname><given-names>Caitlin</given-names></name>
        <name><surname>Zimmermann</surname><given-names>Thomas</given-names></name>
      </person-group>
      <publisher-name>Springer Nature</publisher-name>
      <year iso-8601-date="2019">2019</year>
      <date-in-citation content-type="access-date"><year iso-8601-date="2025-02-07">2025</year><month>02</month><day>07</day></date-in-citation>
      <pub-id pub-id-type="doi">10.1007/978-1-4842-4221-6</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-sadowskiSoftwareDevelopmentProductivity2019">
    <element-citation publication-type="chapter">
      <person-group person-group-type="author">
        <name><surname>Sadowski</surname><given-names>Caitlin</given-names></name>
        <name><surname>Storey</surname><given-names>Margaret-Anne</given-names></name>
        <name><surname>Feldt</surname><given-names>Robert</given-names></name>
      </person-group>
      <article-title>A Software Development Productivity Framework</article-title>
      <source>Rethinking Productivity in Software Engineering</source>
      <person-group person-group-type="editor">
        <name><surname>Sadowski</surname><given-names>Caitlin</given-names></name>
        <name><surname>Zimmermann</surname><given-names>Thomas</given-names></name>
      </person-group>
      <publisher-name>Apress</publisher-name>
      <publisher-loc>Berkeley, CA</publisher-loc>
      <year iso-8601-date="2019">2019</year>
      <date-in-citation content-type="access-date"><year iso-8601-date="2024-10-02">2024</year><month>10</month><day>02</day></date-in-citation>
      <isbn>978-1-4842-4220-9 978-1-4842-4221-6</isbn>
      <pub-id pub-id-type="doi">10.1007/978-1-4842-4221-6_5</pub-id>
      <fpage>39</fpage>
      <lpage>47</lpage>
    </element-citation>
  </ref>
  <ref id="ref-SciPyProceedings_11">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Hagberg</surname><given-names>Aric A.</given-names></name>
        <name><surname>Schult</surname><given-names>Daniel A.</given-names></name>
        <name><surname>Swart</surname><given-names>Pieter J.</given-names></name>
      </person-group>
      <article-title>Exploring network structure, dynamics, and function using NetworkX</article-title>
      <source>Proceedings of the 7th python in science conference</source>
      <person-group person-group-type="editor">
        <name><surname>Varoquaux</surname><given-names>Gaël</given-names></name>
        <name><surname>Vaught</surname><given-names>Travis</given-names></name>
        <name><surname>Millman</surname><given-names>Jarrod</given-names></name>
      </person-group>
      <publisher-loc>Pasadena, CA USA</publisher-loc>
      <year iso-8601-date="2008">2008</year>
      <fpage>11</fpage>
      <lpage>15</lpage>
    </element-citation>
  </ref>
  <ref id="ref-shrikanthAssessingPractitionerBeliefs2021">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Shrikanth</surname><given-names>N. C.</given-names></name>
        <name><surname>Nichols</surname><given-names>William</given-names></name>
        <name><surname>Fahid</surname><given-names>Fahmid Morshed</given-names></name>
        <name><surname>Menzies</surname><given-names>Tim</given-names></name>
      </person-group>
      <article-title>Assessing practitioner beliefs about software engineering</article-title>
      <source>Empirical Software Engineering</source>
      <year iso-8601-date="2021-05">2021</year><month>05</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2024-10-02">2024</year><month>10</month><day>02</day></date-in-citation>
      <volume>26</volume>
      <issue>4</issue>
      <issn>1573-7616</issn>
      <pub-id pub-id-type="doi">10.1007/s10664-021-09957-5</pub-id>
      <fpage>73</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-sjobergFutureEmpiricalMethods2007">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Sjoberg</surname><given-names>Dag I. K.</given-names></name>
        <name><surname>Dyba</surname><given-names>Tore</given-names></name>
        <name><surname>Jorgensen</surname><given-names>Magne</given-names></name>
      </person-group>
      <article-title>The Future of Empirical Methods in Software Engineering Research</article-title>
      <source>Future of Software Engineering (FOSE ’07)</source>
      <year iso-8601-date="2007-05">2007</year><month>05</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2025-02-28">2025</year><month>02</month><day>28</day></date-in-citation>
      <pub-id pub-id-type="doi">10.1109/FOSE.2007.30</pub-id>
      <fpage>358</fpage>
      <lpage>378</lpage>
    </element-citation>
  </ref>
  <ref id="ref-standevelopmentteamStanHeadersHeadersInterface2020">
    <element-citation>
      <person-group person-group-type="author">
        <string-name>Stan Development Team</string-name>
      </person-group>
      <article-title>StanHeaders: Headers for the R interface to Stan</article-title>
      <year iso-8601-date="2020">2020</year>
    </element-citation>
  </ref>
  <ref id="ref-storeyHowDevelopersManagers2022">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Storey</surname><given-names>Margaret-Anne</given-names></name>
        <name><surname>Houck</surname><given-names>Brian</given-names></name>
        <name><surname>Zimmermann</surname><given-names>Thomas</given-names></name>
      </person-group>
      <article-title>How Developers and Managers Define and Trade Productivity for Quality</article-title>
      <year iso-8601-date="2022-04">2022</year><month>04</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2022-07-18">2022</year><month>07</month><day>18</day></date-in-citation>
      <uri>https://arxiv.org/abs/2111.04302</uri>
      <pub-id pub-id-type="doi">10.1145/3528579.3529177</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-storeyHowDevelopersManagers2022b">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Storey</surname><given-names>Margaret-Anne</given-names></name>
        <name><surname>Houck</surname><given-names>Brian</given-names></name>
        <name><surname>Zimmermann</surname><given-names>Thomas</given-names></name>
      </person-group>
      <article-title>How Developers and Managers Define and Trade Productivity for Quality</article-title>
      <source>Proceedings of the 15th International Conference on Cooperative and Human Aspects of Software Engineering</source>
      <year iso-8601-date="2022-05">2022</year><month>05</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2024-12-17">2024</year><month>12</month><day>17</day></date-in-citation>
      <uri>https://arxiv.org/abs/2111.04302</uri>
      <pub-id pub-id-type="doi">10.1145/3528579.3529177</pub-id>
      <fpage>26</fpage>
      <lpage>35</lpage>
    </element-citation>
  </ref>
  <ref id="ref-storeyTheorySoftwareDeveloper2021">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Storey</surname><given-names>Margaret-Anne</given-names></name>
        <name><surname>Zimmermann</surname><given-names>Thomas</given-names></name>
        <name><surname>Bird</surname><given-names>Christian</given-names></name>
        <name><surname>Czerwonka</surname><given-names>Jacek</given-names></name>
        <name><surname>Murphy</surname><given-names>Brendan</given-names></name>
        <name><surname>Kalliamvakou</surname><given-names>Eirini</given-names></name>
      </person-group>
      <article-title>Towards a Theory of Software Developer Job Satisfaction and Perceived Productivity</article-title>
      <source>IEEE Transactions on Software Engineering</source>
      <year iso-8601-date="2021-10">2021</year><month>10</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2022-07-18">2022</year><month>07</month><day>18</day></date-in-citation>
      <volume>47</volume>
      <issue>10</issue>
      <issn>0098-5589, 1939-3520, 2326-3881</issn>
      <pub-id pub-id-type="doi">10.1109/TSE.2019.2944354</pub-id>
      <fpage>2125</fpage>
      <lpage>2142</lpage>
    </element-citation>
  </ref>
  <ref id="ref-terhorst-northMcKinseyDeveloperProductivity2023">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Terhorst-North</surname><given-names>Daniel</given-names></name>
      </person-group>
      <article-title>McKinsey Developer Productivity Review</article-title>
      <source>Dan North &amp; Associates Limited</source>
      <publisher-name>https://dannorth.net/mckinsey-review/</publisher-name>
      <year iso-8601-date="2023-10">2023</year><month>10</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2025-02-06">2025</year><month>02</month><day>06</day></date-in-citation>
    </element-citation>
  </ref>
  <ref id="ref-terhorst-northWorstProgrammerKnow2023">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Terhorst-North</surname><given-names>Daniel</given-names></name>
      </person-group>
      <article-title>The Worst Programmer I Know</article-title>
      <source>Dan North &amp; Associates Limited</source>
      <publisher-name>https://dannorth.net/the-worst-programmer/</publisher-name>
      <year iso-8601-date="2023-09">2023</year><month>09</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2025-02-06">2025</year><month>02</month><day>06</day></date-in-citation>
    </element-citation>
  </ref>
  <ref id="ref-toxboeCycleTime2023">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Toxboe</surname><given-names>Anders</given-names></name>
      </person-group>
      <article-title>Cycle Time</article-title>
      <source>Learning Loop</source>
      <publisher-name>https://learningloop.io/glossary/cycle-time</publisher-name>
      <year iso-8601-date="2023-02">2023</year><month>02</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2025-02-07">2025</year><month>02</month><day>07</day></date-in-citation>
    </element-citation>
  </ref>
  <ref id="ref-trendowiczChapter6Factors2009">
    <element-citation publication-type="chapter">
      <person-group person-group-type="author">
        <name><surname>Trendowicz</surname><given-names>Adam</given-names></name>
        <name><surname>Münch</surname><given-names>Jürgen</given-names></name>
      </person-group>
      <article-title>Chapter 6 Factors Influencing Software Development Productivity—State-of-the-Art and Industrial Experiences</article-title>
      <source>Advances in Computers</source>
      <publisher-name>Elsevier</publisher-name>
      <year iso-8601-date="2009-01">2009</year><month>01</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2025-02-07">2025</year><month>02</month><day>07</day></date-in-citation>
      <volume>77</volume>
      <pub-id pub-id-type="doi">10.1016/S0065-2458(09)01206-6</pub-id>
      <fpage>185</fpage>
      <lpage>241</lpage>
    </element-citation>
  </ref>
  <ref id="ref-vehtariRanknormalizationFoldingLocalization2021">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Vehtari</surname><given-names>Aki</given-names></name>
        <name><surname>Gelman</surname><given-names>Andrew</given-names></name>
        <name><surname>Simpson</surname><given-names>Daniel</given-names></name>
        <name><surname>Carpenter</surname><given-names>Bob</given-names></name>
        <name><surname>Bürkner</surname><given-names>Paul-Christian</given-names></name>
      </person-group>
      <article-title>Rank-normalization, folding, and localization: An improved Rhat for assessing convergence of MCMC (with discussion)</article-title>
      <source>Bayesian Analysis</source>
      <year iso-8601-date="2021">2021</year>
    </element-citation>
  </ref>
  <ref id="ref-vonhippelFreeRevealingPrivatecollective2006">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Von Hippel</surname><given-names>Eric</given-names></name>
        <name><surname>Von Krogh</surname><given-names>Georg</given-names></name>
      </person-group>
      <article-title>Free revealing and the private-collective model for innovation incentives</article-title>
      <source>R and D Management</source>
      <year iso-8601-date="2006-06">2006</year><month>06</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2025-02-05">2025</year><month>02</month><day>05</day></date-in-citation>
      <volume>36</volume>
      <issue>3</issue>
      <issn>0033-6807, 1467-9310</issn>
      <pub-id pub-id-type="doi">10.1111/j.1467-9310.2006.00435.x</pub-id>
      <fpage>295</fpage>
      <lpage>306</lpage>
    </element-citation>
  </ref>
  <ref id="ref-walkerConsUsingSPACE2023">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Walker</surname><given-names>James</given-names></name>
      </person-group>
      <article-title>Cons of Using SPACE to Measure Productivity  Aviator</article-title>
      <year iso-8601-date="2023-02">2023</year><month>02</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2025-02-06">2025</year><month>02</month><day>06</day></date-in-citation>
    </element-citation>
  </ref>
  <ref id="ref-walkerEverythingWrongDORA2023">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Walker</surname><given-names>James</given-names></name>
      </person-group>
      <article-title>Everything Wrong with DORA Metrics  Aviator</article-title>
      <year iso-8601-date="2023-01">2023</year><month>01</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2025-02-06">2025</year><month>02</month><day>06</day></date-in-citation>
    </element-citation>
  </ref>
  <ref id="ref-wattsNewScienceNetworks2004">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Watts</surname><given-names>Duncan J.</given-names></name>
      </person-group>
      <article-title>The “New” Science of Networks</article-title>
      <source>Annual Review of Sociology</source>
      <publisher-name>Annual Reviews</publisher-name>
      <year iso-8601-date="2004-08">2004</year><month>08</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2025-02-28">2025</year><month>02</month><day>28</day></date-in-citation>
      <volume>30</volume>
      <issue>Volume 30, 2004</issue>
      <issn>0360-0572, 1545-2115</issn>
      <pub-id pub-id-type="doi">10.1146/annurev.soc.30.020404.104342</pub-id>
      <fpage>243</fpage>
      <lpage>270</lpage>
    </element-citation>
  </ref>
  <ref id="ref-waydevCycleTimeFormula2021">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Waydev</surname></name>
      </person-group>
      <article-title>Cycle Time Formula: How to Optimize the Key Metric to Accelerate Software Delivery</article-title>
      <year iso-8601-date="2021-07">2021</year><month>07</month>
    </element-citation>
  </ref>
  <ref id="ref-wickhamGgplot2ElegantGraphics2016">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Wickham</surname><given-names>Hadley</given-names></name>
      </person-group>
      <source>Ggplot2: Elegant graphics for data analysis</source>
      <publisher-name>Springer-Verlag New York</publisher-name>
      <year iso-8601-date="2016">2016</year>
      <isbn>978-3-319-24277-4</isbn>
    </element-citation>
  </ref>
  <ref id="ref-wickhamScalesScaleFunctions2023">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Wickham</surname><given-names>Hadley</given-names></name>
        <name><surname>Pedersen</surname><given-names>Thomas Lin</given-names></name>
        <name><surname>Seidel</surname><given-names>Dana</given-names></name>
      </person-group>
      <source>Scales: Scale functions for visualization</source>
      <year iso-8601-date="2023">2023</year>
    </element-citation>
  </ref>
  <ref id="ref-woodFastStableRestricted2011">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Wood</surname><given-names>Simon N.</given-names></name>
      </person-group>
      <article-title>Fast stable restricted maximum likelihood and marginal likelihood estimation of semiparametric generalized linear models</article-title>
      <source>Journal of the Royal Statistical Society (B)</source>
      <year iso-8601-date="2011">2011</year>
      <volume>73</volume>
      <issue>1</issue>
      <fpage>3</fpage>
      <lpage>36</lpage>
    </element-citation>
  </ref>
  <ref id="ref-woodGeneralizedAdditiveModels2017">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Wood</surname><given-names>Simon N.</given-names></name>
      </person-group>
      <source>Generalized Additive Models: An Introduction with R, Second Edition</source>
      <publisher-name>CRC Press</publisher-name>
      <year iso-8601-date="2017-05">2017</year><month>05</month>
      <isbn>978-1-4987-2834-8</isbn>
    </element-citation>
  </ref>
  <ref id="ref-woodSmoothingParameterModel2016">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Wood</surname><given-names>Simon N.</given-names></name>
        <name><surname>Pya</surname><given-names>N.</given-names></name>
        <name><surname>Saefken</surname><given-names>B.</given-names></name>
      </person-group>
      <article-title>Smoothing parameter and model selection for general smooth models (with discussion)</article-title>
      <source>Journal of the American Statistical Association</source>
      <year iso-8601-date="2016">2016</year>
      <volume>111</volume>
      <fpage>1548</fpage>
      <lpage>1575</lpage>
    </element-citation>
  </ref>
  <ref id="ref-woodStableEfficientMultiple2004">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Wood</surname><given-names>Simon N.</given-names></name>
      </person-group>
      <article-title>Stable and efficient multiple smoothing parameter estimation for generalized additive models</article-title>
      <source>Journal of the American Statistical Association</source>
      <year iso-8601-date="2004">2004</year>
      <volume>99</volume>
      <issue>467</issue>
      <fpage>673</fpage>
      <lpage>686</lpage>
    </element-citation>
  </ref>
  <ref id="ref-woodThinplateRegressionSplines2003">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Wood</surname><given-names>Simon N.</given-names></name>
      </person-group>
      <article-title>Thin-plate regression splines</article-title>
      <source>Journal of the Royal Statistical Society (B)</source>
      <year iso-8601-date="2003">2003</year>
      <volume>65</volume>
      <issue>1</issue>
      <fpage>95</fpage>
      <lpage>114</lpage>
    </element-citation>
  </ref>
  <ref id="ref-xieDynamicDocumentsKnitr2015">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Xie</surname><given-names>Yihui</given-names></name>
      </person-group>
      <source>Dynamic documents with R and knitr</source>
      <publisher-name>Chapman and Hall/CRC</publisher-name>
      <publisher-loc>Boca Raton, Florida</publisher-loc>
      <year iso-8601-date="2015">2015</year>
      <edition>2</edition>
    </element-citation>
  </ref>
  <ref id="ref-xieKnitrComprehensiveTool2014">
    <element-citation publication-type="chapter">
      <person-group person-group-type="author">
        <name><surname>Xie</surname><given-names>Yihui</given-names></name>
      </person-group>
      <article-title>Knitr: A comprehensive tool for reproducible research in R</article-title>
      <source>Implementing reproducible computational research</source>
      <person-group person-group-type="editor">
        <name><surname>Stodden</surname><given-names>Victoria</given-names></name>
        <name><surname>Leisch</surname><given-names>Friedrich</given-names></name>
        <name><surname>Peng</surname><given-names>Roger D.</given-names></name>
      </person-group>
      <publisher-name>Chapman and Hall/CRC</publisher-name>
      <year iso-8601-date="2014">2014</year>
    </element-citation>
  </ref>
  <ref id="ref-xieKnitrGeneralpurposePackage2024">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Xie</surname><given-names>Yihui</given-names></name>
      </person-group>
      <source>Knitr: A general-purpose package for dynamic report generation in R</source>
      <year iso-8601-date="2024">2024</year>
    </element-citation>
  </ref>
  <ref id="ref-zhangPullRequestLatency2022">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Zhang</surname><given-names>Xunhui</given-names></name>
        <name><surname>Yu</surname><given-names>Yue</given-names></name>
        <name><surname>Wang</surname><given-names>Tao</given-names></name>
        <name><surname>Rastogi</surname><given-names>Ayushi</given-names></name>
        <name><surname>Wang</surname><given-names>Huaimin</given-names></name>
      </person-group>
      <article-title>Pull request latency explained: An empirical overview</article-title>
      <source>Empirical Software Engineering</source>
      <year iso-8601-date="2022-11">2022</year><month>11</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2025-02-11">2025</year><month>02</month><day>11</day></date-in-citation>
      <volume>27</volume>
      <issue>6</issue>
      <issn>1382-3256, 1573-7616</issn>
      <pub-id pub-id-type="doi">10.1007/s10664-022-10143-4</pub-id>
      <fpage>126</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-meyerEnablingGoodWork2021">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Meyer</surname><given-names>André N.</given-names></name>
        <name><surname>Murphy</surname><given-names>Gail C.</given-names></name>
        <name><surname>Zimmermann</surname><given-names>Thomas</given-names></name>
        <name><surname>Fritz</surname><given-names>Thomas</given-names></name>
      </person-group>
      <article-title>Enabling Good Work Habits in Software Developers through Reflective Goal-Setting</article-title>
      <source>IEEE Transactions on Software Engineering</source>
      <year iso-8601-date="2021-09">2021</year><month>09</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2025-03-04">2025</year><month>03</month><day>04</day></date-in-citation>
      <volume>47</volume>
      <issue>9</issue>
      <issn>1939-3520</issn>
      <uri>https://ieeexplore.ieee.org/document/8823032/?arnumber=8823032</uri>
      <pub-id pub-id-type="doi">10.1109/TSE.2019.2938525</pub-id>
      <fpage>1872</fpage>
      <lpage>1885</lpage>
    </element-citation>
  </ref>
</ref-list>
<fn-group>
  <fn id="fn1">
    <label>1</label><p>For example, see this
    <ext-link ext-link-type="uri" xlink:href="https://news.ycombinator.com/item?id=22349531">ycombinator
    thread</ext-link>
    (<ext-link ext-link-type="uri" xlink:href="http://web.archive.org/web/20240917164935/https://stackoverflow.blog/2024/06/19/the-real-10x-developer-makes-their-whole-team-better/">internet
    archive</ext-link>), and this
    <ext-link ext-link-type="uri" xlink:href="https://stackoverflow.blog/2024/06/19/the-real-10x-developer-makes-their-whole-team-better">StackOverflow
    blog post</ext-link>
    (<ext-link ext-link-type="uri" xlink:href="http://web.archive.org/web/20231209171051/https://news.ycombinator.com/item?id=22349531">internet
    archive</ext-link>)</p>
  </fn>
  <fn id="fn2">
    <label>2</label><p>in fact, the original paper perhaps even
    emphasizes the “low performers” more than the “exceptional” stating,
    “the ‘horrid’ portion of the performance frequency distribution is
    the long tail at the high end, the positively skewed part which
    shows that one poor performer can consume as much time or cost as 5,
    10, or 20 good ones.”
    (<xref alt="Sackman, Erikson, and Grant 1968, 6" rid="ref-sackmanExploratoryExperimentalStudies1968" ref-type="bibr">Sackman,
    Erikson, and Grant 1968, 6</xref>)</p>
  </fn>
  <fn id="fn3">
    <label>3</label><p>Formerly Pluralsight Flow, now Flow at Appfire.
    All authors were research scientists or data scientists employed at
    Pluralsight at the time that this data was collected and
    analyzed.</p>
  </fn>
  <fn id="fn4">
    <label>4</label><p>”When we suggest that an innovator—be it an
    individual or a firm—‘freely reveals’ proprietary information, we
    mean that all intellectual property rights to that information are
    voluntarily given up by that innovator and all parties are given
    equal access to it—the information becomes a public good (Harhoff et
    al., 2003).”
    (<xref alt="Von Hippel and Von Krogh 2006, 295" rid="ref-vonhippelFreeRevealingPrivatecollective2006" ref-type="bibr">Von
    Hippel and Von Krogh 2006, 295</xref>)</p>
  </fn>
</fn-group>
</back>

<sub-article article-type="notebook" id="nb-6-nb-article">
<front-stub>
<title-group>
<article-title>No Silver Bullets: Why Understanding Software Cycle Time
is Messy, Not Magic</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author" corresp="yes">
<contrib-id contrib-id-type="orcid">0000-0003-1735-1221</contrib-id>
<name>
<surname>Flournoy</surname>
<given-names>John C.</given-names>
</name>
<string-name>John C. Flournoy</string-name>
<degrees>Ph.D.</degrees>
<email>jcflournoyphd@pm.me</email>
<role vocab="https://credit.niso.org" vocab-term="conceptualization" vocab-term-identifier="https://credit.niso.org/contributor-roles/conceptualization/">Conceptualization</role>
<role vocab="https://credit.niso.org" vocab-term="data
curation" vocab-term-identifier="https://credit.niso.org/contributor-roles/data-curation/">Data
curation</role>
<role vocab="https://credit.niso.org" vocab-term="formal
analysis" vocab-term-identifier="https://credit.niso.org/contributor-roles/formal-analysis/">Formal
analysis</role>
<role vocab="https://credit.niso.org" vocab-term="investigation" vocab-term-identifier="https://credit.niso.org/contributor-roles/investigation/">Investigation</role>
<role vocab="https://credit.niso.org" vocab-term="methodology" vocab-term-identifier="https://credit.niso.org/contributor-roles/methodology/">Methodology</role>
<role vocab="https://credit.niso.org" vocab-term="visualization" vocab-term-identifier="https://credit.niso.org/contributor-roles/visualization/">Visualization</role>
<role vocab="https://credit.niso.org" vocab-term="writing – original
draft" vocab-term-identifier="https://credit.niso.org/contributor-roles/writing-original-draft/">Writing
– original draft</role>
<role vocab="https://credit.niso.org" vocab-term="writing – review &amp;
editing" vocab-term-identifier="https://credit.niso.org/contributor-roles/writing-review-editing/">Writing
– review &amp; editing</role>
<xref ref-type="aff" rid="aff-1-nb-article">a</xref>
<xref ref-type="corresp" rid="cor-1-nb-article">&#x002A;</xref>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0000-0002-6909-6157</contrib-id>
<name>
<surname>Lee</surname>
<given-names>Carol S.</given-names>
</name>
<string-name>Carol S. Lee</string-name>
<degrees>Ph.D.</degrees>
<role vocab="https://credit.niso.org" vocab-term="conceptualization" vocab-term-identifier="https://credit.niso.org/contributor-roles/conceptualization/">Conceptualization</role>
<role vocab="https://credit.niso.org" vocab-term="data
curation" vocab-term-identifier="https://credit.niso.org/contributor-roles/data-curation/">Data
curation</role>
<role vocab="https://credit.niso.org" vocab-term="formal
analysis" vocab-term-identifier="https://credit.niso.org/contributor-roles/formal-analysis/">Formal
analysis</role>
<role vocab="https://credit.niso.org" vocab-term="investigation" vocab-term-identifier="https://credit.niso.org/contributor-roles/investigation/">Investigation</role>
<role vocab="https://credit.niso.org" vocab-term="methodology" vocab-term-identifier="https://credit.niso.org/contributor-roles/methodology/">Methodology</role>
<role vocab="https://credit.niso.org" vocab-term="writing – original
draft" vocab-term-identifier="https://credit.niso.org/contributor-roles/writing-original-draft/">Writing
– original draft</role>
<role vocab="https://credit.niso.org" vocab-term="writing – review &amp;
editing" vocab-term-identifier="https://credit.niso.org/contributor-roles/writing-review-editing/">Writing
– review &amp; editing</role>
<xref ref-type="aff" rid="aff-1-nb-article">a</xref>
</contrib>
<contrib contrib-type="author">
<contrib-id contrib-id-type="orcid">0009-0007-5657-1661</contrib-id>
<name>
<surname>Hicks</surname>
<given-names>Catherine M.</given-names>
</name>
<string-name>Catherine M. Hicks</string-name>
<degrees>Ph.D.</degrees>
<role vocab="https://credit.niso.org" vocab-term="conceptualization" vocab-term-identifier="https://credit.niso.org/contributor-roles/conceptualization/">Conceptualization</role>
<role vocab="https://credit.niso.org" vocab-term="funding
acquisition" vocab-term-identifier="https://credit.niso.org/contributor-roles/funding-acquisition/">Funding
acquisition</role>
<role vocab="https://credit.niso.org" vocab-term="investigation" vocab-term-identifier="https://credit.niso.org/contributor-roles/investigation/">Investigation</role>
<role vocab="https://credit.niso.org" vocab-term="methodology" vocab-term-identifier="https://credit.niso.org/contributor-roles/methodology/">Methodology</role>
<role vocab="https://credit.niso.org" vocab-term="project
administration" vocab-term-identifier="https://credit.niso.org/contributor-roles/project-administration/">Project
administration</role>
<role vocab="https://credit.niso.org" vocab-term="resources" vocab-term-identifier="https://credit.niso.org/contributor-roles/resources/">Resources</role>
<role vocab="https://credit.niso.org" vocab-term="supervision" vocab-term-identifier="https://credit.niso.org/contributor-roles/supervision/">Supervision</role>
<role vocab="https://credit.niso.org" vocab-term="writing – review &amp;
editing" vocab-term-identifier="https://credit.niso.org/contributor-roles/writing-review-editing/">Writing
– review &amp; editing</role>
<xref ref-type="aff" rid="aff-1-nb-article">a</xref>
</contrib>
<contrib contrib-type="author">
<name>
<surname>Wu</surname>
<given-names>Maggie</given-names>
</name>
<string-name>Maggie Wu</string-name>
<degrees>M.S.</degrees>
<role vocab="https://credit.niso.org" vocab-term="conceptualization" vocab-term-identifier="https://credit.niso.org/contributor-roles/conceptualization/">Conceptualization</role>
<role vocab="https://credit.niso.org" vocab-term="data
curation" vocab-term-identifier="https://credit.niso.org/contributor-roles/data-curation/">Data
curation</role>
<role vocab="https://credit.niso.org" vocab-term="formal
analysis" vocab-term-identifier="https://credit.niso.org/contributor-roles/formal-analysis/">Formal
analysis</role>
<role vocab="https://credit.niso.org" vocab-term="investigation" vocab-term-identifier="https://credit.niso.org/contributor-roles/investigation/">Investigation</role>
<role vocab="https://credit.niso.org" vocab-term="methodology" vocab-term-identifier="https://credit.niso.org/contributor-roles/methodology/">Methodology</role>
<xref ref-type="aff" rid="aff-1-nb-article">a</xref>
</contrib>
</contrib-group>
<aff id="aff-1-nb-article">
<institution-wrap>
<institution>Pluralsight</institution>
</institution-wrap>

<city>Draper, UT</city>

<country>USA</country>



</aff>
<author-notes>
<corresp id="cor-1-nb-article">jcflournoyphd@pm.me</corresp>
</author-notes>
<abstract>
<p>Understanding factors that influence software development velocity is
crucial for engineering teams and organizations, yet empirical evidence
at scale remains limited. A more robust understanding of the dynamics of
cycle time may help practitioners avoid pitfalls in relying on velocity
measures while evaluating software work. We analyze cycle time—a
widely-used metric measuring time from ticket creation to
completion—using a dataset of over 55,000 observations across 216
organizations. Through Bayesian hierarchical modeling that appropriately
separates individual and organizational variation, we examine how coding
time, task scoping, and collaboration patterns affect cycle time while
characterizing its substantial variability across contexts. We find
precise but modest associations between cycle time and factors including
coding days per week, number of merged pull requests, and degree of
collaboration. However, these effects are set against considerable
unexplained variation both between and within individuals. Our findings
suggest that while common workplace factors do influence cycle time in
expected directions, any single observation provides limited signal
about typical performance. This work demonstrates methods for analyzing
complex operational metrics at scale while highlighting potential
pitfalls in using such measurements to drive decision-making. We
conclude that improving software delivery velocity likely requires
systems-level thinking rather than individual-focused interventions.</p>
</abstract>
</front-stub>

<body>
<sec specific-use="notebook-content">
<code language="r script">knitr::opts_chunk$set(message = FALSE, warning = FALSE, error = FALSE)
library(knitr)
library(flextable)
library(data.table)
library(posterior)</code>
<boxed-text>
  <preformat>This is posterior version 1.5.0</preformat>
</boxed-text>
<boxed-text>
  <preformat>
Attaching package: 'posterior'</preformat>
</boxed-text>
<boxed-text>
  <preformat>The following objects are masked from 'package:stats':

    mad, sd, var</preformat>
</boxed-text>
<boxed-text>
  <preformat>The following objects are masked from 'package:base':

    %in%, match</preformat>
</boxed-text>
<code language="r script">library(parameters)
library(scales)
ct_model_obs_info &lt;- readRDS('cycle_time_full_intx_lin_remonth_obs-info.rds')</code>
</sec>
<sec id="introduction-nb-article">
  <title>1. Introduction</title>
  <p>Understanding the factors that affect the delivery of software at
  an organizational level offers businesses and engineering teams the
  knowledge to deliver value to users, maintain competitiveness, and
  improve developer experience. Given engineering teams’ fundamental
  role in software delivery, the velocity of their work—that is, the
  time it takes for task completion—has emerged as a focal point of
  empirical investigation, particularly through measures like cycle time
  which captures the duration between ticket opening and ticket closing.
  Moreover, cycle-time is seen by engineers as the most useful metric of
  engineering productivity according to a prominent industry report
  (<xref alt="Carey 2024" rid="ref-careyWhy70Engineers2024-nb-article" ref-type="bibr">Carey
  2024</xref>).</p>
  <p>While cycle time is often treated as an indicator of productivity
  per se, the concept of productivity remains poorly specified in
  software engineering contexts, where outputs fundamentally differ from
  the more readily quantifiable measures used in traditional industrial
  production. Specific units of work are rarely identical across time
  for a person, within a team, or across teams. The interpretation of
  cycle time as a proxy for productivity therefore presents particular
  challenges because variations could reflect differences in work
  patterns, task assignment, task scoping, and organizational contexts
  rather than differences in some underlying rate of task
  completion.</p>
  <p>Nevertheless, the intuitive appeal of cycle time and its widespread
  use in practice make it a valuable focus for empirical investigation.
  The above-mentioned complexities necessitate sophisticated statistical
  methods to detect the unique impact of multiple factors, while
  carefully characterizing the variability practitioners can expect in
  day-to-day and month-to-month observations of cycle time. Through
  rigorous statistical modeling of longitudinal data across multiple
  organizations, we can both characterize its variability across
  real-world contexts, while demonstrating methodological approaches for
  analyzing such complex operational metrics. This analysis also allows
  us to detect systematic influences from factors commonly believed to
  affect developer productivity: task scoping, focused work time,
  collaboration, and time of year.</p>
  <p>Our investigation leverages a unique dataset comprising over 11,398
  contributors at 216 organizations across diverse industries. This work
  makes two primary contributions. First, we demonstrate a model for
  statistically investigating software activity data at both a larger
  and more longitudinal scale than previous empirical research, allowing
  us to characterize how cycle time varies across software development
  contexts (i.e., individuals, organizations, and variable process
  factors), using hierarchical modeling that appropriately separates
  individual and organizational variation, combined with the careful
  disaggregation of within- and between-person effects. This approach
  allows us both greater precision and nuance in describing effects as
  well as the ability to highlight potential pitfalls in using such
  measurements to drive decision-making. Second, we incorporate these
  multiple measures of process factors simultaneously to isolate unique
  effects, including a novel measure of collaboration operationalized as
  degree centrality, taking initial steps toward reflecting the impact
  of the interactive nature of software development in large-scale
  analyses of activity data.</p>
  <p>Our research questions are:</p>
  <p>RQ1. How do common workplace and software development process
  factors impact cycle time?</p>
  <p>RQ2. How much between- and within-person variation is there in
  cycle time?</p>
  <p>The paper proceeds as follows: We first review the literature on
  software productivity measurement, examining cycle time’s relationship
  to broader discussions of developer performance. We then present our
  methodology for analyzing cycle time variation using Bayesian
  hierarchical linear models. Our results examine both population-level
  effects and the substantial variation observed between individuals and
  organizations. We conclude by discussing implications for practice and
  future research directions.</p>
</sec>
<sec id="background-nb-article">
  <title>2. Background</title>
  <sec id="productivity-nb-article">
    <title>2.1 Productivity</title>
    <p>The use of cycle time in the academic and industry literature is
    almost always as part of a discussion of productivity. This may be
    in part because cycle time and related metrics are one of the only
    so-called objective quantitative windows we have into the process of
    software production (but note that self-reports of perceived
    productivity are also potentially valid measures of this process).
    For this reason, it behooves us to discuss the literature on
    productivity, even as we position the analyses in this report as
    specifically analyzing what we consider to be at best a very distal
    indicator of whatever it is people mean when they use the word
    “productivity.”</p>
    <p>Defining software team productivity and performance is a highly
    contentious exercise and many different definitions are given by
    both practitioners and researchers
    (<xref alt="Fraser et al. 2007" rid="ref-fraserNoSilverBullet2007-nb-article" ref-type="bibr">Fraser
    et al. 2007</xref>;
    <xref alt="C. Hicks, Lee, and Ramsey 2023" rid="ref-hicksDeveloperThrivingFour2023-nb-article" ref-type="bibr">C.
    Hicks, Lee, and Ramsey 2023</xref>;
    <xref alt="C. M. Hicks, Lee, and Ramsey 2024" rid="ref-hicksDeveloperThrivingFour2024-nb-article" ref-type="bibr">C.
    M. Hicks, Lee, and Ramsey 2024</xref>;
    <xref alt="Murphy-Hill et al. 2021" rid="ref-murphy-hillWhatPredictsSoftware2021-nb-article" ref-type="bibr">Murphy-Hill
    et al. 2021</xref>;
    <xref alt="Sadowski, Storey, and Feldt 2019" rid="ref-sadowskiSoftwareDevelopmentProductivity2019-nb-article" ref-type="bibr">Sadowski,
    Storey, and Feldt 2019</xref>). Perceptions of what counts as
    successful software work can meaningfully differ across individuals
    and roles, as when engineering managers tend to focus on long-term
    outcomes and individual developers focus on activity, for example
    (<xref alt="C. Hicks, Lee, and Ramsey 2023" rid="ref-hicksDeveloperThrivingFour2023-nb-article" ref-type="bibr">C.
    Hicks, Lee, and Ramsey 2023</xref>;
    <xref alt="Storey, Houck, and Zimmermann 2022b" rid="ref-storeyHowDevelopersManagers2022b-nb-article" ref-type="bibr">Storey,
    Houck, and Zimmermann 2022b</xref>). Across workplaces, measures of
    time have been frequently used to assess productivity even while the
    shortcomings of these measures are also widely acknowledged
    (<xref alt="Griffin 1993" rid="ref-griffinMetricsMeasuringProduct1993-nb-article" ref-type="bibr">Griffin
    1993</xref>). Alternative measures include self-ratings or peer
    evaluations
    (<xref alt="Murphy-Hill et al. 2021" rid="ref-murphy-hillWhatPredictsSoftware2021-nb-article" ref-type="bibr">Murphy-Hill
    et al. 2021</xref>;
    <xref alt="Ramírez and Nembhard 2004" rid="ref-ramirezMeasuringKnowledgeWorker2004-nb-article" ref-type="bibr">Ramírez
    and Nembhard 2004</xref>) and in software engineering,
    operationalizations of code work such as lines of code
    (<xref alt="Blackburn, Scudder, and Van Wassenhove 1996" rid="ref-blackburnImprovingSpeedProductivity1996-nb-article" ref-type="bibr">Blackburn,
    Scudder, and Van Wassenhove 1996</xref>;
    <xref alt="Maxwell, Van Wassenhove, and Dutta 1996" rid="ref-maxwellSoftwareDevelopmentProductivity1996-nb-article" ref-type="bibr">Maxwell,
    Van Wassenhove, and Dutta 1996</xref>). These have obvious
    limitations in that the meaning of a particular unit for any of
    these metrics may be different depending on context
    (<xref alt="Sadowski, Storey, and Feldt 2019" rid="ref-sadowskiSoftwareDevelopmentProductivity2019-nb-article" ref-type="bibr">Sadowski,
    Storey, and Feldt 2019</xref>). Some researchers have sought
    solutions to this problem by asking individuals to rate their own
    level of, or satisfaction with, productivity
    (<xref alt="C. Hicks, Lee, and Ramsey 2023" rid="ref-hicksDeveloperThrivingFour2023-nb-article" ref-type="bibr">C.
    Hicks, Lee, and Ramsey 2023</xref>;
    <xref alt="Storey et al. 2021" rid="ref-storeyTheorySoftwareDeveloper2021-nb-article" ref-type="bibr">Storey
    et al. 2021</xref>). While it is plausible that perceived
    productivity could be a good indicator of productivity, it is still
    not free of the context effects that are often levied as critiques
    of more “objective” metrics, and self-report, while perhaps
    overcoming some shortcomings of other methods, bring with them
    another set of measurement issues.</p>
    <p>The difficulty of quantifying productivity arises even prior to
    the step of choosing one or several indicators. There is often a
    lack of clear distinction between production (quantity of output
    regardless of resources provided), productivity (quantity of output
    given the resources provided), and performance (flexibility,
    adaptability, dependability, sustainability, and quality of output
    over time)
    (<xref alt="C. Hicks, Lee, and Ramsey 2023" rid="ref-hicksDeveloperThrivingFour2023-nb-article" ref-type="bibr">C.
    Hicks, Lee, and Ramsey 2023</xref>). As any software developer will
    be aware, this conceptual complexity is likely the result of the
    various ways their work counts for professional development, for the
    success of the product, and for simply meeting deadlines. This piece
    of research does not aim to solve the issue of how we conceive of
    productivity but instead seeks to take a deep look at a single
    popular metric in order to showcase, first, the many factors
    (themselves, a subset of possible influences of productivity) that
    affect cycle time, and second, how observing this metric over time
    informs our view of the ways cycle time varies both within and
    between people. These views will be helpful both to illuminate
    specific properties of cycle time as a measure but also to
    demonstrate how one might approach an in-depth analysis of either
    “objective” or self-report metrics of productivity.</p>
  </sec>
  <sec id="evaluating-individual-developer-performance-nb-article">
    <title>2.2 Evaluating individual developer performance</title>
    <p>Given the difficulty of appropriately defining productivity, the
    many metrics that purport to measure it, and the potential cost to
    an individual (e.g., career, reputation) of being measured, it is
    understandable that software developers have an ambivalent stance
    about the measurement of both work activity and productivity, that
    metrics adoption can be fraught with failure
    (<xref alt="Bouwers, van Deursen, and Visser 2013" rid="ref-bouwersSoftwareMetricsPitfalls2013-nb-article" ref-type="bibr">Bouwers,
    van Deursen, and Visser 2013</xref>), and that social or
    socio-technical affordances can be strongly associated with
    self-reported productivity and necessary to obtain a full picture of
    software team experience beyond project and technical metrics
    (<xref alt="C. Hicks, Lee, and Ramsey 2023" rid="ref-hicksDeveloperThrivingFour2023-nb-article" ref-type="bibr">C.
    Hicks, Lee, and Ramsey 2023</xref>;
    <xref alt="Murphy-Hill et al. 2021" rid="ref-murphy-hillWhatPredictsSoftware2021-nb-article" ref-type="bibr">Murphy-Hill
    et al. 2021</xref>).</p>
    <p>Developers whose teams use metrics generally see those metrics as
    helpful, and developers who report agreement which team-level
    metrics are measured tend to report higher perceived productivity
    (<xref alt="C. Hicks, Lee, and Ramsey 2023" rid="ref-hicksDeveloperThrivingFour2023-nb-article" ref-type="bibr">C.
    Hicks, Lee, and Ramsey 2023</xref>;
    <xref alt="C. M. Hicks, Lee, and Ramsey 2024" rid="ref-hicksDeveloperThrivingFour2024-nb-article" ref-type="bibr">C.
    M. Hicks, Lee, and Ramsey 2024</xref>). However, paired with this
    are some indicators of uncertainty in whether and how metrics are
    being tracked or used
    (<xref alt="C. Hicks, Lee, and Ramsey 2023" rid="ref-hicksDeveloperThrivingFour2023-nb-article" ref-type="bibr">C.
    Hicks, Lee, and Ramsey 2023</xref>), there is often backlash against
    any attempt to define or popularize such metrics
    (<xref alt="Bruneaux 2024" rid="ref-bruneauxWhatMcKinseyHas2024-nb-article" ref-type="bibr">Bruneaux
    2024</xref>;
    <xref alt="Chhuneja 2024" rid="ref-chhunejaWhy50Developers2024-nb-article" ref-type="bibr">Chhuneja
    2024</xref>;
    <xref alt="Coté 2023" rid="ref-coteOnlyPeopleWho2023-nb-article" ref-type="bibr">Coté
    2023</xref>;
    <xref alt="Finster 2023" rid="ref-finster5MinuteDevOps2023-nb-article" ref-type="bibr">Finster
    2023</xref>;
    <xref alt="Orosz 2024a" rid="ref-oroszMeasuringDeveloperProductivity2024-nb-article" ref-type="bibr">Orosz
    2024a</xref>,
    <xref alt="2024b" rid="ref-oroszMeasuringDeveloperProductivity2024a-nb-article" ref-type="bibr">2024b</xref>;
    <xref alt="Riggins 2023" rid="ref-rigginsWhatMcKinseyGot2023-nb-article" ref-type="bibr">Riggins
    2023</xref>;
    <xref alt="Terhorst-North 2023b" rid="ref-terhorst-northMcKinseyDeveloperProductivity2023-nb-article" ref-type="bibr">Terhorst-North
    2023b</xref>,
    <xref alt="2023a" rid="ref-terhorst-northWorstProgrammerKnow2023-nb-article" ref-type="bibr">2023a</xref>;
    <xref alt="Walker 2023b" rid="ref-walkerConsUsingSPACE2023-nb-article" ref-type="bibr">Walker
    2023b</xref>,
    <xref alt="2023a" rid="ref-walkerEverythingWrongDORA2023-nb-article" ref-type="bibr">2023a</xref>),
    and there is concern about mismeasurement by managers inside of
    organizations
    (<xref alt="C. Hicks, Lee, and Ramsey 2023" rid="ref-hicksDeveloperThrivingFour2023-nb-article" ref-type="bibr">C.
    Hicks, Lee, and Ramsey 2023</xref>), which is part of a broader
    discussion of surveillance and the discontent it can generate for
    workers
    (<xref alt="Ball 2010" rid="ref-ballWorkplaceSurveillanceOverview2010-nb-article" ref-type="bibr">Ball
    2010</xref>;
    <xref alt="Grisold et al. 2024" rid="ref-grisoldDigitalSurveillanceOrganizations2024-nb-article" ref-type="bibr">Grisold
    et al. 2024</xref>;
    <xref alt="Mettler 2024" rid="ref-mettlerConnectedWorkplaceCharacteristics2024-nb-article" ref-type="bibr">Mettler
    2024</xref>). More troublingly, recent scholarship on sociocognitive
    experiences in the workplace has proposed that severe experiences of
    employees being treated by an organization as a “mere tool” or a
    resource may create organizational dehumanization leading to many
    negative impacts on both well-being measures and on work outcomes
    (<xref alt="Caesens et al. 2017" rid="ref-caesensPerceivedOrganizationalSupport2017-nb-article" ref-type="bibr">Caesens
    et al. 2017</xref>;
    <xref alt="Lagios et al. 2022" rid="ref-lagiosExplainingNegativeConsequences2022-nb-article" ref-type="bibr">Lagios
    et al. 2022</xref>). Moreover, there is evidence that metrics might
    be used differently depending on a person’s visible identities (e.g,
    <xref alt="Quadlin 2018" rid="ref-quadlinMarkWomansRecord2018-nb-article" ref-type="bibr">Quadlin
    2018</xref>).</p>
    <p>Likewise, scholarship on employee perceptions of organizational
    and procedural justice have long documented that when employees
    perceive a context of organizational injustice, this can exacerbate
    or redefine experiences of organizational decision-making and
    performance evaluations
    (<xref alt="Brockner et al. 1994" rid="ref-brocknerInteractiveEffectsProcedural1994-nb-article" ref-type="bibr">Brockner
    et al. 1994</xref>,
    <xref alt="2007" rid="ref-brocknerProceduralFairnessOutcome2007-nb-article" ref-type="bibr">2007</xref>).
    Given such larger organizational dynamics, it is likely that whether
    or not software metrics adoptions are successful is impacted not
    only by the choice of metric but also by larger contextual factors
    such as teams’ sociocognitive experiences and expectations around
    measurement, and the psychological affordances of their environments
    which may or may not allow them to address measurement concerns
    (<xref alt="C. M. Hicks 2024" rid="ref-hicksPsychologicalAffordancesCan2024-nb-article" ref-type="bibr">C.
    M. Hicks 2024</xref>).</p>
    <p>We lack holistic evidence about what practitioners in software
    development believe about developer performance and ability; some
    reports from researchers with samples at large technology companies
    have suggested both that definitions of productivity can vary widely
    between managers and developers, and that software developers
    perceive many potential trade-offs between types of technical goals,
    e.g. that quality and speed may be unattainable together
    (<xref alt="Storey, Houck, and Zimmermann 2022a" rid="ref-storeyHowDevelopersManagers2022-nb-article" ref-type="bibr">Storey,
    Houck, and Zimmermann 2022a</xref>).</p>
    <p>One “industry myth” which is referenced frequently in
    practitioner commentary is the idea of a “10x engineer”: this
    position alleges that some small outlier population of software
    developers consistently outperform others on key development tasks.
    Potentially springing from small case studies examining a handful of
    developers’ time spent solving small laboratory tasks
    (<xref alt="Sackman, Erikson, and Grant 1968" rid="ref-sackmanExploratoryExperimentalStudies1968-nb-article" ref-type="bibr">Sackman,
    Erikson, and Grant 1968</xref>; discussed in
    <xref alt="Nichols 2019" rid="ref-nicholsEndMythIndividual2019-nb-article" ref-type="bibr">Nichols
    2019</xref>), this “law” was generalized from only twelve
    individuals, uses time spent on the tasks as an estimate of both
    effort and cost, has failed to replicate in larger examinations of
    developer performance on similar tasks, and failed to acknowledge
    large within-individual variation in task performance
    (<xref alt="Nichols 2019" rid="ref-nicholsEndMythIndividual2019-nb-article" ref-type="bibr">Nichols
    2019</xref>;
    <xref alt="Shrikanth et al. 2021" rid="ref-shrikanthAssessingPractitionerBeliefs2021-nb-article" ref-type="bibr">Shrikanth
    et al. 2021</xref>).</p>
    <p>Nevertheless, the idea that “10x engineers” exist and that some
    individuals in software engineering outperform others by a “rule” of
    10x has been cited often and codified in industry commentary, (e.g.,
    <xref alt="Brooks 1975" rid="ref-brooksMythicalManmonthEssays1975-nb-article" ref-type="bibr">Brooks
    1975</xref>). Modern commentary on this idea frequently refers to it
    as a myth, but it is also discussed as a potentially real
    phenomenon<xref ref-type="fn" rid="fn1-nb-article">1</xref>. In our previous
    work, we have noted that some software practitioners hold
    field-specific ability beliefs that software development success and
    productivity is attributable to a quality of “innate brilliance”,
    and that this belief among practitioners may create a higher
    likelihood of experiencing threat and anxiety in the face of rapid
    role change and technological shifts to developer workflows
    (<xref alt="C. M. Hicks, Lee, and Foster-Marks 2024" rid="ref-hicksNewDeveloperAI2024-nb-article" ref-type="bibr">C.
    M. Hicks, Lee, and Foster-Marks 2024</xref>). Broad reviews on
    drivers of software development outcomes, particularly frictions in
    the form of team “debt,” also suggest that social-psychological
    aspects of shared work processes may be a significant contributor to
    these outcomes separate from individual performance
    (<xref alt="Ahmad and Gustavsson 2024" rid="ref-ahmadPandorasBoxSocial2024-nb-article" ref-type="bibr">Ahmad
    and Gustavsson 2024</xref>).</p>
    <p>Despite some recognition that the 10x engineer is a problematic
    concept, the conflictual measurement of productivity and its use as
    a tool of surveillance and punishment contra the interests of
    individual contributors (but to the benefit, at least ostensibly, to
    a company’s profitability) continues with full-throated glee. A
    recent unpublished study claims that nearly 10% of engineers
    contribute almost no work; that is to say, it raises the boogeyman
    of the 0.1x engineer as the 10x engineer’s
    inverse<xref ref-type="fn" rid="fn2-nb-article">2</xref>(<xref alt="Obstbaum and Denisov-Blanch, n.d." rid="ref-obstbaumOngoingResearchSoftware-nb-article" ref-type="bibr">Obstbaum
    and Denisov-Blanch, n.d.</xref>). The measure of productivity used
    is something half-way between an objective measurement and
    self-report: an unspecified machine-learning model trained on expert
    ratings of the quality of, and work necessary to complete, 70
    commits
    (<xref alt="Denisov-Blanch et al. 2024" rid="ref-denisov-blanchPredictingExpertEvaluations2024-nb-article" ref-type="bibr">Denisov-Blanch
    et al. 2024</xref>). Unlike prior work, this method lacks both the
    transparency of “objective” measures and the temperance of
    self-report measures.</p>
    <p>In taking a deep dive into cycle time, this project does not
    address every implementation challenge and organizational affordance
    that may define whether organizations can ensure a healthy and
    sustainable practice around the measurement of work activity.
    However, we believe that a more robust understanding of the dynamics
    of cycle time may help practitioners avoid pitfalls in relying on
    velocity measures while evaluating software work. We hope to
    describe the complexity in a way that at least adds some clarity and
    aligns with the experience of software developers in practice.</p>
  </sec>
  <sec id="cycle-time-nb-article">
    <title>2.3 Cycle Time</title>
    <p>Because lower cycle times are thought to indicate faster delivery
    times and more efficient software processes, cycle time has long
    been taken as a key indicator of team health, developer
    productivity, and team efficiency
    (<xref alt="Clincy 2003" rid="ref-clincySoftwareDevelopmentProductivity2003-nb-article" ref-type="bibr">Clincy
    2003</xref>;
    <xref alt="Agrawal and Chari 2007" rid="ref-agrawalSoftwareEffortQuality2007-nb-article" ref-type="bibr">Agrawal
    and Chari 2007</xref>;
    <xref alt="Carmel 1995" rid="ref-carmelCycleTimePackaged1995-nb-article" ref-type="bibr">Carmel
    1995</xref>;
    <xref alt="Evers, Oehler, and Tucker 1998" rid="ref-eversImprovingEngineeringProductivity1998-nb-article" ref-type="bibr">Evers,
    Oehler, and Tucker 1998</xref>;
    <xref alt="Gupta and Souder 1998" rid="ref-guptaKeyDriversReduced1998-nb-article" ref-type="bibr">Gupta
    and Souder 1998</xref>;
    <xref alt="Nan and Harter 2009" rid="ref-nanImpactBudgetSchedule2009-nb-article" ref-type="bibr">Nan
    and Harter 2009</xref>;
    <xref alt="Ruvimova et al. 2022" rid="ref-ruvimovaExploratoryStudyProductivity2022-nb-article" ref-type="bibr">Ruvimova
    et al. 2022</xref>;
    <xref alt="Sadowski and Zimmermann 2019" rid="ref-sadowskiRethinkingProductivitySoftware2019-nb-article" ref-type="bibr">Sadowski
    and Zimmermann 2019</xref>;
    <xref alt="Trendowicz and Münch 2009" rid="ref-trendowiczChapter6Factors2009-nb-article" ref-type="bibr">Trendowicz
    and Münch 2009</xref>). This suggests that understanding factors
    that influence cycle time may lead to insights into factors that are
    important to understand for understanding productivity in general.
    At minimum, examining cycle time can provide a description of the
    complexity of factors that impact this popular metric.</p>
    <p>Cycle time examines one aspect of the speed of software delivery
    by measuring the time between task start and task delivery. It has
    consistently been described by industry research as one of the best
    and most trusted metrics for software productivity
    (<xref alt="Carey 2024" rid="ref-careyWhy70Engineers2024-nb-article" ref-type="bibr">Carey
    2024</xref>). In this same report, similar metrics also showed
    preference, such as lead time, deploy frequency, and change failure
    rate. The common thread across these metrics is that the unit of
    work is defined by the team or company in relation to goals that
    serve the strategic interests of the project. While there is a good
    deal of nuance with respect to what goes into setting these units
    up, they are both discrete (and so “objective”-feeling) but also
    defined, often collaboratively, with respect to the outcomes that
    matter. This is in contrast to lines of code, for example, which may
    or may not be relevant to the goals of the engineering teams, and
    which is avoided by 70% of respondents in the same industry report.
    Cycle time may also be considered an important part of developer
    experience as a component of what leads to a fluid-feeling
    development and release cycle
    (<xref alt="André N. Meyer et al. 2021" rid="ref-meyerEnablingGoodWork2021-nb-article" ref-type="bibr">André
    N. Meyer et al. 2021</xref>).</p>
    <p>In calls to re-examine the complexity of developer productivity,
    researchers have argued that velocity measures are highly
    task-dependent, and do not represent the quality of work done or
    other, longer-term measures of the impact of work
    (<xref alt="Sadowski, Storey, and Feldt 2019" rid="ref-sadowskiSoftwareDevelopmentProductivity2019-nb-article" ref-type="bibr">Sadowski,
    Storey, and Feldt 2019</xref>). It is also possible for velocity
    measures to have multiple directional relationships with desired
    outcomes depending on software developers’ larger context. For
    instance, hypothetically speaking, an increase in velocity may
    associate with more success for a software team when this increase
    arises because the team engages in process improvements, creating
    processes that help them to move more quickly through development
    tasks, and thereby meet a critical deadline for a product launch,
    leading to business outcomes which then lead to more resources for
    the team. However in a different scenario, an increase in velocity
    may be associated with more failures for a software team, for
    instance, if velocity changes arise because the team begins to
    eschew quality control processes, eventually leading to costly
    critical business failures.</p>
    <p>Nevertheless, time and output-based measures are frequently used
    as an outcome measure to make recommendations for software
    engineering practices, e.g. in evaluating the perceived impact of
    technical debt
    (<xref alt="Besker, Martini, and Bosch 2018" rid="ref-beskerTechnicalDebtCripples2018-nb-article" ref-type="bibr">Besker,
    Martini, and Bosch 2018</xref>). These measures have the added
    benefit of having a concrete referent that is simple to measure and
    inexpensive and convenient for teams trying to track productivity to
    collect.</p>
    <p>The utility of cycle time has subsequently led to numerous
    industry experts recommending that engineering managers and leaders
    track their teams’ cycle times. However, leaders are provided less
    guidance on how to analyze and decrease cycle time. As such, leaders
    are left with the dilemma of being aware of their cycle times, but
    not understanding how to improve their cycle times in an
    evidence-based way.</p>
    <p>In the literature that does directly address this question, four
    major areas have been proposed to impact cycle time: (1)
    organizational structure and climate, (2) reward system, (3)
    software development process and (4) the use of software design and
    testing tools
    (<xref alt="Clincy 2003" rid="ref-clincySoftwareDevelopmentProductivity2003-nb-article" ref-type="bibr">Clincy
    2003</xref>). We focus in this paper on factors from (3) software
    development processes, in part because measurements of these
    processes continue to gather significant interest from the
    technology industry and are plausibly mobile levers that can be
    manipulated at the level of an engineering team. They are also
    themselves relatively easy to measure and track at the team level if
    a software team within a larger organization were to decide they
    wanted to try to shift their processes and take measurements to make
    sure they were successful. We have argued elsewhere that
    organizational structure and climate are also relatively easy to
    measure and are powerful levers that should be more often targeted
    (<xref alt="C. M. Hicks and Hevesi 2024" rid="ref-hicksCumulativeCultureTheory2024-nb-article" ref-type="bibr">C.
    M. Hicks and Hevesi 2024</xref>;
    <xref alt="C. Hicks, Lee, and Ramsey 2023" rid="ref-hicksDeveloperThrivingFour2023-nb-article" ref-type="bibr">C.
    Hicks, Lee, and Ramsey 2023</xref>;
    <xref alt="C. M. Hicks, Lee, and Ramsey 2024" rid="ref-hicksDeveloperThrivingFour2024-nb-article" ref-type="bibr">C.
    M. Hicks, Lee, and Ramsey 2024</xref>), though for the present work
    we focus on (3) also in part to keep the scope of this analysis
    manageable.</p>
    <p>To reduce cycle times at the level of software development
    process, the software industry currently recommends strategies
    centered around three major themes:</p>
    <list list-type="order">
      <list-item>
        <p>increased coding time</p>
      </list-item>
      <list-item>
        <p>improved task scoping</p>
      </list-item>
      <list-item>
        <p>improved collaboration</p>
      </list-item>
    </list>
    <p>Industry convention rationalizes that increased coding times
    increases the amount of code committed and pull requests merged,
    thus moving tickets through their life cycle more quickly. Improved
    scoping can similarly yield more efficient teams by breaking work
    down into more manageable chunks and reducing the amount of
    unplanned work from bugs and defects. Finally, industry reports
    posit that improved collaboration can reduce the time it takes for
    developers to review PRs and increase review rates
    (<xref alt="Flow, n.d." rid="ref-flowHowIncreaseSoftware-nb-article" ref-type="bibr">Flow,
    n.d.</xref>;
    <xref alt="Gralha 2022" rid="ref-gralhaReduceCycleTime2022-nb-article" ref-type="bibr">Gralha
    2022</xref>;
    <xref alt="Waydev 2021" rid="ref-waydevCycleTimeFormula2021-nb-article" ref-type="bibr">Waydev
    2021</xref>). However, this has not yet been examined empirically.
    That is, although industry convention dictates that these practices
    work to reduce cycle time, we have yet to generate real world
    evidence of their effectiveness. We focus on these three areas as
    possible factors that impact cycle time.</p>
  </sec>
</sec>
<sec id="research-design-and-methodology-nb-article">
  <title>3. Research design and methodology</title>
  <p>Code for these analyses is available in the
  <monospace>manuscript-preprint_v1.0.0</monospace> release as
  <monospace>analyses.qmd</monospace>, here:
  <ext-link ext-link-type="uri" xlink:href="https://github.com/jflournoy/no-silver-bullets">https://github.com/jflournoy/no-silver-bullets</ext-link>.</p>
  <sec id="data-selection-and-characteristics-nb-article">
    <title>3.1 Data Selection and Characteristics</title>
    <p>To examine coding time, task scoping, and collaboration as
    predictors of cycle time over time, we centered our analysis on a
    large, real-world dataset of git and ticketing data. This dataset
    includes 55,619 observations across 12 months in 2022 from 11,398
    users in 216 organizations of varying sizes and industries. We chose
    to use longitudinal data across 12 months, as it allowed us to
    examine fluctuations within a person’s workflow as well as different
    stable tendencies between people.This data was available via
    partnerships between a software metrics
    tool<xref ref-type="fn" rid="fn3-nb-article">3</xref> which was incorporated
    into the workflows of real working software teams, and the 216
    organizations which opted in to this tool at any point during the 12
    month analytic window. Notably, because this tool was adopted on an
    organizational level (following partnership agreements that include
    organizational opt-in and security audits), users themselves did not
    have to be active users of the software metrics tool itself in order
    to be included in this dataset, and git and ticketing data was
    available retrospectively for dates prior to the implementation of
    the tool in the organization. In other words, the git and ticketing
    data included in this analysis is not predicated on being an
    individual user of the software metrics tool, nor on the software
    metrics tool being used at the organization, as our dataset contains
    measures both before and after the software metric tool
    implementation at the organization, and implementation dates for
    organizations vary across the 12 month period.</p>
    <p>Data were selected for analysis based on whether users actively
    contributed code during the time frame of the study. The 216
    organizations each had between 1–2,746 individuals in the dataset,
    with 90% of organizations being represented by more than 12 users
    (Median = 130;
    <xref alt="Figure 1" rid="fig-org-size-nb-article">Figure 1</xref>). In
    previous pilot surveys used to inform the design of this project,
    professional software developer users from these organizations
    described their main industries as ranging from Technology, Finance,
    Government, Insurance, Retail, and others, indicating a wide
    diversity of business use cases and engineering contexts were
    present in this sample.</p>
    <fig id="fig-org-size-nb-article">
      <caption><p>Figure 1: Organization sizes clustered around 130
      users, with a long tail of larger organizations.</p></caption>
      <graphic mimetype="image" mime-subtype="png" xlink:href="org_size_hist.png" />
    </fig>
  </sec>
  <sec id="computing-study-variables-nb-article">
    <title>3.2 Computing study variables</title>
    <p>Using the most complete data for each user, we used the mean to
    aggregate each variable at the <italic>month</italic> level and the
    <italic>year</italic> level (see below for more details specific to
    each variable). For each predictor, we then subtracted each person’s
    yearly average from their monthly data to produce a within-person
    deviation variable. This allowed us to disaggregate effects on the
    outcome due to yearly-level individual differences and
    within-person, month-to-month fluctuations
    (<xref alt="Curran and Bauer 2011" rid="ref-curranDisaggregationPersonPerson2011-nb-article" ref-type="bibr">Curran
    and Bauer 2011</xref>). This also allowed us to avoid averaging
    between-person and within-person differences into a single effect
    estimate. These effects can be different even in the sign of the
    effect, for example with a positive relationship between some
    time-invariant factor and the outcome of interest at the
    between-person level, and a negative relationship between the same
    factor measured across time and within-person variation over time. A
    common example that is highly relevant to most technical and
    knowledge workers is typing speed and errors. Imagine someone trying
    to type as fast as they can; it is obvious that they will make more
    errors the faster they type, evincing a negative association between
    speed and errors. However, if one simply measures the typing speed
    and error rate of many people, it should be clear that we would see
    that faster typists tend to make fewer errors, perhaps because of
    differences in typing experience. In this study, we want to be able
    to examine average differences between people’s cycle time
    aggregated at the year while also examining what is associated with
    cycle time deviations from that yearly trend month-to-month. All
    year-level individual differences variables were centered at their
    mean. Exceptions or addenda are mentioned below. See
    <xref alt="Table 1" rid="tbl-variables-nb-article">Table 1</xref> for a brief
    list of variables.</p>
    <sec id="cycle-time-1-nb-article">
      <title>3.2.1 Cycle Time</title>
      <p>This is the dependent variable in these analyses. After
      computing the cycle time for each closed ticket in seconds, we
      found the median cycle time for each month for each user using all
      tickets <italic>opened</italic> in that month. For example, a
      ticket opened on the 9th of April, and closed on the 3rd of May
      would contribute 2,246,400 seconds to the calculation of the
      median for April.</p>
    </sec>
    <sec id="unclosed-tickets-nb-article">
      <title>3.2.2 Unclosed Tickets</title>
      <p>We were not able to observe the closing date for every ticket
      given our data collection cutoff of March 7, 2023, and so it is
      plausible that we underestimate the median cycle time in a way
      that depends in part on how many ticket closing times we do not
      observe. For this reason, we also computed the proportion of
      tickets opened in that month that had not been closed by the end
      of our data collection. For example, any ticket opened in April,
      2022 but not closed by March 7, 2023 would count toward the
      proportion of unclosed tickets for that month. We transformed
      proportions from <inline-formula><alternatives>
      <tex-math><![CDATA[[0,1]]]></tex-math>
      <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mo stretchy="true" form="prefix">[</mml:mo><mml:mn>0</mml:mn><mml:mo>,</mml:mo><mml:mn>1</mml:mn><mml:mo stretchy="true" form="postfix">]</mml:mo></mml:mrow></mml:math></alternatives></inline-formula>
      to <inline-formula><alternatives>
      <tex-math><![CDATA[(-\infty, \infty)]]></tex-math>
      <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mrow><mml:mo stretchy="true" form="prefix">(</mml:mo><mml:mi>−</mml:mi><mml:mi>∞</mml:mi><mml:mo>,</mml:mo><mml:mi>∞</mml:mi><mml:mo stretchy="true" form="postfix">)</mml:mo></mml:mrow></mml:math></alternatives></inline-formula>
      using the logistic quantile function (with minimum and maximum
      proportions forced to be .01 and .99 respectively). We use this in
      the regressions below as a control variable to adjust for this
      possibility.</p>
    </sec>
    <sec id="time-month-and-within-quarter-month-nb-article">
      <title>3.2.3 Time (Month, and within-quarter month)</title>
      <p>We examined time in two ways: monthly and quarterly. Months
      were represented as numeric values (i.e. January = 1, February =
      2) and centered at month 7, which allows us to interpret certain
      quantities like the intercept as the average cycle time in the
      middle of the year. Additionally, because quarters provide
      meaningful business cadences that may impact engineering work, for
      instance in that some organizations set quarterly goals at the
      beginning of each quarter and push to meet those goals at the end
      of each quarter and that key product deadlines may occur
      systematically toward the end of quarters, we accounted for any
      effects of quarterly cycles by using an indicator for the
      within-quarter month, centered at the middle of the quarter (e.g.,
      -1 for the first month of the quarter, 0 for the middle month, and
      1 for the last month of the quarter). This approach allowed us to
      capture a more stable and realistic trajectory of change over the
      course of the year.</p>
    </sec>
    <sec id="team-size-nb-article">
      <title>3.2.4 Team Size</title>
      <p>To control for any influence of team size on cycle time, we
      compute each individual’s team size as the average size of all
      teams that individual belongs to as defined by individuals’
      co-located activity data. Specifically, in the database used, an
      individual contributor is given membership in any team that they
      have worked in, and this is updated retroactively. For each
      individual, we find all teams that person is a member of, compute
      the size of that team, and then average across those team sizes if
      an individual is a member of multiple teams. As such, this number
      is a very rough indicator of the size of teams an individual tends
      to be a part of and is static across the year. This is a
      limitation of the database. This is then entered as an
      individually-varying continuous variable to control for some of
      the effect of team size on an individual’s cycle time.</p>
    </sec>
    <sec id="coding-days-nb-article">
      <title>3.2.5 Coding days</title>
      <p>Coding days was summarized as the average number of days per
      week that a developer made at least one commit. We divided the
      number of coding days in a month by the total number of days in
      that month and multiplied by seven to aid in interpretation.</p>
    </sec>
    <sec id="total-merged-prs-nb-article">
      <title>3.2.6 Total Merged PRs</title>
      <p>One frequently proposed best practice in software work,
      intended to lead to outcomes such as improved task scoping,
      involves breaking work into smaller and more manageable chunks or
      pull requests that can be finished more quickly
      (<xref alt="Kudrjavets, Nagappan, and Rastogi 2022" rid="ref-kudrjavetsSmallCodeChanges2022-nb-article" ref-type="bibr">Kudrjavets,
      Nagappan, and Rastogi 2022</xref>;
      <xref alt="Lines 2023" rid="ref-linesWhyEliteDev2023-nb-article" ref-type="bibr">Lines
      2023</xref>;
      <xref alt="Riosa 2019" rid="ref-riosaWrittenUnwrittenGuide2019-nb-article" ref-type="bibr">Riosa
      2019</xref>;
      <xref alt="Zhang et al. 2022" rid="ref-zhangPullRequestLatency2022-nb-article" ref-type="bibr">Zhang
      et al. 2022</xref>). As such, we used the number of total merged
      pull requests as one measure of task scoping. To calculate this,
      we counted the number of merged pull requests for each user for
      each month.</p>
    </sec>
    <sec id="percent-defect-tickets-nb-article">
      <title>3.2.7 Percent Defect Tickets</title>
      <p>Another potentially beneficial signal in software activity data
      is the reduction of unplanned work on bugs and defect tickets,
      which is also proposed as a bottleneck on improving cycle time
      (<xref alt="Paudel et al. 2024" rid="ref-paudelMeasuringImpactTechnical2024-nb-article" ref-type="bibr">Paudel
      et al. 2024</xref>,
      <xref alt="2024" rid="ref-paudelMeasuringImpactTechnical2024-nb-article" ref-type="bibr">2024</xref>;
      <xref alt="Rosser and Norton 2021" rid="ref-rosserSystemsPerspectiveTechnical2021-nb-article" ref-type="bibr">Rosser
      and Norton 2021</xref>;
      <xref alt="Toxboe 2023" rid="ref-toxboeCycleTime2023-nb-article" ref-type="bibr">Toxboe
      2023</xref>). As such, we used the percentage of defect tickets as
      another measure of task scoping to represent unplanned work that
      may interfere with timely completion of planned work. This may
      also be a downstream signal of individuals’ opportunity for
      focused work time and code quality. To account for this
      possibility, for each user, for each month, we computed the
      percent of tickets that were defect tickets.</p>
    </sec>
    <sec id="degree-centrality-nb-article">
      <title>3.2.8 Degree centrality</title>
      <p>We measured collaboration by calculating degree centrality. To
      evaluate degree centrality, a metric derived from network analysis
      and often used in the analysis of social networks
      (<xref alt="Watts 2004" rid="ref-wattsNewScienceNetworks2004-nb-article" ref-type="bibr">Watts
      2004</xref>), we employed a framework where developers were
      treated as nodes within the network, and their interactions in the
      form of Pull Requests (PRs) were regarded as connections. In other
      words, any contribution of code to the same pull request
      constituted a collaboration edge between developers. We normalized
      each centrality value by dividing by the total number of
      developers constituting the organizational network. The
      calculations were executed using the Python package Networkx
      (<xref alt="Hagberg, Schult, and Swart 2008" rid="ref-SciPyProceedings_11-nb-article" ref-type="bibr">Hagberg,
      Schult, and Swart 2008</xref>). This particular variable serves as
      an effective proxy for quantifying the extent of collaboration
      among developers. We multiply the normalized degree centrality,
      which is between 0 and 1, by 100.</p>
    </sec>
    <sec id="comments-per-pr-nb-article">
      <title>3.2.9 Comments per PR</title>
      <p>Another indicator of collaboration is the frequency of comments
      within PRs. We undertook a comprehensive examination of all PRs
      that were successfully merged in the year 2022 and, for each user,
      calculated the average number of comments per PR that they
      authored each month. This served as a measure to gauge the depth
      of collaboration exhibited during the development and review
      process.</p>
      <fig id="tbl-variables-nb-article">
        <caption><p>Table 1: Variable descriptions</p></caption>
        <table-wrap>
          <table>
            <colgroup>
              <col width="14%" />
              <col width="29%" />
              <col width="57%" />
            </colgroup>
            <thead>
              <tr>
                <th align="left"></th>
                <th align="left">Variable</th>
                <th align="left">Variable Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">Productivity</td>
                <td align="left">Cycle Time</td>
                <td align="left">Avg time from ticket start to end</td>
              </tr>
              <tr>
                <td align="left"></td>
                <td align="left">Proportion unclosed tickets</td>
                <td align="left">Control variable to account for tickets
                missing cycle time</td>
              </tr>
              <tr>
                <td align="left">Time</td>
                <td align="left">Month</td>
                <td align="left">Continuous time variable coded as month
                number</td>
              </tr>
              <tr>
                <td align="left"></td>
                <td align="left">Within-quarter month</td>
                <td align="left">Index of the month number within each
                quarter year</td>
              </tr>
              <tr>
                <td align="left">Team Context</td>
                <td align="left">Team size</td>
                <td align="left">Average size across all teams a
                individual is on</td>
              </tr>
              <tr>
                <td align="left">Coding Time</td>
                <td align="left">Coding Days per Week</td>
                <td align="left">Avg number of coding days a week</td>
              </tr>
              <tr>
                <td align="left">Task Scoping</td>
                <td align="left">Total Merged PRs</td>
                <td align="left">Total number of merged PRs per
                developer</td>
              </tr>
              <tr>
                <td align="left"></td>
                <td align="left">Percent Defect Tickets</td>
                <td align="left">Percent of all tickets that are defect
                tickets</td>
              </tr>
              <tr>
                <td align="left">Collaboration</td>
                <td align="left">Degree Centrality</td>
                <td align="left">Score based on the number of reviewers
                a developer has worked with</td>
              </tr>
              <tr>
                <td align="left"></td>
                <td align="left">Comments per PR</td>
                <td align="left">Number of comments per pr a developer
                is the author on</td>
              </tr>
            </tbody>
          </table>
        </table-wrap>
      </fig>
    </sec>
  </sec>
  <sec id="analytic-approach-nb-article">
    <title>3.3 Analytic Approach</title>
    <p>The models described below are fit using
    <monospace>brms</monospace> (v2.21.6,
    <xref alt="Bürkner 2018" rid="ref-burknerAdvancedBayesianMultilevel2018-nb-article" ref-type="bibr">Bürkner
    2018</xref>,
    <xref alt="2017" rid="ref-burknerBrmsPackageBayesian2017-nb-article" ref-type="bibr">2017</xref>),
    interface the the Stan probabilistic programming language for
    Bayesian sampling (v2.35.0,
    <xref alt="Stan Development Team 2024" rid="ref-gelman-nb-article" ref-type="bibr">Stan
    Development Team 2024</xref>), with the
    <monospace>cmdstanr</monospace> backend (v0.8.0,
    <xref alt="Gabry et al. 2024" rid="ref-gabryCmdstanrInterfaceCmdStan2024-nb-article" ref-type="bibr">Gabry
    et al. 2024</xref>), in R (v4.3.2,
    <xref alt="R Core Team 2023" rid="ref-rcoreteamLanguageEnvironmentStatistical2023-nb-article" ref-type="bibr">R
    Core Team 2023</xref>).</p>
    <p>We developed a model of monthly average ticket cycle time
    conditional on the following predictors: within-quarter month
    number, team size, proportion of unclosed tickets, month number,
    yearly means and month-level deviations for coding days per week,
    total merged PRs, defect ticket percentage, degree centrality, and
    comments per PR. Specifically, we modeled cycle time as distributed
    Weibull with two parameters, <inline-formula><alternatives>
    <tex-math><![CDATA[\lambda]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>λ</mml:mi></mml:math></alternatives></inline-formula>
    (scale), and <italic>k</italic> (shape). The Weibull distribution is
    often used to model time-to-event data
    (<xref alt="Harrell 2015" rid="ref-harrellRegressionModelingStrategies2015-nb-article" ref-type="bibr">Harrell
    2015</xref>;
    <xref alt="Rummel 2017" rid="ref-rummelAverageWeibullAnalysis2017-nb-article" ref-type="bibr">Rummel
    2017</xref>), where <italic>k</italic> determines the change over
    time in the probability of an event occurring (often called the
    “hazard rate”), and where <inline-formula><alternatives>
    <tex-math><![CDATA[\lambda]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>λ</mml:mi></mml:math></alternatives></inline-formula>
    determines the time-to-event for some proportion of the cases (or in
    other words, how spread out the distribution is). For simplicity, we
    assume that the shape (hazard rate, <italic>k</italic>) is not
    influenced by the factors considered, and focus on how these factors
    affect the scale (time-to-event, <inline-formula><alternatives>
    <tex-math><![CDATA[\lambda]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>λ</mml:mi></mml:math></alternatives></inline-formula>)
    of ticket closures, though we did allow the shape,
    <italic>k</italic>, to vary across organizations. In short, the
    Weibull distribution provides flexibility for accurately describing
    cycle time data that tend to have a bulk of observations at the low
    end, with a very long tail of more extreme observations.</p>
    <p>The model for <inline-formula><alternatives>
    <tex-math><![CDATA[\lambda]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>λ</mml:mi></mml:math></alternatives></inline-formula>
    is</p>
    <p></p>
    <p>where <inline-formula><alternatives>
    <tex-math><![CDATA[X]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>X</mml:mi></mml:math></alternatives></inline-formula>
    is the matrix of predictors, <inline-formula><alternatives>
    <tex-math><![CDATA[\beta]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>β</mml:mi></mml:math></alternatives></inline-formula>
    is the vector of coefficients, <inline-formula><alternatives>
    <tex-math><![CDATA[\eta_{\text{org}}]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:msub><mml:mi>η</mml:mi><mml:mtext mathvariant="normal">org</mml:mtext></mml:msub></mml:math></alternatives></inline-formula>
    is random intercepts with mean <inline-formula><alternatives>
    <tex-math><![CDATA[\mu_1]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:msub><mml:mi>μ</mml:mi><mml:mn>1</mml:mn></mml:msub></mml:math></alternatives></inline-formula>
    and linear slopes of month with mean <inline-formula><alternatives>
    <tex-math><![CDATA[\mu_2]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:msub><mml:mi>μ</mml:mi><mml:mn>2</mml:mn></mml:msub></mml:math></alternatives></inline-formula>
    for each organization, and <inline-formula><alternatives>
    <tex-math><![CDATA[\eta_{\text{org:user}}]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:msub><mml:mi>η</mml:mi><mml:mtext mathvariant="normal">org:user</mml:mtext></mml:msub></mml:math></alternatives></inline-formula>
    is random intercepts with mean <inline-formula><alternatives>
    <tex-math><![CDATA[\mu_3]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:msub><mml:mi>μ</mml:mi><mml:mn>3</mml:mn></mml:msub></mml:math></alternatives></inline-formula>
    and linear slopes of month with mean <inline-formula><alternatives>
    <tex-math><![CDATA[\mu_4]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:msub><mml:mi>μ</mml:mi><mml:mn>4</mml:mn></mml:msub></mml:math></alternatives></inline-formula>
    for each user nested within organization. The specific predictors in
    <inline-formula><alternatives>
    <tex-math><![CDATA[X]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>X</mml:mi></mml:math></alternatives></inline-formula>
    are within-quarter month number, team size, proportion of unclosed
    tickets, month number, yearly means and month-level deviations for
    coding days per week, total merged PRs, defect ticket percentage,
    degree centrality, and comments per PR. We also include interactions
    between month number and the following: team size, proportion of
    unclosed tickets, and each of the yearly mean predictors. This
    allows us to account as completely as possible for our control
    variables (team size and proportion of unclosed tickets), and allow
    the effect of month on cycle time to vary by the individual
    differences variables (e.g., to account for the possibility that
    someone who has higher coding days per week shows a less steep
    decrease in cycle time across the year than someone with lower
    coding days per week).</p>
    <p>The model for <italic>k</italic> is</p>
    <p></p>
    <p>where <inline-formula><alternatives>
    <tex-math><![CDATA[\zeta_{\text{org}}]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:msub><mml:mi>ζ</mml:mi><mml:mtext mathvariant="normal">org</mml:mtext></mml:msub></mml:math></alternatives></inline-formula>
    is a random intercept with mean <inline-formula><alternatives>
    <tex-math><![CDATA[\mu_5]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:msub><mml:mi>μ</mml:mi><mml:mn>5</mml:mn></mml:msub></mml:math></alternatives></inline-formula>
    each organization.</p>
    <p>Conceptually, this model allows a unique distribution of cycle
    times (as determined by the random intercepts for both
    <inline-formula><alternatives>
    <tex-math><![CDATA[\lambda]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>λ</mml:mi></mml:math></alternatives></inline-formula>
    and <italic>k</italic>) for each organization. It also allows the
    scale of the distribution of cycle times to vary for each user due
    to the random intercept for <inline-formula><alternatives>
    <tex-math><![CDATA[\lambda]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>λ</mml:mi></mml:math></alternatives></inline-formula>.
    The effect of time (month number) on the scale of the distribution
    of cycle times is also allowed to vary across organizations as well
    as users due to the random slopes (with means
    <inline-formula><alternatives>
    <tex-math><![CDATA[\mu_2]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:msub><mml:mi>μ</mml:mi><mml:mn>2</mml:mn></mml:msub></mml:math></alternatives></inline-formula>
    and <inline-formula><alternatives>
    <tex-math><![CDATA[\mu_4]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:msub><mml:mi>μ</mml:mi><mml:mn>4</mml:mn></mml:msub></mml:math></alternatives></inline-formula>).
    This strategy allows two advantages: first, we account for multiple
    sources of variance that allows our estimates of the effects of
    interest to be more precise; and second, we are able to provide
    estimates of this variation across organizations and users. This
    variation itself is of interest given the various myths mentioned in
    the introduction about developer performance.</p>
    <p>We model the effect of proportion of unclosed tickets and month
    number as smooth functions of the covariate using thin-plate splines
    for increased flexibility
    (<xref alt="Wood 2017" rid="ref-woodGeneralizedAdditiveModels2017-nb-article" ref-type="bibr">Wood
    2017</xref>). Briefly, thin plate splines (functions made up of
    smoothly connected segments) allow for flexible, non-linear
    relationships between predictors and the response variable. These
    splines are penalized to prevent overfitting, balancing model
    flexibility and complexity. The interactions between month number
    and our control variables are parameterized as additional smooth
    functions of month number multiplied by these variables. While our
    focal model parameterizes the interactions between year-level means
    and month number as linear coefficients on multiplicative
    combinations between the two variables, we also examined a model
    that uses additional smooth functions of month number multiplied by
    these variables to allow for additional complexity. We provide the
    model output for this sensitivity analysis in a supplement.</p>
    <p>We set weakly-informative priors centered at zero for all
    parameters, except for the intercept for
    <inline-formula><alternatives>
    <tex-math><![CDATA[\lambda]]></tex-math>
    <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>λ</mml:mi></mml:math></alternatives></inline-formula>
    and <italic>k</italic> which were centered on their approximate
    values in the data (consistent with the default behavior of
    <monospace>brms</monospace>). We performed prior-predictive checks
    to ensure our prior specification generated data that covered and
    exceeded the space of our observations. Given the complexity of the
    model, we also specified initialization of parameters at small
    plausible values (e.g., zero for coefficients, .1 for standard
    deviations of random effects). Full prior and initialization
    specifications are available in the analysis code.</p>
    <p>We sampled from 4 chains with 2,000 total iterations each,
    discarding the first 1,000 iterations as warmup. Inferences were
    made on 4,000 post-warmup draws from the posterior probability
    distribution from the 4 chains.</p>
  </sec>
  <sec id="inferences-nb-article">
    <title>3.4 Inferences</title>
    <p>We take a Bayesian approach to making claims about the sign of
    effects (i.e., whether an association between two variables is
    positive or negative), and to describing its magnitude. Instead of
    the common but fraught frequentist approach of describing whether an
    effect size is unlikely given the assumption of an unrealistic
    point-null hypothesis, we try to give the reader a sense of the
    actual probability that the sign of an effect is in a particular
    direction, and what the impact of the factor is on cycle times in
    terms that are easy to interpret
    (<xref alt="Gelman and Carlin 2014" rid="ref-GelmanPowerCalculationsAssessing2014-nb-article" ref-type="bibr">Gelman
    and Carlin 2014</xref>).</p>
    <p>In more precise statistical terms, unless otherwise stated we
    describe the posterior of parameters and predictions using the
    median of the distribution, and characterize its variation using the
    highest posterior density interval (HDI) which is defined as the
    interval that contains a specified percentage (usually 95%) of the
    most probable values of the parameter
    (<xref alt="Kruschke 2018" rid="ref-kruschkeRejectingAcceptingParameter2018-nb-article" ref-type="bibr">Kruschke
    2018</xref>). We make general descriptive inferences based on the
    probability that a parameter has the sign of the posterior density’s
    median value. For example, if 80% of the posterior density of the
    slope of the effect of month on cycle time is of the same sign as
    the density’s median, and that median is negative, we would say
    something like, “given the model and the data, there is an 80%
    chance that there is a decrease in cycle times across the year.”</p>
  </sec>
  <sec id="r-packages-nb-article">
    <title>3.5 R packages</title>
    <p>R packages explicitly loaded in this analysis and manuscript
    preparation include brms (v2.22.7,
    <xref alt="Bürkner 2018" rid="ref-burknerAdvancedBayesianMultilevel2018-nb-article" ref-type="bibr">Bürkner
    2018</xref>,
    <xref alt="2021" rid="ref-burknerBayesianItemResponse2021-nb-article" ref-type="bibr">2021</xref>,
    <xref alt="2017" rid="ref-burknerBrmsPackageBayesian2017-nb-article" ref-type="bibr">2017</xref>),
    cmdstanr (v0.8.0,
    <xref alt="Gabry et al. 2024" rid="ref-gabryCmdstanrInterfaceCmdStan2024-nb-article" ref-type="bibr">Gabry
    et al. 2024</xref>), data.table (v1.15.4,
    <xref alt="Barrett et al. 2024" rid="ref-barrettDatatableExtensionDataframe2024-nb-article" ref-type="bibr">Barrett
    et al. 2024</xref>), ggplot2 (v3.5.0,
    <xref alt="Wickham 2016" rid="ref-wickhamGgplot2ElegantGraphics2016-nb-article" ref-type="bibr">Wickham
    2016</xref>), flextable (v0.9.5,
    <xref alt="Gohel and Skintzos 2024" rid="ref-gohelFlextableFunctionsTabular2024-nb-article" ref-type="bibr">Gohel
    and Skintzos 2024</xref>), knitr (v1.46,
    <xref alt="Xie 2015" rid="ref-xieDynamicDocumentsKnitr2015-nb-article" ref-type="bibr">Xie
    2015</xref>,
    <xref alt="2014" rid="ref-xieKnitrComprehensiveTool2014-nb-article" ref-type="bibr">2014</xref>,
    <xref alt="2024" rid="ref-xieKnitrGeneralpurposePackage2024-nb-article" ref-type="bibr">2024</xref>),
    marginaleffects (v0.19.0,
    <xref alt="Arel-Bundock 2024" rid="ref-arel-bundockMarginaleffectsPredictionsComparisons2024-nb-article" ref-type="bibr">Arel-Bundock
    2024</xref>), mgcv (v1.9.0,
    <xref alt="Wood 2011" rid="ref-woodFastStableRestricted2011-nb-article" ref-type="bibr">Wood
    2011</xref>,
    <xref alt="2017" rid="ref-woodGeneralizedAdditiveModels2017-nb-article" ref-type="bibr">2017</xref>,
    <xref alt="2004" rid="ref-woodStableEfficientMultiple2004-nb-article" ref-type="bibr">2004</xref>,
    <xref alt="2003" rid="ref-woodThinplateRegressionSplines2003-nb-article" ref-type="bibr">2003</xref>;
    <xref alt="Wood, Pya, and Saefken 2016" rid="ref-woodSmoothingParameterModel2016-nb-article" ref-type="bibr">Wood,
    Pya, and Saefken 2016</xref>), parameters (v0.21.6,
    <xref alt="Lüdecke et al. 2020" rid="ref-ludeckeExtractingComputingExploring2020-nb-article" ref-type="bibr">Lüdecke
    et al. 2020</xref>), patchwork (v1.2.0,
    <xref alt="Pedersen 2024" rid="ref-pedersenPatchworkComposerPlots2024-nb-article" ref-type="bibr">Pedersen
    2024</xref>), posterior (v1.5.0,
    <xref alt="Bürkner et al. 2023" rid="ref-burknerPosteriorToolsWorking2023-nb-article" ref-type="bibr">Bürkner
    et al. 2023</xref>;
    <xref alt="Vehtari et al. 2021" rid="ref-vehtariRanknormalizationFoldingLocalization2021-nb-article" ref-type="bibr">Vehtari
    et al. 2021</xref>), rlang (v1.1.3,
    <xref alt="Henry and Wickham 2024" rid="ref-henryRlangFunctionsBase2024-nb-article" ref-type="bibr">Henry
    and Wickham 2024</xref>), scales (v1.3.0,
    <xref alt="Wickham, Pedersen, and Seidel 2023" rid="ref-wickhamScalesScaleFunctions2023-nb-article" ref-type="bibr">Wickham,
    Pedersen, and Seidel 2023</xref>), scico (v1.5.0.9000,
    <xref alt="Pedersen and Crameri 2025" rid="ref-pedersenScicoColourPalettes2025-nb-article" ref-type="bibr">Pedersen
    and Crameri 2025</xref>), showtext (v0.9.7,
    <xref alt="Qiu and details. 2024" rid="ref-qiuShowtextUsingFonts2024-nb-article" ref-type="bibr">Qiu
    and details. 2024</xref>), StanHeaders (v2.36.0.9000,
    <xref alt="Stan Development Team 2020" rid="ref-standevelopmentteamStanHeadersHeadersInterface2020-nb-article" ref-type="bibr">Stan
    Development Team 2020</xref>), and tidybayes (v3.0.6,
    <xref alt="Kay 2023" rid="ref-kayTidybayesTidyData2023-nb-article" ref-type="bibr">Kay
    2023</xref>).</p>
  </sec>
</sec>
<sec id="results-nb-article">
  <title>4. Results</title>
  <p>Results from the linear model reported below were highly similar to
  those in the more flexible non-linear model sensitivity analysis
  described above. Also note that parameters in the table are from a
  linear model for the distribution of
  log(<inline-formula><alternatives>
  <tex-math><![CDATA[\lambda]]></tex-math>
  <mml:math display="inline" xmlns:mml="http://www.w3.org/1998/Math/MathML"><mml:mi>λ</mml:mi></mml:math></alternatives></inline-formula>)
  and log(<italic>k</italic>), while model expectations are on the
  response scale and can therefore display curvature even while the
  model is linear.</p>
  <p>The first section of the results concerns the population-level
  effects and showcases the expectations of cycle time conditional on
  the various co-varying factors we target. The second section explores
  the variability in these effects across time, across individuals, and
  across organizations.</p>
  <sec specific-use="notebook-content">
  <code language="r script">fe_par_nicenames &lt;- c(b_Intercept = 'Intercept log(\u03BB)',
                      b_shape_Intercept = 'Intercept log(k)',
                      b_within_quarter_month_num_c = 'Within-quarter month',
                      b_team_size_c = 'Team size',
                      b_wi_avg_coding_days_per_week = 'Avg. coding days/week (within-person)',
                      b_yr_avg_avg_coding_days_per_week_c = 'Avg. coding days/week',
                      b_wi_total_merged_prs = 'Total merged PRs (within-person)',
                      b_yr_avg_total_merged_prs_c = 'Total merged PRs',
                      b_wi_defect_tickets_pct_indiv = 'Defect tickets % (within-person)',
                      b_yr_avg_defect_tickets_pct_indiv_c = 'Defect tickets %',
                      b_wi_degree_centrality_monthly_100 = 'Degree centrality (within-person)',
                      b_yr_avg_degree_centrality_monthly_100_c = 'Degree centrality',
                      b_wi_comments_per_pr = 'Comments per PR (within-person)',
                      b_yr_avg_comments_per_pr_c = 'Comments per PR',
                      `b_yr_avg_avg_coding_days_per_week_c:month_num_c` = 'Avg. coding days/week × Month',
                      `b_yr_avg_total_merged_prs_c:month_num_c` = 'Total merged PRs × Month',
                      `b_yr_avg_defect_tickets_pct_indiv_c:month_num_c` = 'Defect tickets % × Month',
                      `b_yr_avg_degree_centrality_monthly_100_c:month_num_c` = 'Degree centrality × Month',
                      `b_yr_avg_comments_per_pr_c:month_num_c` = 'Comments per PR × Month')



ct_model_draws_fe &lt;- readRDS('cycle_time_full_intx_lin_remonth_draws_id-fe.rds')
ct_model_draws_bs &lt;- readRDS('cycle_time_full_intx_lin_remonth_draws_id-bs.rds')
ct_model_draws_re &lt;- readRDS('cycle_time_full_intx_lin_remonth_draws_id-re.rds')
ct_model_draws_sds &lt;- readRDS('cycle_time_full_intx_lin_remonth_draws_id-sds.rds')
ct_model_pars_fe &lt;- parameters::model_parameters(ct_model_draws_fe, 
                                                 digits = 4,
                                                 centrality = 'median', 
                                                 ci = .95, 
                                                 ci_method = 'hdi', 
                                                 test = 'pd', exponentiate = FALSE)
ct_model_pars_bs &lt;- parameters::model_parameters(ct_model_draws_bs, 
                                                 digits = 4,
                                                 centrality = 'median', 
                                                 ci = .95, 
                                                 ci_method = 'hdi', 
                                                 test = 'pd', exponentiate = FALSE)
ct_model_pars_re &lt;- parameters::model_parameters(ct_model_draws_re, 
                                                 digits = 4,
                                                 centrality = 'median', 
                                                 ci = .95, 
                                                 ci_method = 'hdi', 
                                                 test = 'pd', exponentiate = FALSE)
ct_model_pars_sds &lt;- parameters::model_parameters(ct_model_draws_sds, 
                                                 digits = 4,
                                                 centrality = 'median', 
                                                 ci = .95, 
                                                 ci_method = 'hdi', 
                                                 test = 'pd', exponentiate = FALSE)
ct_model_pars_fe_for_text &lt;- ct_model_pars_fe
ct_model_pars_fe$Parameter &lt;- fe_par_nicenames[ct_model_pars_fe$Parameter]
ct_model_pars_fe$pd &lt;- sprintf('% 3.0f%%', ct_model_pars_fe$pd*100)


names(ct_model_pars_fe) &lt;- c('Parameter', 'Posterior Median', 'Lower 95% HDI', 'Upper 95% HDI', 'Sign Probability')</code>
  </sec>
  <sec id="population-level-effects-nb-article">
    <title>4.1 Population-level effects</title>
    <sec specific-use="notebook-content">
    <code language="r script">flextable(ct_model_pars_fe) |&gt;
  colformat_double(digits = 4) |&gt;
  set_table_properties(layout = 'fixed') |&gt;
  width(j = 1, 1.25, unit = 'in') |&gt; 
  width(j = 2:5, .75, unit = 'in') |&gt;
  theme_booktabs(bold_header = TRUE) |&gt;
  align(j = 5, align = 'right', part = 'all') |&gt;
  footnote(i = 1, j = 2,
           value = as_paragraph(
             'Median of the posterior distribution, used as point estimate'
           ),
           ref_symbols = '1',
           part = 'header',
           inline = TRUE,
           sep = '. '
  ) |&gt; 
  footnote(i = 1, j = 3:4,
           value = as_paragraph(
             '95% Highest Density Interval, containing the most probable parameter values with 95% posterior probability mass'
           ),
           ref_symbols = '2',
           part = 'header',
           inline = TRUE,
           sep = '. '
  ) |&gt; 
  footnote(i = 1, j = 5,
           value = as_paragraph(
               'Probability that the effect is in the reported direction, calculated as the proportion of posterior samples with the same sign as the point estimate'
             ),
           ref_symbols = '3',
           part = 'header',
           inline = TRUE,
           sep = '. '
  ) |&gt; 
  fontsize(size = 8, part = &quot;all&quot;)</code>
    <fig id="tbl-results-fe-nb-article">
      <caption><p>Table 2: Population-level effect
      estimates</p></caption>
      <graphic mimetype="image" mime-subtype="png" xlink:href="index_files/figure-jats/tbl-results-fe-1.png" />
    </fig>
    </sec>
    <p>We find that all measured factors, both individual-difference and
    within-person deviations, have a non-zero association with cycle
    time, with 100% of the posterior distribution for these parameters
    sharing the same sign (see
    <xref alt="Table 2" rid="tbl-results-fe-nb-article">Table 2</xref> for point
    estimates and uncertainty intervals). Within-quarter month showed a
    very small (relative to other effects shown below) negative
    association with cycle time, indicating that time to ticket
    completion is shorter at the end of quarters
    (<xref alt="Figure 2 (a)" rid="fig-quarter-nb-article">Figure 2 (a)</xref>).
    Team size had almost no effect on cycle time
    (<xref alt="Table 2" rid="tbl-results-fe-nb-article">Table 2</xref>). Cycle
    times tended to decrease slightly over the year
    (<xref alt="Figure 2 (b)" rid="fig-month-nb-article">Figure 2 (b)</xref>). The
    proportion of unclosed tickets, an important control variable, on
    average had close to no effect on our measure of average monthly
    cycle time but interacted with month.</p>
    <fig id="fig-time-nb-article">
      <caption><p>Figure 2</p></caption>
      <table-wrap>
        <table>
          <colgroup>
            <col width="49%" />
            <col width="2%" />
            <col width="49%" />
          </colgroup>
          <tbody>
            <tr>
              <td align="left"><p specific-use="wrapper">
                <boxed-text>
                  <fig id="fig-quarter-nb-article">
                    <caption><p>(a) Within-quarter month doesn’t affect
                    cycle time. Background pixels represent density of
                    data, with darker colors indicating greater density.
                    Lines are median posterior expectations, with 95%
                    credible interval ribbons.</p></caption>
                    <graphic mimetype="image" mime-subtype="png" xlink:href="cycle_time_full_intx_lin_remonth_quarter.png" />
                  </fig>
                </boxed-text>
              </p></td>
              <td align="left"><p specific-use="wrapper">
                <boxed-text>
                  <p> </p>
                </boxed-text>
              </p></td>
              <td align="left"><p specific-use="wrapper">
                <boxed-text>
                  <fig id="fig-month-nb-article">
                    <caption><p>(b) Slight reduction of cycle time
                    across the year. Background hexagons represent
                    density of data, with darker colors indicating
                    greater density. Lines are median posterior
                    expectations, with 95% credible interval
                    ribbons.</p></caption>
                    <graphic mimetype="image" mime-subtype="png" xlink:href="cycle_time_full_intx_lin_remonth_month_num.png" />
                  </fig>
                </boxed-text>
              </p></td>
            </tr>
          </tbody>
        </table>
      </table-wrap>
    </fig>
    <p>Specifically, when individuals increased average coding days per
    week month-to-month they also tended to have lower cycle times, and
    individuals with more average coding days per week across the year
    tended to have lower cycle times
    (<xref alt="Figure 3" rid="fig-codingdays-nb-article">Figure 3</xref>). The
    association between coding days and cycle time also tended to
    increase in strength across months, with 97% of the posterior in
    this direction.</p>
    <fig id="fig-codingdays-nb-article">
      <caption><p>Figure 3: More coding days is associated with shorter
      cycle times. Background hexagons represent density of data, with
      darker colors indicating greater density. Lines are median
      posterior expectations, with 95% credible interval
      ribbons.</p></caption>
      <graphic mimetype="image" mime-subtype="png" xlink:href="cycle_time_full_intx_lin_remonth_coding_days.png" />
    </fig>
    <p>More merged PRs was associated with lower cycle time for both
    individual average differences and within-person differences. This
    effect also may get stronger across the year with 90% of the
    posterior in this direction
    (<xref alt="Figure 4" rid="fig-mergedprs-nb-article">Figure 4</xref>).</p>
    <fig id="fig-mergedprs-nb-article">
      <caption><p>Figure 4: More merged PRs is associated with shorter
      cycle times. Background hexagons represent density of data, with
      darker colors indicating greater density. Lines are median
      posterior expectations, with 95% credible interval
      ribbons.</p></caption>
      <graphic mimetype="image" mime-subtype="png" xlink:href="cycle_time_full_intx_lin_remonth_merged_prs.png" />
    </fig>
    <p>The percent of defect tickets showed a negative association with
    cycle time for within-person deviations and a positive association
    for individual differences. In other words, individuals who tended
    to have more defect tickets as a proportion of their work across the
    course of the year also tended to have longer cycle times. However,
    for any given person, an increase in the proportion of defect
    tickets in a month was associated with lower cycle times
    (<xref alt="Figure 5" rid="fig-defecttickets-nb-article">Figure 5</xref>). The
    interaction with month number for this effect was centered close to
    zero, with only 78% of the posterior in the negative direction with
    a fairly narrow distribution around zero (95% HDI = [-0.0003,
    0.0001]).</p>
    <fig id="fig-defecttickets-nb-article">
      <caption><p>Figure 5: Higher-than-average proportion of defect
      tickets in a month is associated with shorter cycle times, while
      individuals with more defect tickets on average show longer cycle
      times. Background hexagons represent density of data, with darker
      colors indicating greater density. Lines are median posterior
      expectations, with 95% credible interval ribbons.</p></caption>
      <graphic mimetype="image" mime-subtype="png" xlink:href="cycle_time_full_intx_lin_remonth_defect_tickets.png" />
    </fig>
    <p>Degree centrality, as measured both by year-averaged individual
    differences and within-person deviations, showed a negative
    association with cycle time
    (<xref alt="Figure 6" rid="fig-degree-nb-article">Figure 6</xref>). In other
    words, individuals who on average contribute code to PRs that have a
    lot of other contributors tend to have lower cycle times for tickets
    they own. Similarly, when individuals’ collaboration on PRs
    increases in a given month, their cycle time tends to go down. This
    effect does not unambiguously strengthen or weaken across the year
    with 71% of the posterior for the interaction effect having negative
    sign with a fairly narrow distribution around zero (95% HDI =
    [-0.0005, 0.0002]).</p>
    <fig id="fig-degree-nb-article">
      <caption><p>Figure 6: Higher degree centrality is associated with
      shorter cycle times. Background hexagons represent density of
      data, with darker colors indicating greater density. Lines are
      median posterior expectations, with 95% credible interval
      ribbons.</p></caption>
      <graphic mimetype="image" mime-subtype="png" xlink:href="cycle_time_full_intx_lin_remonth_degree_cent.png" />
    </fig>
    <p>Finally, the number of comments per PR showed a positive
    association with cycle time. Individuals who tended to garner more
    comments on their PRs also tended to have higher cycle times, and
    within a given month, a higher number of comments per PR relative to
    a person’s average was also associated with higher cycle times
    (<xref alt="Figure 7" rid="fig-comments-nb-article">Figure 7</xref>). This
    effect also does not unambiguously strengthen or weaken across the
    year with 59% of the posterior for the interaction effect having
    negative sign with a fairly narrow distribution around zero (95% HDI
    = [-0.0004, 0.0005]).</p>
    <fig id="fig-comments-nb-article">
      <caption><p>Figure 7: More comments per PR is associated with
      longer cycle times. Background hexagons represent density of data,
      with darker colors indicating greater density. Lines are median
      posterior expectations, with 95% credible interval
      ribbons.</p></caption>
      <graphic mimetype="image" mime-subtype="png" xlink:href="cycle_time_full_intx_lin_remonth_pr_comments.png" />
    </fig>
  </sec>
  <sec id="effect-sizes-and-heterogeneity-nb-article">
    <title>4.2 Effect sizes and heterogeneity</title>
    <p>Given the inherent non-linearity of the Weibull distribution, the
    effects of the predictors on cycle time are not constant across the
    range of the data. For example, the expected difference in
    cycle-time for a unit difference for within-person coding days per
    week will be different at different times of the year simply as a
    by-product that we are modeling the log of the scale parameter.
    Notice that this is true even in the absence of interactive effects,
    which further complicate the interpretation of the effect sizes for
    the year-average variables. Indeed, the random effects which allow
    intercept and month-effect variance both organizations and
    individuals also adds to the complexity of interpreting the effect
    sizes.</p>
    <p>To give the reader a sense for how these associations play out
    across organizations, we plot a range of expected changes in cycle
    time given a counterfactual change from the 50th percentile to the
    90th percentile on the variable of interest, all else held equal
    (<xref alt="Figure 8" rid="fig-heatmaps-nb-article">Figure 8</xref>). We do
    this for each organization, for each month, and then plot these as a
    heatmap where the color represents the expected change in cycle
    time. This allows us to see how the effect of a variable on cycle
    time changes across organizations and across time.</p>
    <fig id="fig-heatmaps-nb-article">
      <caption><p>Figure 8: Effect sizes for each variable are
      heterogeneous across time, organizations, and values of other
      predictors. These plots show the expected change in cycle time
      from 50th to 90th percentile of each variable, by organization and
      month. The color represents the expected change in cycle time,
      with warm indicating an increase in cycle time and cool indicating
      a decrease. The scale is the same across all plots.</p></caption>
      <table-wrap>
        <table>
          <colgroup>
            <col width="33%" />
            <col width="33%" />
            <col width="33%" />
          </colgroup>
          <tbody>
            <tr>
              <td align="left"><p specific-use="wrapper">
                <boxed-text>
                  <fig id="fig-heatmaps-coding-nb-article">
                    <caption><p>(a) Avg. coding days per
                    Week</p></caption>
                    <graphic mimetype="image" mime-subtype="png" xlink:href="avg_coding_days_per_week_eff_size.png" />
                  </fig>
                </boxed-text>
              </p></td>
              <td align="left"><p specific-use="wrapper">
                <boxed-text>
                  <fig id="fig-heatmaps-prs-nb-article">
                    <caption><p>(b) Total merged PRs</p></caption>
                    <graphic mimetype="image" mime-subtype="png" xlink:href="total_merged_prs_eff_size.png" />
                  </fig>
                </boxed-text>
              </p></td>
              <td align="left"><p specific-use="wrapper">
                <boxed-text>
                  <fig id="fig-heatmaps-defects-nb-article">
                    <caption><p>(c) Defect tickets
                    percentage</p></caption>
                    <graphic mimetype="image" mime-subtype="png" xlink:href="defect_tickets_pct_indiv_eff_size.png" />
                  </fig>
                </boxed-text>
              </p></td>
            </tr>
          </tbody>
        </table>
      </table-wrap>
      <table-wrap>
        <table>
          <colgroup>
            <col width="17%" />
            <col width="33%" />
            <col width="33%" />
            <col width="17%" />
          </colgroup>
          <tbody>
            <tr>
              <td align="left"><p specific-use="wrapper">
                <boxed-text>
                  <p> </p>
                </boxed-text>
              </p></td>
              <td align="left"><p specific-use="wrapper">
                <boxed-text>
                  <fig id="fig-heatmaps-centrality-nb-article">
                    <caption><p>(d) Degree centrality</p></caption>
                    <graphic mimetype="image" mime-subtype="png" xlink:href="degree_centrality_monthly_100_eff_size.png" />
                  </fig>
                </boxed-text>
              </p></td>
              <td align="left"><p specific-use="wrapper">
                <boxed-text>
                  <fig id="fig-heatmaps-comments-nb-article">
                    <caption><p>(e) Comments per PR</p></caption>
                    <graphic mimetype="image" mime-subtype="png" xlink:href="comments_per_pr_eff_size.png" />
                  </fig>
                </boxed-text>
              </p></td>
              <td align="left"><p specific-use="wrapper">
                <boxed-text>
                  <p> </p>
                </boxed-text>
              </p></td>
            </tr>
          </tbody>
        </table>
      </table-wrap>
    </fig>
  </sec>
  <sec id="variability-in-effects-nb-article">
    <title>4.3 Variability in effects</title>
    <p>There is heterogeneity in the distribution of cycle time across
    organizations in both the scale and shape parameters, which suggests
    that comparisons of cycle time trends between teams across different
    organizations may be difficult and should include careful approaches
    that take into account this variation
    (<xref alt="Table 3" rid="tbl-results-re-nb-article">Table 3</xref>). This can
    be seen visually as differences in the posterior predictive
    distribution of cycle times across organizations especially when
    viewed on a log scale to emphasize differences at the low end of
    cycle times where the distribution tends to be most dense
    (<xref alt="Figure 9" rid="fig-pp-check-org-nb-article">Figure 9</xref>).
    Different organizations likely have different guidelines and
    cultures around using tickets and this may show up as this kind of
    heterogeneity in cycle time. Incidentally we can also see, looking
    across the full data-set, that the posterior distribution of our
    model captures well our data distribution
    (<xref alt="Figure 10" rid="fig-pp-check-sum-nb-article">Figure 10</xref>).</p>
    <sec specific-use="notebook-content">
    <code language="r script">ct_model_pars_dt &lt;- as.data.table(ct_model_pars_re)

ct_model_pars_dt[, `:=`(
  Stat = fifelse(grepl(&quot;^sd_&quot;, Parameter), &quot;SD&quot;, 
                     fifelse(grepl(&quot;^cor_&quot;, Parameter), &quot;Correlation&quot;, NA_character_)),
  Grp = fifelse(grepl(&quot;org_id_fac:user_id_fac&quot;, Parameter), &quot;org:user&quot;, &quot;org&quot;),
  Par = fifelse(grepl('__shape_', Parameter), 'log(k)', 'log(\u03BB)'),
  Pred = fifelse(
    grepl(&quot;^cor_&quot;, Parameter),
    &quot;Intercept-Month&quot;,
    fifelse(grepl(&quot;month_num_c&quot;, Parameter), &quot;Month&quot;, 
            fifelse(grepl(&quot;__(shape_)*Intercept&quot;, Parameter) &amp; !grepl(&quot;__month_num_c&quot;, Parameter), &quot;Intercept&quot;,
                    NA_character_)))
)]

ct_model_pars_dt[, `95% HDI` := sprintf('[%.3f, %.3f]', CI_low, CI_high)]

setnames(ct_model_pars_dt, 
         c(&quot;Median&quot;, &quot;pd&quot;),
         c(&quot;Post Med&quot;, &quot;Sign Prob&quot;))

ct_model_pars_dt[, `Sign Prob` := paste0(round(`Sign Prob` * 100, 2), &quot;%&quot;)]

setorder(ct_model_pars_dt, -Par, Grp, -Stat, Pred)

final_cols &lt;- c(&quot;Par&quot;, &quot;Grp&quot;, &quot;Stat&quot;, &quot;Pred&quot;,
                &quot;Post Med&quot;, &quot;95% HDI&quot;, &quot;Sign Prob&quot;)
display_dt &lt;- ct_model_pars_dt[, ..final_cols]

flextable(display_dt) |&gt;
  colformat_double(j = c(&quot;Post Med&quot;), digits = 3) |&gt;
  set_table_properties(layout = 'fixed') |&gt;
  width(j = 1, .4, unit = 'in') |&gt;
  width(j = 2, .4, unit = 'in') |&gt;
  width(j = 3, .5, unit = 'in') |&gt;
  width(j = 4, .5, unit = 'in') |&gt;
  width(j = 5, .5, unit = 'in') |&gt;
  width(j = 6, .75, unit = 'in') |&gt;
  width(j = 7, .5, unit = 'in') |&gt;
  theme_booktabs(bold_header = TRUE) |&gt;
  align(j = 5:7, align = 'right', part = 'all') |&gt; 
  merge_v(j = c(&quot;Par&quot;, 'Grp', 'Stat')) |&gt; 
  valign(j = c(&quot;Par&quot;, 'Grp', 'Stat'), valign = &quot;top&quot;) |&gt; 
  footnote(
    i = 1, j = 1:5,
    value = as_paragraph(
      c('Response distribution parameter (λ: rate parameter, k: shape parameter)',
        'Random effects grouping structure',
        'Statistic type (SD: standard deviation of random effect, Correlation: correlation between random effects)',
        'Fixed or random effect term',
        'Median of the posterior distribution, used as point estimate')
    ),
    ref_symbols = c('1', '2', '3', '4', '5'),
    part = 'header',
    inline = TRUE,
    sep = '. '
  ) |&gt; 
  footnote(i = 1, j = 6,
           value = as_paragraph(
             '95% Highest Density Interval, containing the most probable parameter values with 95% posterior probability mass'
           ),
           part = 'header',
           inline = TRUE,
           sep = '. ',
           ref_symbols = '6'
  ) |&gt; 
  footnote(i = 1, j = 7,
           value = as_paragraph(
               'Probability that the effect is in the reported direction, calculated as the proportion of posterior samples with the same sign as the point estimate'
             ),
           part = 'header',
           inline = TRUE,
           sep = '. ',
           ref_symbols = '7'
  ) |&gt; 
  fontsize(size = 8, part = &quot;all&quot;)</code>
    <fig id="tbl-results-re-nb-article">
      <caption><p>Table 3: Variance and covariance of organization and
      individual-level effects</p></caption>
      <graphic mimetype="image" mime-subtype="png" xlink:href="index_files/figure-jats/tbl-results-re-1.png" />
    </fig>
    </sec>
    <p>Variation across individuals’ scale parameter after accounting
    for organization heterogeneity is also substantial, and greater in
    magnitude than organizational heterogeneity (sd = 0.65 [0.63, 0.66]
    versus sd = 0.47 [0.42, 0.53];
    <xref alt="Table 3" rid="tbl-results-re-nb-article">Table 3</xref>). There is
    also notable heterogeneity in the effect of month both at the
    organization level and the level of individuals. There is a small
    negative correlation between individuals’ (and less credibly,
    organizations’) scale intercepts and the effect of month meaning
    that a person who has a higher cycle time at month 7 also tends to
    decrease more steeply in their cycle time across the year
    (<xref alt="Table 3" rid="tbl-results-re-nb-article">Table 3</xref>).</p>
    <p>We also examine the variability around our population effects.
    <xref alt="Figure 11" rid="fig-bw-ct-traj-nb-article">Figure 11</xref> shows
    model-expected cycle-time trajectories across the year for
    randomly-sampled individuals. One of the stronger effects at the
    population-level is the effect of the average number of
    coding-days-per-week (both averaged over the year, and month by
    month). To begin, we examine the effect of year-average
    coding-days-per-week. We split the sampled individuals into 5%-wide
    quantiles based on their yearly average coding days per week. The
    population-level effect discussed above reveals that, on average,
    individuals who have more coding-days-per-week also tend to have
    lower cycle times. This shows up subtly in Figure 9 as a decline in
    cycle-time from left-to-right across these quantiles, especially
    when examining the amount to which the trajectories occur below the
    thick black median-cycle-time line.</p>
    <fig id="fig-pp-check-org-nb-article">
      <caption><p>Figure 9: Distributions of cycle time vary widely
      across organizations both in their central tendency and spread.
      Posterior prediction densities for model-expected distributions of
      cycle time are shown across all organizations with at least 10
      observations. Each density represents one organization, showing
      model-predicted cycle times from 50 posterior draws. The scale has
      been transformed slightly to better show the spread of data.
      Columns have been ordered by sample size, and rows are ordered by
      median predicted cycle time. Density fill colors reflect sample
      size. Note that distributions from larger orgs have less
      variability in their posterior predictions. Line at 4 weeks is set
      arbitrarily to aid in comparisons.</p></caption>
      <graphic mimetype="image" mime-subtype="png" xlink:href="cycle_time_full_intx_nlq_pp_check.png" />
    </fig>
    <fig id="fig-pp-check-sum-nb-article">
      <caption><p>Figure 10: Model-predicted posterior distributions of
      cycle time captures the data distribution well. The posterior
      prediction density for cycle time is shown across all data points.
      The scale has been transformed slightly to better show the spread
      of data.</p></caption>
      <graphic mimetype="image" mime-subtype="png" xlink:href="cycle_time_full_intx_nlq_pp_check_summary.png" />
    </fig>
    <p>What is important about this illustration when interpreting these
    results in the context of a real software development team is that
    it shows a single measurement for a person on any given day or even
    averaged across a month may not be representative of that
    individual’s long-term trend. While some of this uncertainty
    reflects measurement error, much of it is irreducible given the
    factors we’ve considered in this analysis. It may be possible to
    reduce it by adding further information to the model. However, at
    present the conclusion must be that one must take great care in
    comparing cycle-time between individuals even in the same
    organization, or even against themselves.</p>
    <fig id="fig-bw-ct-traj-nb-article">
      <caption><p>Figure 11: Individual observations of cycle time are
      highly variable across the year. Each line tracks cycle time
      month-to-month for one randomly sampled individual. Each facet
      shows the trajectories for individuals who have year-average
      average-coding-days-per-week in the quantile specified at the top
      of the facet. Shading represents prediction intervals from the
      model for plausible cycle time values for these
      individuals.</p></caption>
      <graphic mimetype="image" mime-subtype="png" xlink:href="cycle_time_full_intx_lin_remonth_post_pred_ids.png" />
    </fig>
    <p>We can also examine the effect of month-by-month deviations in
    coding-days-per-week at the level of these example individuals.
    <xref alt="Figure 12" rid="fig-wi-ct-traj-nb-article">Figure 12</xref> shows
    data for the same quantiles as above, but now cycle time is
    normalized around each person’s median to better visualize
    within-person deviations in cycle time. Again, across the year we
    see that variation within-person is substantial. While we can see
    the tendency for within-person increases and decreases in
    average-coding-days-per-week to affect cycle time, there is
    considerable variation still, with many yellow-colored points above
    the 0 line and darker points below the zero line.</p>
    <p>We can unpack this variability further with the help of our
    model. We will again examine a random subset of 10 participants with
    complete data across the year. Again, each one is sampled from a
    different bin of values of one of our strongest predictors,
    year-average average-coding-days-per-week.
    <xref alt="Figure 13" rid="fig-ct-pp-traj-nb-article">Figure 13</xref> (left)
    shows the model-expected central tendency (gloss as a sort of
    moving-average) of each of these participants, along with their
    observed data. We can also ask the model to generate plausible
    values for cycle time that we might observe; these are the gray
    lines behind everything. What is clear here is that there is some
    systematic effect on the central tendency for different levels of
    year-average coding days. Again, we see a lot of overlap across
    individuals. And when we examine both the observed data, and the
    model predictions, we see a whole lot more overlap.</p>
    <fig id="fig-wi-ct-traj-nb-article">
      <caption><p>Figure 12: Individual month-to-month deviations from
      year-average cycle time are highly variable across the year. Each
      line tracks cycle time month-to-month for one randomly sampled
      individual. Each facet shows the trajectories for individuals who
      have year-average average-coding-days-per-week in the quantile
      specified at the top of the facet. Shading represents prediction
      intervals from the model for plausible cycle time values for these
      individuals.</p></caption>
      <graphic mimetype="image" mime-subtype="png" xlink:href="cycle_time_full_intx_nlq_post_pred_ids_win.png" />
    </fig>
    <p>The next thing we can do with the model is ask it to give us
    these expectations and predictions under the counterfactual
    condition of each of these participants having a different number of
    year-average coding days. This is just a simulation, not an
    experiment, so we should heed this caveat. In
    <xref alt="Figure 13" rid="fig-ct-pp-traj-nb-article">Figure 13</xref> (right),
    we see model expectations and posterior predictions were each of
    these participants induced to take on the yearly-average number of
    coding days from the 10th, 50th, and 90th quantile of our data. This
    is a huge spread, but we see only small, incremental changes in the
    model expectations for each of them. More importantly, the spread of
    the posterior predictions, binned for ease of visualization in the
    pixels behind the expectation lines, are nearly indistinguishable.
    Taken together, these results once again suggest caution in the use
    of this highly variable software metric: taking a relatively
    unsophisticated monthly average of an individual developer’s cycle
    time data is not likely to be able to tell you what their cycle time
    will be like in the future. This further suggests that future work
    investigating the impact of interventions on factors that impact
    cycle time may expect to see relatively small or even invisible
    changes at the individual level, even when inducing changes that do
    scale to desired impact at the organizational level.</p>
    <fig id="fig-ct-pp-traj-nb-article">
      <caption><p>Figure 13: Variability in cycle time within-person
      across time overwhelms subtle differences in averages. These plots
      show posterior predictions of reasonable monthly-median cycle time
      and counterfactual predictions. The <bold>left</bold> plot shows
      model expectations (our best guess at the central tendency) and
      95% credible intervals (colored lines and ribbons) of cycle time
      over the year for 10 randomly selected participants. Lines and
      ribbons are colored by the participants observed year-average
      average-coding-days-per-week. Black points and the stronger black
      line indicates observed data for these participants. Light gray
      lines represent model-derived posterior predictions of cycle times
      we might expect to see from these participants. The
      <bold>right</bold> plot shows these same participants under three
      counterfactual conditions: with their year-average-coding-days set
      to the 10th, 50th, and 90th quantile values. Each line represents
      the model expectation under these conditions, all else being
      equal. Posterior predictions of reasonable values for observed
      median-monthly cycle times are binned by these quantiles and by
      month in the pixels behind the expectations.</p></caption>
      <graphic mimetype="image" mime-subtype="png" xlink:href="cycle_time_full_intx_nlq_combined_post_pred_counterfactual.png" />
    </fig>
  </sec>
</sec>
<sec id="limitations-nb-article">
  <title>5. Limitations</title>
  <p>Throughout the results, we have included commentary on the larger
  context of software work and associated cautions regarding the
  interpretation of our findings. In the following discussion section,
  we further elaborate on future research directions which may build on
  the evidence in the current paper. As noted in the introduction, there
  are many limitations to the usage of an output-based velocity metric,
  including that such a metric does not capture business outcomes, the
  quality of task performance, and perceived value of software
  development work. Nevertheless, monitoring cycle time is frequently
  recommended as a measurement practice for software management. Below,
  we elaborate on four key limitations of the current findings in
  greater detail, which are of course also opportunities for future
  research. In general, these limitations point to the need for more and
  better empirical evidence for software engineering
  (<xref alt="Devanbu, Zimmermann, and Bird 2016" rid="ref-devanbuBeliefEvidenceEmpirical2016-nb-article" ref-type="bibr">Devanbu,
  Zimmermann, and Bird 2016</xref>;
  <xref alt="Kitchenham, Dyba, and Jorgensen 2004" rid="ref-kitchenhamEvidencebasedSoftwareEngineering2004-nb-article" ref-type="bibr">Kitchenham,
  Dyba, and Jorgensen 2004</xref>;
  <xref alt="Sjoberg, Dyba, and Jorgensen 2007" rid="ref-sjobergFutureEmpiricalMethods2007-nb-article" ref-type="bibr">Sjoberg,
  Dyba, and Jorgensen 2007</xref>).</p>
  <p>First, measurement validity challenges in ticket data and sample
  representativeness constrain our analysis. A primary contribution of
  this paper is to present findings from the analysis of a large (more
  than 55k observations across 216 organizations) and longitudinal (a
  calendar year) dataset of software work activity data. Metrics which
  are git-based can enhance the measurement validity of our project by
  providing this large-scale observation, unfiltered by individual
  perception, in the ecologically valid context of real working teams.
  Nevertheless, measurement validity may also be threatened by the way
  that data are defined and constructed in the process leading to the
  creation of variables around tickets: for instance, we rely on a
  general assumption that teams mark tickets in a fairly accurate and
  timely manner. Our dataset lacked contextual information that could
  serve to validate team practices around ticket entry, and while we
  sought to align our assumptions with known practices around these
  ticketing tools and software workflows, it is important to note that
  differences in the timeliness and accuracy of ticket entries may be an
  important factor complicating our ability to understand cycle time.
  This context limitation also applies to our sample of organizations
  which is non-random and reflects organizations that invested in the
  software metrics tool that provided that data, and does threaten the
  generalizability of these results
  (<xref alt="Baltes and Ralph 2021" rid="ref-baltesSamplingSoftwareEngineering2021a-nb-article" ref-type="bibr">Baltes
  and Ralph 2021</xref>).</p>
  <p>Second, systematic differences in ticket assignment patterns may
  complicate cycle time interpretations. In this analysis, we have
  primarily explored cycle time as derived from a tickets-based metric.
  However, how a ticket and its associated work tasks are assigned
  inside of an organization is likely an important factor in how tickets
  are completed. Assignment of tickets, especially defect tickets, is
  complex over time and both the initial and subsequent assignments of
  tickets can be impacted by many factors. For example, after an initial
  assignment to a developer, bugs may frequently be reassigned due to
  diverse factors such as determining ownership, time constraints, and
  identifying developers who may have a particular view into the root
  cause of the bug
  (<xref alt="Guo et al. 2011" rid="ref-guoNotMyBug2011-nb-article" ref-type="bibr">Guo
  et al. 2011</xref>). Some individuals may get assigned defect tickets
  systematically more often than others, and changes in the proportion
  of work that consists of defect tickets may change how fast someone is
  able to work in general, either because defect tickets tend to be
  larger or smaller in scope than other tickets, or because of
  disruptions.</p>
  <p>Third, our simplified measurement of team structures fails to
  capture the complex collaborative reality of software development. In
  this analysis, given limitations in our dataset about contexts such as
  internal team structures within organizations, we have operationalized
  team size with a generous attribution of team membership across shared
  activity, which almost certainly represents a very rough estimate of
  team size. We have also calculated team size as averaged in a static
  measure for the entire year, rather than captured over time. Given
  that team size likely impacts how quickly work is completed, we may
  miss out on nuanced effects here; for instance, it is reasonable to
  imagine that further variables around how resources are distributed
  and allocated to teams may provide further predictive value to our
  understanding of team-level factors that change cycle time. Team
  “assignment” itself is also highly complex in technical work, as
  cross-team collaboration is typical, and collaborations across
  software projects may frequently not match explicit organizational
  hierarchies. In our previous research using self-reports from software
  teams, we have found that over 60% of individual contributors on
  software teams report working closely with other individual
  collaborators who do not share their same manager
  (<xref alt="C. Hicks, Lee, and Ramsey 2023" rid="ref-hicksDeveloperThrivingFour2023-nb-article" ref-type="bibr">C.
  Hicks, Lee, and Ramsey 2023</xref>). In short, software development is
  a collaborative exercise that is embedded in an ecosystem with history
  and many actors
  (<xref alt="C. M. Hicks and Hevesi 2024" rid="ref-hicksCumulativeCultureTheory2024-nb-article" ref-type="bibr">C.
  M. Hicks and Hevesi 2024</xref>).</p>
  <p>Fourth, invisible collaborative activities and contributor role
  ambiguity limit interpretations of cycle time variations. Developers
  communicate and collaborate in many ways that may not be captured in a
  ticket, e.g. impromptu or formal mentorship, paired or mob
  programming, and planning meetings. Where activity data are collected
  for some of these activities, it is likely that such data may be
  perceived in our data collection as “belonging” to a single
  individual, but work may often reflect joint work (e.g., in the case
  of mentorship, paired, and planning activities where one developers
  “logs” the work of many). These organizational communication
  activities and social norms may provide informative context for
  interpreting cycle time activities. For instance, organizational
  planning data may provide a useful next step in understanding how
  planning meetings do or do not cause downstream cycle time to progress
  more efficiently. Also many people that work on software may not be
  represented in this ticketing data. We also do not know for certain
  the job titles of each contributor to this dataset and use the term
  software developer broadly.</p>
</sec>
<sec id="discussion-nb-article">
  <title>6. Discussion</title>
  <sec id="take-aways-for-practitioners-and-anti-patterns-nb-article">
    <title>6.1 Take-aways for practitioners and anti-patterns</title>
    <p>In this section, we summarize parts of our more thorough
    discussion (below) in plain language that we hope will be useful for
    software practitioners, highlighting not only the evidence at hand,
    but also cautionary anti-patterns we think may be likely when using
    cycle time data at scale.</p>
    <list list-type="bullet">
      <list-item>
        <p>We observe many robust influences on cycle time but with
        small effects. This means implementing a change targeting any
        one of these factors may help a little bit, but don’t expect a
        magic bullet. We recommend that practitioners consider the
        trade-offs of implementing any particular change by
        incorporating more context about developers’ work tasks that
        goes beyond activity data, as well as designing an iterative,
        experimental approach to evaluating changes that includes
        measures that go beyond cycle time, such as incorporating
        developers’ self-report on the utility of measurement
        practices.</p>
      </list-item>
      <list-item>
        <p>Any single observation of cycle time is a very noisy
        indication of what is typical. Again, remember that each
        ticket’s time-to-close is influenced by myriad factors, most of
        which are beyond the individual contributor’s control. Ensuring
        a standard and repeatable practice around how tickets are
        created and managed across teams is likely to be a necessary
        precondition to relying on ticket data to make valid
        comparisons.</p>
      </list-item>
      <list-item>
        <p>Practitioners can use this research to feel justified in
        seeking more shared and environmental explanations for the speed
        of work while doing complex software development, rather than
        locating their explanations in individual blame, or praise.</p>
      </list-item>
      <list-item>
        <p>We can start to build up a sense of cycle times for teams and
        individuals if we are willing to observe patiently over long
        periods of time. Since we rarely observe identical task
        repetition, we need more observations to establish “typical”
        performance and identify factors that influence cycle time.
        Similar to public health research, understanding software work
        requires studying diverse contexts across industries and
        companies. This broad scope also creates opportunities for
        natural experiments. While organizations may hesitate to share
        data, these “secrets” typically diffuse naturally, and “free
        revealing<xref ref-type="fn" rid="fn4-nb-article">4</xref>” may ultimately
        prove more profitable, as described by Von Hippel and Von Krogh
        (<xref alt="2006" rid="ref-vonhippelFreeRevealingPrivatecollective2006-nb-article" ref-type="bibr">2006</xref>).</p>
      </list-item>
      <list-item>
        <p>We should understand that cycle time is still quite distant
        from the ultimate objective: efficient delivery of value in a
        context that supports those who produce that value.</p>
      </list-item>
      <list-item>
        <p>Although we did not have self-report data from individual
        contributors in the context of this analysis, it is possible
        that their perceptions and experience of doing software work
        gives them an accurate sense of what can help or hinder their
        problem solving. The measurement and attempt to change any
        particular objective indicator of software work, such as cycle
        time, should happen in conversation with these experts.</p>
      </list-item>
      <list-item>
        <p>If you collect your own data on this, be aware that sometimes
        data can be too noisy to draw any credible conclusions. That in
        itself is a signal you can use to improve how and what you
        measure. At the end of the day, software development
        problem-solving is a social, human activity, and these are
        notoriously complex.</p>
      </list-item>
    </list>
  </sec>
  <sec id="general-discussion-nb-article">
    <title>6.2 General Discussion</title>
    <p>Our analyses revealed precise directional associations between
    the factors of interest and cycle time, though the magnitude of
    these effects warrants careful consideration. These effects were
    generally in an intuitive direction for coding time, task scoping,
    and collaboration. More coding days, both on average across the year
    (between-person), and month-to-month variations from that average
    (within-person) was associated with lower cycle times. Moreover, the
    effect of average coding days on cycle-time had a larger effect
    later in the year. Having more merged PRs both on average, and
    month-to-month was also associated with lower cycle-time. Greater
    collaboration at both the between- and within-person level, and as
    measured by shared work on the same pull request (and
    operationalized as degree centrality), were associated with lower
    cycle-times as well. Two main results will require more nuance in
    their interpretation. The effect of task scoping as measured by
    defect tickets (where a lower percentage of defect tickets,
    representing unplanned work, was taken as better task scoping) was
    associated with faster cycle times at the within-person level and
    greater cycle times at the between-person level. Finally,
    collaboration as measured by comments-per-PR was associated with
    longer cycle times. These main effects, while quite precise, were
    also somewhat small, and are set against a backdrop of substantial
    unexplained between- and within-person variation. This suggests that
    while there are a number of factors that do push around cycle-time,
    each the life cycle of each ticket is a complex function that is not
    necessarily captured by the metrics we have available, some of which
    are quite commonly recommended as important inputs to cycle
    time.</p>
    <p>It is perhaps not surprising that cycle time benefits when
    individuals have more time to code, either as a deviation from their
    usual, or than other people doing similar work. When task completion
    requires writing code, more time to code will obviously decrease
    time until completion. Similarly, being able to break work into more
    discrete chunks and completing more of these chunks should also
    benefit cycle time. Keep in mind that these results both control for
    the other. That is, this is the effect of more PRs for the same
    amount of coding time, and vice versa (we discuss this benefit of
    our modeling approach more below).</p>
    <p>Perhaps not as obviously, contributing code to a PR that is being
    contributed to by others (what is captured by our degree centrality
    measure) also benefits cycle time. Contrary to the possibility that
    there are too many cooks in the kitchen, we show that on average
    cycle time is lower when people work together on a shared problem.
    Again, this is all-else-equal controlling for coding time, total
    PRs, and the other variables in our model. However, we must also
    consider that more comments per PR is associated with higher cycle
    time. This is another signal of coordination and collaboration, but
    has an opposite effect. Although speculative, we think that this
    reflects cases where a particular PR is attempting to solve a
    difficult problem, and where discussion is needed. Of course, this
    may also be a signal that communication can sometimes become
    problematic. Future work would have to examine the content of the PR
    and communication to disambiguate these possibilities as well as
    others.</p>
    <p>To finish our preliminary discussion of the main effects, we
    consider the effect of defect tickets. Individuals with a higher
    proportion of defect tickets on average over the course of the year
    tend to also have longer cycle times, while a person who suddenly
    has more defect tickets in a given month tends to have lower cycle
    times that month. We speculate that the between-person effect may be
    a result of different roles: in other words, people whose general
    workload is bug squashing may simply be given more difficult bugs to
    squash; alternatively, if less experienced programmers are generally
    given more bugs as a share of work, they may be slower at completing
    their tasks. Organizational factors may also be a culprit: if one’s
    work is, on average over the course of a year, swamped by defect
    tickets, one doesn’t have time to complete other tasks.</p>
    <p>Considering the association of lower cycle-times during months
    when a person tends to have more defect tickets, we speculate that
    this may be a result of a shift in work from larger pieces of
    generative work to fixing a lot of small errors. Again, as is the
    case with the between-person effect here, and with the effect of
    comments per PR above, these results suggest that a holistic and
    diagnostic approach to understanding cycle time changes and their
    relationship to tickets would need to include measures of the
    content of tickets (and context around ticket assignment) in a more
    granular way than was possible within the scope of this project.</p>
    <p>The substantial individual differences observed in our analysis,
    coupled with considerable residual variance after accounting for all
    measured factors, presents both methodological and practical
    implications for the assessment of software work. This heterogeneity
    in software metrics suggests that detecting the impact of specific
    interventions on cycle time may prove challenging unless the effect
    size substantially exceeds the natural variation in individual and
    team performance. The magnitude of unexplained variance serves as a
    crucial caveat for practitioners and researchers attempting to
    implement and evaluate software work interventions in software
    development contexts.</p>
    <p>The observed variability itself constitutes a meaningful signal
    that resonates with the lived experience of software development
    practitioners. Our findings suggest that there exists no universal
    formula for optimizing cycle time or enhancing software work across
    all contexts and individuals. Rather, the path toward improved
    development efficiency likely requires a nuanced approach that
    acknowledges this inherent variability while simultaneously pursuing
    refined measurement methodologies and targeted interventions.
    Success in this domain may depend on our ability to identify and
    mitigate confounding factors while developing increasingly
    sophisticated metrics that capture the complexity of software
    development processes.</p>
    <p>Indeed, the amount of variability apparent in these ticket data
    is likely the result of the complexity of each unit of work in
    software development. The process of setting a particular goal, and
    then of planning how to reach that goal by breaking the work into
    discrete tickets and tasks, is itself both conceptually and socially
    complex, and may impact cycle-time. Moreover, the preconditions set
    by previous work on a codebase determines what a software developer
    is able to do to reach a particular goal and close a ticket. The
    discussion of the process of ticket assignment in the limitations,
    above, is also relevant here. Though crucially important as inputs
    to software work, these sources of variability are not often
    measured and may be considered by some to be immeasurable.</p>
    <p>This work shows some clear signals about what might get in the
    way of closing tickets. Developers may lack enough time for coding,
    may not have enough collaborators, or may be bogged down with defect
    tickets. These are not necessarily factors individual contributors
    (ICs) have any control over. Again, the agency that any one person
    has to meaningfully alter cycle-time is likely limited. This points
    toward the need for systems-level thinking at the level of teams,
    units, organizations, and interactions between these elements over
    time, rather than models which only measure interventions on
    particular ICs in snapshots at a single point in time.</p>
    <p>What about the individual? Many practitioners reading this will
    wonder what this means for their own productivity, or that of their
    direct reports. Is cycle-time a good way to measure productivity?
    Can I just give my team an extra head-down coding day and boost
    productivity? We think that some of these signals are
    straightforward and will likely help. As is often the case, more
    research is necessary. Testing actual changes (i.e., interventions)
    with good measurement would help us figure this out. However, for
    any one person, the effect on cycle-time will likely be small and
    hard to see unless one is taking careful data over a long period of
    time. That is perhaps the strongest message this research sends to
    the practitioner: cycle-time is a very poor-resolution tool for
    taking a snapshot of software work velocity because there are so
    many inputs that go into the time it takes to close a particular
    ticket. Resolution increases with more measurements across time, and
    across people. As we refine our measures of software work velocity
    it may be possible to make inferences about individuals in shorter
    time-scales but we do not know of a measure with such properties and
    the present work very strongly shows that cycle-time, as useful as
    it is, and as much as it can tell us in the aggregate, is not such a
    measure. One practical take-away for a practitioner may in fact be
    to feel justified in seeking more shared and environmental
    explanations for the speed of work while doing complex software
    development, rather than locating their explanations in individual
    blame, or praise.</p>
    <p>The present work demonstrates numerous methodological strengths
    that also reveal ways in which inferences can be biased when data
    complexities are not accounted for. This is important to understand
    both for research like the current report but also for teams and
    organizations modeling their data internally. Primarily, the
    analyses presented here appropriately model cycle-time as
    Weibull-distributed. This is a probability distribution that has a
    lower bound at 0, and no upper bound. The distribution’s shape
    parameter characterizes the temporal dynamics of ticket closure
    probability (whether tickets become more or less likely to close as
    time passes), while the scale parameter (our focus in these
    analyses) determines the typical time window in which tickets tend
    to close. The shape of observed cycle-times, with the majority
    clustering around the low end but with a long right tail, is well
    described by this distribution. The more common Gaussian (normal)
    distribution has support on all real numbers (i.e., assumes negative
    cycle-times are plausible!), and the bulk of the distribution is
    centered symmetrically about the mean. Attempting to represent the
    influence of various factors on cycle-time data using an
    inappropriate distribution will have unintended consequences on the
    observed relationships, which may be biased, and can lead to mode
    predictions outside the range of possible values
    (<xref alt="Collett 1994" rid="ref-collettModellingSurvivalData1994-nb-article" ref-type="bibr">Collett
    1994</xref>;
    <xref alt="Lawless 2003" rid="ref-lawlessStatisticalModelsMethods2003-nb-article" ref-type="bibr">Lawless
    2003</xref>;
    <xref alt="McElreath 2020" rid="ref-mcelreathStatisticalRethinkingBayesian2020-nb-article" ref-type="bibr">McElreath
    2020</xref>;
    <xref alt="Nelson 1982" rid="ref-nelsonAppliedLifeData1982-nb-article" ref-type="bibr">Nelson
    1982</xref>).</p>
    <p>Another strength that is relevant to both researchers and
    practitioners is the inclusion, simultaneously, of multiple factors
    in the same models. Splitting the data into groups using some factor
    like coding days and taking the average cycle time for each group,
    as a basis for making inferences about differences between groups,
    is not sufficient to account for the possibility that other factors
    systematically differ between those groups. Nevertheless, this is an
    approach which we have frequently seen in the industry. Modeling
    these factors simultaneously as continuous variables allows us to
    get closer to the idea of “X has an effect on Y, all else being held
    equal.” This is necessary for starting to figure out the effect of a
    particular factor in isolation. Of course, if one has access to even
    more sophisticated observational-causal-inference methods (e.g.,
    natural experiments, or matching) or even interventional approaches,
    these would be even better. If this sounds a little bit difficult,
    it’s because, like many things in software development, it is.
    There’s no free lunch; and there are no solutions, only tradeoffs.
    If one wants easy quantitative answers, one must be willing to
    trade-off accuracy (and we almost never can say how much accuracy is
    lost until we do it the hard way too).</p>
    <p>We have emphasized in this work the small size of these observed
    associations, and the vast variability in the outcome of interest.
    This may belie the utility of what can be gained by further
    investigation into these constructs. What we cannot know from this
    work is what a change in one of our workplace factors would really
    mean for cycle time, and what that might mean for an organization.
    We also have not yet emphasized how small effects can accumulate if
    sustained. For example, the 50th and 90th percentile in year-average
    average-coding-days-per-week is about 1 day. If we look at the
    model-expected association with an increase of 1 coding day per
    week, we reduce cycle time by roughly 2 days (compared to a raw
    median of 13 days;
    <xref alt="Figure 8" rid="fig-heatmaps-nb-article">Figure 8</xref>). Across an
    entire organization, this average may mean a lot. It is also worth
    noting that in the software literature, developers have reported
    substantial social-psychological benefits from increases to focus
    time, deep work, and days spent coding that may provide real and
    meaningful impacts on the quality of software work whether or not
    they result in cycle time change
    (<xref alt="Andre N. Meyer et al. 2021" rid="ref-meyerTodayWasGood2021-nb-article" ref-type="bibr">Andre
    N. Meyer et al. 2021</xref>).</p>
  </sec>
  <sec id="future-research-directions-nb-article">
    <title>6.3 Future Research Directions</title>
    <p>Looking forward, our findings suggest two primary directions for
    future research. In the domain of observational studies, increased
    attention to a ticket’s lifecycle, and process analysis appears as a
    tractable area for new longitudinal investigations. There are a
    number of measurable properties of tickets and code contributions
    that would be useful for distinguishing between different kinds of
    work and different interactions. For example, determining the
    expected scope or difficulty of tickets would allow for important
    statistical control, ensuring we compare like with like. Different
    kinds of work may also show different pitfalls and benefits, and
    could plausibly be determined from the content of a ticket or by
    assignment by those creating the tickets (for example, not all
    tickets will have a programming solution). Understanding and
    quantifying the type of content in PR comments would be useful in
    determining the causes and consequences of this avenue for
    collaboration. Ticket scope may also be contrasted with the ultimate
    complexity of the work that closes that ticket. Because of the
    creative and complex nature of software development, understanding
    what gets it stuck and what helps it flow will almost certainly have
    to wrestle with this complexity.</p>
    <p>In the domain of intervention studies, we have argued that while
    software metrics may play a role in evaluating the impact of changes
    made to engineering organizations (or broader product and other
    cross-functional partnerships that include engineering
    organizations), determining this impact is not as simple as
    expecting a coherent, consistent and average increase in a metric
    such as cycle time to result from a change. Changes which may be
    meaningful at the scale of an organization may be relatively small
    or invisible on the individual level, and changes which are
    meaningful to individuals may not reflect an intervention that
    scales to an organization. Nevertheless, engineering (and other)
    orgs are currently seeking to become data-driven and use their own
    activity data as a point of reflection on both sides of this
    question. Increased attention to developing robust efficacy measures
    for behavioral interventions at scale, and detailing the nuances of
    how these changes show up in software activity metrics, will be
    needed to answer these questions. Detailing the potential
    methodological and statistical pitfalls of these data may also play
    a critical role in steering organizations away from misleading and
    inaccurate summaries, and toward appropriate methodologies.
    Understanding how to implement a software work intervention across
    an organization in a standardized way presents its own set of
    research questions for the future. For this, we believe that
    increased attention to developers’ own within-person growth,
    wellbeing, and work will also be necessary to provide a full
    understanding of software work.</p>
    <p>As the findings of the current work have demonstrated, moving
    toward a greater understanding of how to improve software
    development will likely require a plurality of methods,
    measurements, and thoughtful experimental practices within software
    engineering organizations, rather than silver bullet, isolated
    metrics.</p>
  </sec>
</sec>
<sec id="acknowledgements-nb-article">
  <title>7. Acknowledgements</title>
  <p>We would like to thank Kristen Foster-Marks for advice on the
  project and helpful feedback on a draft; also thanks to Bennet Cook
  for his help navigating many databases.</p>
</sec>
<sec id="contributions-nb-article">
  <title>8. Contributions</title>
  <p>Contribution roles listed are defined in NISO CRediT Working Group
  (<xref alt="2022" rid="ref-nisocreditworkinggroupANSINISOZ3910420222022-nb-article" ref-type="bibr">2022</xref>).</p>
  <code language="r script">cat(
  paste(
    lapply(rmarkdown::metadata$author, \(x){
      sprintf('%s: %s.', x$name, paste(x$roles, collapse = ', '))
    }),
  collapse = ' '
  )
)</code>
  <p>John C. Flournoy: Conceptualization, Data curation, Formal
  analysis, Investigation, Methodology, Visualization, Writing –
  original draft, Writing – review &amp; editing. Carol S. Lee:
  Conceptualization, Data curation, Formal analysis, Investigation,
  Methodology, Writing – original draft, Writing – review &amp; editing.
  Catherine M. Hicks: Conceptualization, Funding acquisition,
  Investigation, Methodology, Project administration, Resources,
  Supervision, Writing – review &amp; editing. Maggie Wu:
  Conceptualization, Data curation, Formal analysis, Investigation,
  Methodology.</p>
</sec>
</body>



<back>
<ref-list>
  <title>References</title>
  <ref id="ref-agrawalSoftwareEffortQuality2007-nb-article">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Agrawal</surname><given-names>Manish</given-names></name>
        <name><surname>Chari</surname><given-names>Kaushal</given-names></name>
      </person-group>
      <article-title>Software Effort, Quality, and Cycle Time: A Study of CMM Level 5 Projects</article-title>
      <source>IEEE Transactions on Software Engineering</source>
      <year iso-8601-date="2007-03">2007</year><month>03</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2025-02-06">2025</year><month>02</month><day>06</day></date-in-citation>
      <volume>33</volume>
      <issue>3</issue>
      <issn>1939-3520</issn>
      <pub-id pub-id-type="doi">10.1109/TSE.2007.29</pub-id>
      <fpage>145</fpage>
      <lpage>156</lpage>
    </element-citation>
  </ref>
  <ref id="ref-ahmadPandorasBoxSocial2024-nb-article">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Ahmad</surname><given-names>Muhammad Ovais</given-names></name>
        <name><surname>Gustavsson</surname><given-names>Tomas</given-names></name>
      </person-group>
      <article-title>The Pandora’s box of social, process, and people debts in software engineering</article-title>
      <source>Journal of Software: Evolution and Process</source>
      <year iso-8601-date="2024">2024</year>
      <date-in-citation content-type="access-date"><year iso-8601-date="2025-02-14">2025</year><month>02</month><day>14</day></date-in-citation>
      <volume>36</volume>
      <issue>2</issue>
      <issn>2047-7481</issn>
      <pub-id pub-id-type="doi">10.1002/smr.2516</pub-id>
      <fpage>e2516</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-arel-bundockMarginaleffectsPredictionsComparisons2024-nb-article">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Arel-Bundock</surname><given-names>Vincent</given-names></name>
      </person-group>
      <source>Marginaleffects: Predictions, comparisons, slopes, marginal means, and hypothesis tests</source>
      <year iso-8601-date="2024">2024</year>
    </element-citation>
  </ref>
  <ref id="ref-ballWorkplaceSurveillanceOverview2010-nb-article">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Ball</surname><given-names>Kirstie</given-names></name>
      </person-group>
      <article-title>Workplace surveillance: An overview</article-title>
      <source>Labor History</source>
      <publisher-name>Routledge</publisher-name>
      <year iso-8601-date="2010-02">2010</year><month>02</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2025-02-06">2025</year><month>02</month><day>06</day></date-in-citation>
      <volume>51</volume>
      <issue>1</issue>
      <issn>0023-656X</issn>
      <pub-id pub-id-type="doi">10.1080/00236561003654776</pub-id>
      <fpage>87</fpage>
      <lpage>106</lpage>
    </element-citation>
  </ref>
  <ref id="ref-baltesSamplingSoftwareEngineering2021a-nb-article">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Baltes</surname><given-names>Sebastian</given-names></name>
        <name><surname>Ralph</surname><given-names>Paul</given-names></name>
      </person-group>
      <article-title>Sampling in Software Engineering Research: A Critical Review and Guidelines</article-title>
      <publisher-name>arXiv</publisher-name>
      <year iso-8601-date="2021-10">2021</year><month>10</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2025-02-28">2025</year><month>02</month><day>28</day></date-in-citation>
      <uri>https://arxiv.org/abs/2002.07764</uri>
      <pub-id pub-id-type="doi">10.48550/arXiv.2002.07764</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-barrettDatatableExtensionDataframe2024-nb-article">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Barrett</surname><given-names>Tyson</given-names></name>
        <name><surname>Dowle</surname><given-names>Matt</given-names></name>
        <name><surname>Srinivasan</surname><given-names>Arun</given-names></name>
        <name><surname>Gorecki</surname><given-names>Jan</given-names></name>
        <name><surname>Chirico</surname><given-names>Michael</given-names></name>
        <name><surname>Hocking</surname><given-names>Toby</given-names></name>
      </person-group>
      <source>Data.table: Extension of ‘data.frame‘</source>
      <year iso-8601-date="2024">2024</year>
    </element-citation>
  </ref>
  <ref id="ref-beskerTechnicalDebtCripples2018-nb-article">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Besker</surname><given-names>Terese</given-names></name>
        <name><surname>Martini</surname><given-names>Antonio</given-names></name>
        <name><surname>Bosch</surname><given-names>Jan</given-names></name>
      </person-group>
      <article-title>Technical debt cripples software developer productivity: A longitudinal study on developers’ daily software development work</article-title>
      <source>Proceedings of the 2018 International Conference on Technical Debt</source>
      <publisher-name>ACM</publisher-name>
      <publisher-loc>Gothenburg Sweden</publisher-loc>
      <year iso-8601-date="2018-05">2018</year><month>05</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2024-10-02">2024</year><month>10</month><day>02</day></date-in-citation>
      <isbn>978-1-4503-5713-5</isbn>
      <pub-id pub-id-type="doi">10.1145/3194164.3194178</pub-id>
      <fpage>105</fpage>
      <lpage>114</lpage>
    </element-citation>
  </ref>
  <ref id="ref-blackburnImprovingSpeedProductivity1996-nb-article">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Blackburn</surname><given-names>J. D.</given-names></name>
        <name><surname>Scudder</surname><given-names>G. D.</given-names></name>
        <name><surname>Van Wassenhove</surname><given-names>L. N.</given-names></name>
      </person-group>
      <article-title>Improving speed and productivity of software development: A global survey of software developers</article-title>
      <source>IEEE Transactions on Software Engineering</source>
      <year iso-8601-date="1996-12">1996</year><month>12</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2025-02-05">2025</year><month>02</month><day>05</day></date-in-citation>
      <volume>22</volume>
      <issue>12</issue>
      <issn>1939-3520</issn>
      <pub-id pub-id-type="doi">10.1109/32.553636</pub-id>
      <fpage>875</fpage>
      <lpage>885</lpage>
    </element-citation>
  </ref>
  <ref id="ref-bouwersSoftwareMetricsPitfalls2013-nb-article">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Bouwers</surname><given-names>Eric</given-names></name>
        <name><surname>van Deursen</surname><given-names>Arie</given-names></name>
        <name><surname>Visser</surname><given-names>Joost</given-names></name>
      </person-group>
      <article-title>Software metrics: Pitfalls and best practices</article-title>
      <source>2013 35th International Conference on Software Engineering (ICSE)</source>
      <year iso-8601-date="2013-05">2013</year><month>05</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2025-02-14">2025</year><month>02</month><day>14</day></date-in-citation>
      <issn>1558-1225</issn>
      <pub-id pub-id-type="doi">10.1109/ICSE.2013.6606755</pub-id>
      <fpage>1491</fpage>
      <lpage>1492</lpage>
    </element-citation>
  </ref>
  <ref id="ref-brocknerInteractiveEffectsProcedural1994-nb-article">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Brockner</surname><given-names>Joel</given-names></name>
        <name><surname>Konovsky</surname><given-names>Mary</given-names></name>
        <name><surname>Cooper-Schneider</surname><given-names>Rochelle</given-names></name>
        <name><surname>Folger</surname><given-names>Robert</given-names></name>
        <name><surname>Martin</surname><given-names>Christopher</given-names></name>
        <name><surname>Bies</surname><given-names>Robert J.</given-names></name>
      </person-group>
      <article-title>Interactive Effects of Procedural Justice and Outcome Negativity on Victims and Survivors of Job Loss</article-title>
      <source>Academy of Management Journal</source>
      <publisher-name>Academy of Management</publisher-name>
      <year iso-8601-date="1994-04">1994</year><month>04</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2025-02-14">2025</year><month>02</month><day>14</day></date-in-citation>
      <volume>37</volume>
      <issue>2</issue>
      <issn>0001-4273</issn>
      <pub-id pub-id-type="doi">10.5465/256835</pub-id>
      <fpage>397</fpage>
      <lpage>409</lpage>
    </element-citation>
  </ref>
  <ref id="ref-brocknerProceduralFairnessOutcome2007-nb-article">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Brockner</surname><given-names>Joel</given-names></name>
        <name><surname>Fishman</surname><given-names>Ariel Y.</given-names></name>
        <name><surname>Reb</surname><given-names>Jochen</given-names></name>
        <name><surname>Goldman</surname><given-names>Barry</given-names></name>
        <name><surname>Spiegel</surname><given-names>Scott</given-names></name>
        <name><surname>Garden</surname><given-names>Charlee</given-names></name>
      </person-group>
      <article-title>Procedural fairness, outcome favorability, and judgments of an authority’s responsibility</article-title>
      <source>Journal of Applied Psychology</source>
      <publisher-name>American Psychological Association</publisher-name>
      <publisher-loc>US</publisher-loc>
      <year iso-8601-date="2007">2007</year>
      <volume>92</volume>
      <issue>6</issue>
      <issn>1939-1854</issn>
      <pub-id pub-id-type="doi">10.1037/0021-9010.92.6.1657</pub-id>
      <fpage>1657</fpage>
      <lpage>1671</lpage>
    </element-citation>
  </ref>
  <ref id="ref-brooksMythicalManmonthEssays1975-nb-article">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Brooks</surname><given-names>Frederick P.</given-names></name>
      </person-group>
      <source>The mythical man-month: Essays on software engineering</source>
      <publisher-name>Addison-Wesley Pub. Co.</publisher-name>
      <publisher-loc>Reading, Mass.</publisher-loc>
      <year iso-8601-date="1975">1975</year>
      <isbn>978-0-201-00650-6</isbn>
    </element-citation>
  </ref>
  <ref id="ref-bruneauxWhatMcKinseyHas2024-nb-article">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Bruneaux</surname><given-names>Taylor</given-names></name>
      </person-group>
      <article-title>What McKinsey has to say about developer productivity</article-title>
      <publisher-name>https://getdx.com/blog/mckinsey-developer-productivity/</publisher-name>
      <year iso-8601-date="2024-05">2024</year><month>05</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2025-02-06">2025</year><month>02</month><day>06</day></date-in-citation>
    </element-citation>
  </ref>
  <ref id="ref-burknerAdvancedBayesianMultilevel2018-nb-article">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Bürkner</surname><given-names>Paul-Christian</given-names></name>
      </person-group>
      <article-title>Advanced Bayesian multilevel modeling with the R package brms</article-title>
      <source>The R Journal</source>
      <year iso-8601-date="2018">2018</year>
      <volume>10</volume>
      <issue>1</issue>
      <pub-id pub-id-type="doi">10.32614/RJ-2018-017</pub-id>
      <fpage>395</fpage>
      <lpage>411</lpage>
    </element-citation>
  </ref>
  <ref id="ref-burknerBayesianItemResponse2021-nb-article">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Bürkner</surname><given-names>Paul-Christian</given-names></name>
      </person-group>
      <article-title>Bayesian Item Response Modeling in R with brms and Stan</article-title>
      <source>Journal of Statistical Software</source>
      <year iso-8601-date="2021-11">2021</year><month>11</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2025-02-11">2025</year><month>02</month><day>11</day></date-in-citation>
      <volume>100</volume>
      <issn>1548-7660</issn>
      <pub-id pub-id-type="doi">10.18637/jss.v100.i05</pub-id>
      <fpage>1</fpage>
      <lpage>54</lpage>
    </element-citation>
  </ref>
  <ref id="ref-burknerBrmsPackageBayesian2017-nb-article">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Bürkner</surname><given-names>Paul-Christian</given-names></name>
      </person-group>
      <article-title>Brms: An R Package for Bayesian Multilevel Models Using Stan</article-title>
      <source>Journal of Statistical Software</source>
      <year iso-8601-date="2017-08">2017</year><month>08</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2021-03-26">2021</year><month>03</month><day>26</day></date-in-citation>
      <volume>80</volume>
      <issue>1</issue>
      <issn>1548-7660</issn>
      <pub-id pub-id-type="doi">10.18637/jss.v080.i01</pub-id>
      <fpage>1</fpage>
      <lpage>28</lpage>
    </element-citation>
  </ref>
  <ref id="ref-burknerPosteriorToolsWorking2023-nb-article">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Bürkner</surname><given-names>Paul-Christian</given-names></name>
        <name><surname>Gabry</surname><given-names>Jonah</given-names></name>
        <name><surname>Kay</surname><given-names>Matthew</given-names></name>
        <name><surname>Vehtari</surname><given-names>Aki</given-names></name>
      </person-group>
      <article-title>Posterior: Tools for working with posterior distributions</article-title>
      <year iso-8601-date="2023">2023</year>
    </element-citation>
  </ref>
  <ref id="ref-caesensPerceivedOrganizationalSupport2017-nb-article">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Caesens</surname><given-names>Gaëtane</given-names></name>
        <name><surname>Stinglhamber</surname><given-names>Florence</given-names></name>
        <name><surname>Demoulin</surname><given-names>Stéphanie</given-names></name>
        <name><surname>De Wilde</surname><given-names>Matthias</given-names></name>
      </person-group>
      <article-title>Perceived organizational support and employees’ well-being: The mediating role of organizational dehumanization</article-title>
      <source>European Journal of Work and Organizational Psychology</source>
      <publisher-name>Routledge</publisher-name>
      <year iso-8601-date="2017-07">2017</year><month>07</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2025-02-14">2025</year><month>02</month><day>14</day></date-in-citation>
      <volume>26</volume>
      <issue>4</issue>
      <issn>1359-432X</issn>
      <pub-id pub-id-type="doi">10.1080/1359432X.2017.1319817</pub-id>
      <fpage>527</fpage>
      <lpage>540</lpage>
    </element-citation>
  </ref>
  <ref id="ref-careyWhy70Engineers2024-nb-article">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Carey</surname><given-names>Scott</given-names></name>
      </person-group>
      <article-title>Why 70% of engineers avoid measuring lines of code</article-title>
      <source>LeadDev</source>
      <publisher-name>https://leaddev.com/reporting/why-70-of-engineers-avoid-measuring-lines-of-code</publisher-name>
      <year iso-8601-date="2024-12">2024</year><month>12</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2024-12-05">2024</year><month>12</month><day>05</day></date-in-citation>
    </element-citation>
  </ref>
  <ref id="ref-carmelCycleTimePackaged1995-nb-article">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Carmel</surname><given-names>Erran</given-names></name>
      </person-group>
      <article-title>Cycle Time in Packaged Software Firms</article-title>
      <source>Journal of Product Innovation Management</source>
      <year iso-8601-date="1995">1995</year>
      <date-in-citation content-type="access-date"><year iso-8601-date="2025-02-06">2025</year><month>02</month><day>06</day></date-in-citation>
      <volume>12</volume>
      <issue>2</issue>
      <issn>1540-5885</issn>
      <pub-id pub-id-type="doi">10.1111/j.1540-5885.1995.jpim122_0110.xml.x</pub-id>
      <fpage>110</fpage>
      <lpage>123</lpage>
    </element-citation>
  </ref>
  <ref id="ref-chhunejaWhy50Developers2024-nb-article">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Chhuneja</surname><given-names>Shivam</given-names></name>
      </person-group>
      <article-title>Why 50% Developers Hate DORA Metrics?</article-title>
      <publisher-name>https://middlewarehq.com/blog/why-50-developers-hate-dora-metrics</publisher-name>
      <year iso-8601-date="2024-04">2024</year><month>04</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2025-02-06">2025</year><month>02</month><day>06</day></date-in-citation>
    </element-citation>
  </ref>
  <ref id="ref-clincySoftwareDevelopmentProductivity2003-nb-article">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Clincy</surname><given-names>Victor</given-names></name>
      </person-group>
      <article-title>Software Development Productivity and Cycle Time Reduction</article-title>
      <source>Journal of Computing Sciences in Colleges</source>
      <year iso-8601-date="2003-12">2003</year><month>12</month>
      <volume>19</volume>
      <issue>2</issue>
      <fpage>278</fpage>
      <lpage>287</lpage>
    </element-citation>
  </ref>
  <ref id="ref-collettModellingSurvivalData1994-nb-article">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Collett</surname><given-names>D.</given-names></name>
      </person-group>
      <source>Modelling survival data in medical research</source>
      <publisher-name>Chapman &amp; Hall</publisher-name>
      <publisher-loc>London ; New York</publisher-loc>
      <year iso-8601-date="1994">1994</year>
      <edition>1st ed.</edition>
      <isbn>978-0-412-44880-5</isbn>
    </element-citation>
  </ref>
  <ref id="ref-coteOnlyPeopleWho2023-nb-article">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Coté</surname></name>
      </person-group>
      <article-title>The only people who don’t like metrics are the people being measured, or, developer productivity metrics quicksand</article-title>
      <publisher-name>https://newsletter.cote.io/p/the-only-people-who-dont-like-metrics</publisher-name>
      <year iso-8601-date="2023-02">2023</year><month>02</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2025-02-06">2025</year><month>02</month><day>06</day></date-in-citation>
    </element-citation>
  </ref>
  <ref id="ref-curranDisaggregationPersonPerson2011-nb-article">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Curran</surname><given-names>Patrick J.</given-names></name>
        <name><surname>Bauer</surname><given-names>Daniel J.</given-names></name>
      </person-group>
      <article-title>The Disaggregation of Within-Person and Between-Person Effects in Longitudinal Models of Change</article-title>
      <source>Annual Review of Psychology</source>
      <year iso-8601-date="2011-01">2011</year><month>01</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2018-10-25">2018</year><month>10</month><day>25</day></date-in-citation>
      <volume>62</volume>
      <issue>1</issue>
      <issn>0066-4308, 1545-2085</issn>
      <pub-id pub-id-type="doi">10.1146/annurev.psych.093008.100356</pub-id>
      <fpage>583</fpage>
      <lpage>619</lpage>
    </element-citation>
  </ref>
  <ref id="ref-denisov-blanchPredictingExpertEvaluations2024-nb-article">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Denisov-Blanch</surname><given-names>Yegor</given-names></name>
        <name><surname>Ciobanu</surname><given-names>Igor</given-names></name>
        <name><surname>Obstbaum</surname><given-names>Simon</given-names></name>
        <name><surname>Kosinski</surname><given-names>Michal</given-names></name>
      </person-group>
      <article-title>Predicting Expert Evaluations in Software Code Reviews</article-title>
      <publisher-name>arXiv</publisher-name>
      <year iso-8601-date="2024-09">2024</year><month>09</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2024-12-17">2024</year><month>12</month><day>17</day></date-in-citation>
      <uri>https://arxiv.org/abs/2409.15152</uri>
      <pub-id pub-id-type="doi">10.48550/arXiv.2409.15152</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-devanbuBeliefEvidenceEmpirical2016-nb-article">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Devanbu</surname><given-names>Prem</given-names></name>
        <name><surname>Zimmermann</surname><given-names>Thomas</given-names></name>
        <name><surname>Bird</surname><given-names>Christian</given-names></name>
      </person-group>
      <article-title>Belief &amp; evidence in empirical software engineering</article-title>
      <source>Proceedings of the 38th International Conference on Software Engineering</source>
      <publisher-name>Association for Computing Machinery</publisher-name>
      <publisher-loc>New York, NY, USA</publisher-loc>
      <year iso-8601-date="2016-05">2016</year><month>05</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2025-02-27">2025</year><month>02</month><day>27</day></date-in-citation>
      <isbn>978-1-4503-3900-1</isbn>
      <pub-id pub-id-type="doi">10.1145/2884781.2884812</pub-id>
      <fpage>108</fpage>
      <lpage>119</lpage>
    </element-citation>
  </ref>
  <ref id="ref-eversImprovingEngineeringProductivity1998-nb-article">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Evers</surname><given-names>J. H.</given-names></name>
        <name><surname>Oehler</surname><given-names>G. M.</given-names></name>
        <name><surname>Tucker</surname><given-names>M. G.</given-names></name>
      </person-group>
      <article-title>Improving engineering productivity: A time study of an engineer’s typical work day</article-title>
      <source>IEMC ’98 Proceedings. International Conference on Engineering and Technology Management. Pioneering New Technologies: Management Issues and Challenges in the Third Millennium (Cat. No.98CH36266)</source>
      <year iso-8601-date="1998-10">1998</year><month>10</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2025-02-07">2025</year><month>02</month><day>07</day></date-in-citation>
      <pub-id pub-id-type="doi">10.1109/IEMC.1998.727789</pub-id>
      <fpage>377</fpage>
      <lpage>383</lpage>
    </element-citation>
  </ref>
  <ref id="ref-finster5MinuteDevOps2023-nb-article">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Finster</surname><given-names>Bryan</given-names></name>
      </person-group>
      <article-title>5 Minute DevOps: McKinsey Gets Developer Productivity Wrong</article-title>
      <source>Medium</source>
      <year iso-8601-date="2023-09">2023</year><month>09</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2025-02-06">2025</year><month>02</month><day>06</day></date-in-citation>
    </element-citation>
  </ref>
  <ref id="ref-flowHowIncreaseSoftware-nb-article">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Flow</surname></name>
      </person-group>
      <article-title>How to increase software delivery speeds by reducing cycle time</article-title>
    </element-citation>
  </ref>
  <ref id="ref-fraserNoSilverBullet2007-nb-article">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Fraser</surname><given-names>Steven D.</given-names></name>
        <name><surname>Brooks</surname><given-names>Frederick P.</given-names></name>
        <name><surname>Fowler</surname><given-names>Martin</given-names></name>
        <name><surname>Lopez</surname><given-names>Ricardo</given-names></name>
        <name><surname>Namioka</surname><given-names>Aki</given-names></name>
        <name><surname>Northrop</surname><given-names>Linda</given-names></name>
        <name><surname>Parnas</surname><given-names>David Lorge</given-names></name>
        <name><surname>Thomas</surname><given-names>David</given-names></name>
      </person-group>
      <article-title>&quot;No silver bullet&quot; reloaded: Retrospective on &quot;essence and accidents of software engineering&quot;</article-title>
      <source>Companion to the 22nd ACM SIGPLAN conference on Object-oriented programming systems and applications companion</source>
      <publisher-name>Association for Computing Machinery</publisher-name>
      <publisher-loc>New York, NY, USA</publisher-loc>
      <year iso-8601-date="2007-10">2007</year><month>10</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2025-02-14">2025</year><month>02</month><day>14</day></date-in-citation>
      <isbn>978-1-59593-865-7</isbn>
      <pub-id pub-id-type="doi">10.1145/1297846.1297973</pub-id>
      <fpage>1026</fpage>
      <lpage>1030</lpage>
    </element-citation>
  </ref>
  <ref id="ref-gabryCmdstanrInterfaceCmdStan2024-nb-article">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Gabry</surname><given-names>Jonah</given-names></name>
        <name><surname>Češnovar</surname><given-names>Rok</given-names></name>
        <name><surname>Johnson</surname><given-names>Andrew</given-names></name>
        <name><surname>Bronder</surname><given-names>Steve</given-names></name>
      </person-group>
      <source>Cmdstanr: R Interface to ’CmdStan’</source>
      <year iso-8601-date="2024">2024</year>
    </element-citation>
  </ref>
  <ref id="ref-gelman-nb-article">
    <element-citation publication-type="report">
      <person-group person-group-type="author">
        <string-name>Stan Development Team</string-name>
      </person-group>
      <article-title>Stan Modeling Language Users Guide and Reference Manual, 2.35</article-title>
      <year iso-8601-date="2024">2024</year>
    </element-citation>
  </ref>
  <ref id="ref-GelmanPowerCalculationsAssessing2014-nb-article">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Gelman</surname><given-names>Andrew</given-names></name>
        <name><surname>Carlin</surname><given-names>John</given-names></name>
      </person-group>
      <article-title>Beyond Power Calculations Assessing Type S (Sign) and Type M (Magnitude) Errors</article-title>
      <source>Perspectives on Psychological Science</source>
      <year iso-8601-date="2014-11">2014</year><month>11</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2015-01-15">2015</year><month>01</month><day>15</day></date-in-citation>
      <volume>9</volume>
      <issue>6</issue>
      <issn>1745-6916, 1745-6924</issn>
      <pub-id pub-id-type="doi">10.1177/1745691614551642</pub-id>
      <fpage>641</fpage>
      <lpage>651</lpage>
    </element-citation>
  </ref>
  <ref id="ref-gohelFlextableFunctionsTabular2024-nb-article">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Gohel</surname><given-names>David</given-names></name>
        <name><surname>Skintzos</surname><given-names>Panagiotis</given-names></name>
      </person-group>
      <source>Flextable: Functions for tabular reporting</source>
      <year iso-8601-date="2024">2024</year>
    </element-citation>
  </ref>
  <ref id="ref-gralhaReduceCycleTime2022-nb-article">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Gralha</surname><given-names>Catarina</given-names></name>
      </person-group>
      <article-title>Reduce cycle time - best practices</article-title>
      <year iso-8601-date="2022-08">2022</year><month>08</month>
    </element-citation>
  </ref>
  <ref id="ref-griffinMetricsMeasuringProduct1993-nb-article">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Griffin</surname><given-names>Abbie</given-names></name>
      </person-group>
      <article-title>Metrics for Measuring Product Development Cycle Time</article-title>
      <source>Journal of Product Innovation Management</source>
      <year iso-8601-date="1993">1993</year>
      <date-in-citation content-type="access-date"><year iso-8601-date="2025-02-14">2025</year><month>02</month><day>14</day></date-in-citation>
      <volume>10</volume>
      <issue>2</issue>
      <issn>1540-5885</issn>
      <pub-id pub-id-type="doi">10.1111/1540-5885.1020112</pub-id>
      <fpage>112</fpage>
      <lpage>125</lpage>
    </element-citation>
  </ref>
  <ref id="ref-grisoldDigitalSurveillanceOrganizations2024-nb-article">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Grisold</surname><given-names>Thomas</given-names></name>
        <name><surname>Seidel</surname><given-names>Stefan</given-names></name>
        <name><surname>Heck</surname><given-names>Markus</given-names></name>
        <name><surname>Berente</surname><given-names>Nicholas</given-names></name>
      </person-group>
      <article-title>Digital Surveillance in Organizations</article-title>
      <source>Business &amp; Information Systems Engineering</source>
      <year iso-8601-date="2024-06">2024</year><month>06</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2025-02-06">2025</year><month>02</month><day>06</day></date-in-citation>
      <volume>66</volume>
      <issue>3</issue>
      <issn>1867-0202</issn>
      <pub-id pub-id-type="doi">10.1007/s12599-024-00866-7</pub-id>
      <fpage>401</fpage>
      <lpage>410</lpage>
    </element-citation>
  </ref>
  <ref id="ref-guoNotMyBug2011-nb-article">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Guo</surname><given-names>Philip J.</given-names></name>
        <name><surname>Zimmermann</surname><given-names>Thomas</given-names></name>
        <name><surname>Nagappan</surname><given-names>Nachiappan</given-names></name>
        <name><surname>Murphy</surname><given-names>Brendan</given-names></name>
      </person-group>
      <article-title>&quot;Not my bug!&quot; and other reasons for software bug report reassignments</article-title>
      <source>Proceedings of the ACM 2011 conference on Computer supported cooperative work</source>
      <publisher-name>ACM</publisher-name>
      <publisher-loc>Hangzhou China</publisher-loc>
      <year iso-8601-date="2011-03">2011</year><month>03</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2024-10-02">2024</year><month>10</month><day>02</day></date-in-citation>
      <isbn>978-1-4503-0556-3</isbn>
      <pub-id pub-id-type="doi">10.1145/1958824.1958887</pub-id>
      <fpage>395</fpage>
      <lpage>404</lpage>
    </element-citation>
  </ref>
  <ref id="ref-guptaKeyDriversReduced1998-nb-article">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Gupta</surname><given-names>Ashok K.</given-names></name>
        <name><surname>Souder</surname><given-names>William E.</given-names></name>
      </person-group>
      <article-title>Key Drivers of Reduced Cycle Time</article-title>
      <source>Research-Technology Management</source>
      <publisher-name>Routledge</publisher-name>
      <year iso-8601-date="1998-07">1998</year><month>07</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2025-02-06">2025</year><month>02</month><day>06</day></date-in-citation>
      <volume>41</volume>
      <issue>4</issue>
      <issn>0895-6308</issn>
      <pub-id pub-id-type="doi">10.1080/08956308.1998.11671221</pub-id>
      <fpage>38</fpage>
      <lpage>43</lpage>
    </element-citation>
  </ref>
  <ref id="ref-harrellRegressionModelingStrategies2015-nb-article">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Harrell</surname><given-names>Frank E.</given-names></name>
      </person-group>
      <source>Regression Modeling Strategies: With Applications to Linear Models, Logistic and Ordinal Regression, and Survival Analysis</source>
      <publisher-name>Springer International Publishing</publisher-name>
      <publisher-loc>Cham</publisher-loc>
      <year iso-8601-date="2015">2015</year>
      <date-in-citation content-type="access-date"><year iso-8601-date="2024-10-08">2024</year><month>10</month><day>08</day></date-in-citation>
      <isbn>978-3-319-19424-0 978-3-319-19425-7</isbn>
      <pub-id pub-id-type="doi">10.1007/978-3-319-19425-7</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-henryRlangFunctionsBase2024-nb-article">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Henry</surname><given-names>Lionel</given-names></name>
        <name><surname>Wickham</surname><given-names>Hadley</given-names></name>
      </person-group>
      <source>Rlang: Functions for base types and core R and ’tidyverse’ features</source>
      <year iso-8601-date="2024">2024</year>
    </element-citation>
  </ref>
  <ref id="ref-hicksCumulativeCultureTheory2024-nb-article">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Hicks</surname><given-names>Catherine M.</given-names></name>
        <name><surname>Hevesi</surname><given-names>Ana</given-names></name>
      </person-group>
      <article-title>A Cumulative Culture Theory for Developer Problem-Solving</article-title>
      <publisher-name>PsyArXiv</publisher-name>
      <year iso-8601-date="2024-11">2024</year><month>11</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2025-02-05">2025</year><month>02</month><day>05</day></date-in-citation>
      <pub-id pub-id-type="doi">10.31234/osf.io/tfjyw</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-hicksDeveloperThrivingFour2023-nb-article">
    <element-citation publication-type="report">
      <person-group person-group-type="author">
        <name><surname>Hicks</surname><given-names>Catherine</given-names></name>
        <name><surname>Lee</surname><given-names>Carol S.</given-names></name>
        <name><surname>Ramsey</surname><given-names>Morgan</given-names></name>
      </person-group>
      <article-title>Developer Thriving: The four factors that drive Software Developer Productivity across Industries</article-title>
      <publisher-name>Developer Success Lab at Pluralsight</publisher-name>
      <year iso-8601-date="2023-03">2023</year><month>03</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2025-01-08">2025</year><month>01</month><day>08</day></date-in-citation>
    </element-citation>
  </ref>
  <ref id="ref-hicksDeveloperThrivingFour2024-nb-article">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Hicks</surname><given-names>Catherine M.</given-names></name>
        <name><surname>Lee</surname><given-names>Carol S.</given-names></name>
        <name><surname>Ramsey</surname><given-names>Morgan</given-names></name>
      </person-group>
      <article-title>Developer Thriving: Four Sociocognitive Factors That Create Resilient Productivity on Software Teams</article-title>
      <source>IEEE Software</source>
      <year iso-8601-date="2024-07">2024</year><month>07</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2025-01-08">2025</year><month>01</month><day>08</day></date-in-citation>
      <volume>41</volume>
      <issue>4</issue>
      <issn>1937-4194</issn>
      <pub-id pub-id-type="doi">10.1109/MS.2024.3382957</pub-id>
      <fpage>68</fpage>
      <lpage>77</lpage>
    </element-citation>
  </ref>
  <ref id="ref-hicksNewDeveloperAI2024-nb-article">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Hicks</surname><given-names>Catherine M.</given-names></name>
        <name><surname>Lee</surname><given-names>Carol</given-names></name>
        <name><surname>Foster-Marks</surname><given-names>Kristen</given-names></name>
      </person-group>
      <article-title>The New Developer: AI Skill Threat, Identity Change &amp; Developer Thriving in the Transition to AI-Assisted Software Development</article-title>
      <publisher-name>OSF</publisher-name>
      <year iso-8601-date="2024-04">2024</year><month>04</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2024-10-02">2024</year><month>10</month><day>02</day></date-in-citation>
      <pub-id pub-id-type="doi">10.31234/osf.io/2gej5</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-hicksPsychologicalAffordancesCan2024-nb-article">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Hicks</surname><given-names>Catherine M.</given-names></name>
      </person-group>
      <article-title>Psychological Affordances Can Provide a Missing Explanatory Layer for Why Interventions to Improve Developer Experience Take Hold or Fail</article-title>
      <publisher-name>OSF</publisher-name>
      <year iso-8601-date="2024-01">2024</year><month>01</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2025-02-15">2025</year><month>02</month><day>15</day></date-in-citation>
      <pub-id pub-id-type="doi">10.31234/osf.io/qz43x</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-kayTidybayesTidyData2023-nb-article">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Kay</surname><given-names>Matthew</given-names></name>
      </person-group>
      <source>tidybayes: Tidy data and geoms for Bayesian models</source>
      <year iso-8601-date="2023">2023</year>
      <pub-id pub-id-type="doi">10.5281/zenodo.1308151</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-kitchenhamEvidencebasedSoftwareEngineering2004-nb-article">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Kitchenham</surname><given-names>B. A.</given-names></name>
        <name><surname>Dyba</surname><given-names>T.</given-names></name>
        <name><surname>Jorgensen</surname><given-names>M.</given-names></name>
      </person-group>
      <article-title>Evidence-based software engineering</article-title>
      <source>Proceedings. 26th International Conference on Software Engineering</source>
      <year iso-8601-date="2004-05">2004</year><month>05</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2025-02-28">2025</year><month>02</month><day>28</day></date-in-citation>
      <issn>0270-5257</issn>
      <pub-id pub-id-type="doi">10.1109/ICSE.2004.1317449</pub-id>
      <fpage>273</fpage>
      <lpage>281</lpage>
    </element-citation>
  </ref>
  <ref id="ref-kruschkeRejectingAcceptingParameter2018-nb-article">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Kruschke</surname><given-names>John K.</given-names></name>
      </person-group>
      <article-title>Rejecting or Accepting Parameter Values in Bayesian Estimation</article-title>
      <source>Advances in Methods and Practices in Psychological Science</source>
      <publisher-name>SAGE Publications Inc</publisher-name>
      <year iso-8601-date="2018-06">2018</year><month>06</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2025-02-26">2025</year><month>02</month><day>26</day></date-in-citation>
      <volume>1</volume>
      <issue>2</issue>
      <issn>2515-2459</issn>
      <pub-id pub-id-type="doi">10.1177/2515245918771304</pub-id>
      <fpage>270</fpage>
      <lpage>280</lpage>
    </element-citation>
  </ref>
  <ref id="ref-kudrjavetsSmallCodeChanges2022-nb-article">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Kudrjavets</surname><given-names>Gunnar</given-names></name>
        <name><surname>Nagappan</surname><given-names>Nachiappan</given-names></name>
        <name><surname>Rastogi</surname><given-names>Ayushi</given-names></name>
      </person-group>
      <article-title>Do small code changes merge faster?: A multi-language empirical investigation</article-title>
      <source>Proceedings of the 19th International Conference on Mining Software Repositories</source>
      <publisher-name>ACM</publisher-name>
      <publisher-loc>Pittsburgh Pennsylvania</publisher-loc>
      <year iso-8601-date="2022-05">2022</year><month>05</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2025-02-11">2025</year><month>02</month><day>11</day></date-in-citation>
      <isbn>978-1-4503-9303-4</isbn>
      <pub-id pub-id-type="doi">10.1145/3524842.3528448</pub-id>
      <fpage>537</fpage>
      <lpage>548</lpage>
    </element-citation>
  </ref>
  <ref id="ref-lagiosExplainingNegativeConsequences2022-nb-article">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Lagios</surname><given-names>Constantin</given-names></name>
        <name><surname>Caesens</surname><given-names>Gaëtane</given-names></name>
        <name><surname>Nguyen</surname><given-names>Nathan</given-names></name>
        <name><surname>Stinglhamber</surname><given-names>Florence</given-names></name>
      </person-group>
      <article-title>Explaining the Negative Consequences of Organizational Dehumanization</article-title>
      <source>Journal of Personnel Psychology</source>
      <publisher-name>Hogrefe Publishing</publisher-name>
      <year iso-8601-date="2022-04">2022</year><month>04</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2025-02-14">2025</year><month>02</month><day>14</day></date-in-citation>
      <volume>21</volume>
      <issue>2</issue>
      <issn>1866-5888</issn>
      <pub-id pub-id-type="doi">10.1027/1866-5888/a000286</pub-id>
      <fpage>86</fpage>
      <lpage>93</lpage>
    </element-citation>
  </ref>
  <ref id="ref-lawlessStatisticalModelsMethods2003-nb-article">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Lawless</surname><given-names>Jerald F.</given-names></name>
      </person-group>
      <source>Statistical models and methods for lifetime data</source>
      <publisher-name>Wiley-Interscience</publisher-name>
      <publisher-loc>Hoboken, N.J.</publisher-loc>
      <year iso-8601-date="2003">2003</year>
      <edition>2nd ed.</edition>
      <isbn>978-0-471-37215-8</isbn>
    </element-citation>
  </ref>
  <ref id="ref-linesWhyEliteDev2023-nb-article">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Lines</surname><given-names>Dan</given-names></name>
      </person-group>
      <article-title>Why elite dev teams focus on pull-request metrics</article-title>
      <source>LeadDev</source>
      <publisher-name>https://leaddev.com/reporting/why-elite-dev-teams-focus-pull-request-metrics</publisher-name>
      <year iso-8601-date="2023-05">2023</year><month>05</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2025-02-07">2025</year><month>02</month><day>07</day></date-in-citation>
    </element-citation>
  </ref>
  <ref id="ref-ludeckeExtractingComputingExploring2020-nb-article">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Lüdecke</surname><given-names>Daniel</given-names></name>
        <name><surname>Ben-Shachar</surname><given-names>Mattan S.</given-names></name>
        <name><surname>Patil</surname><given-names>Indrajeet</given-names></name>
        <name><surname>Makowski</surname><given-names>Dominique</given-names></name>
      </person-group>
      <article-title>Extracting, computing and exploring the parameters of statistical models using R.</article-title>
      <source>Journal of Open Source Software</source>
      <year iso-8601-date="2020">2020</year>
      <volume>5</volume>
      <issue>53</issue>
      <pub-id pub-id-type="doi">10.21105/joss.02445</pub-id>
      <fpage>2445</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-maxwellSoftwareDevelopmentProductivity1996-nb-article">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Maxwell</surname><given-names>K. D.</given-names></name>
        <name><surname>Van Wassenhove</surname><given-names>L.</given-names></name>
        <name><surname>Dutta</surname><given-names>S.</given-names></name>
      </person-group>
      <article-title>Software development productivity of European space, military, and industrial applications</article-title>
      <source>IEEE Transactions on Software Engineering</source>
      <year iso-8601-date="1996-10">1996</year><month>10</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2025-02-05">2025</year><month>02</month><day>05</day></date-in-citation>
      <volume>22</volume>
      <issue>10</issue>
      <issn>1939-3520</issn>
      <pub-id pub-id-type="doi">10.1109/32.544349</pub-id>
      <fpage>706</fpage>
      <lpage>718</lpage>
    </element-citation>
  </ref>
  <ref id="ref-mcelreathStatisticalRethinkingBayesian2020-nb-article">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>McElreath</surname><given-names>Richard</given-names></name>
      </person-group>
      <source>Statistical Rethinking: A Bayesian Course with Examples in R and Stan</source>
      <publisher-name>Chapman and Hall/CRC</publisher-name>
      <publisher-loc>Boca Raton</publisher-loc>
      <year iso-8601-date="2020-03">2020</year><month>03</month>
      <edition>2</edition>
      <isbn>978-0-429-02960-8</isbn>
      <pub-id pub-id-type="doi">10.1201/9780429029608</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-mettlerConnectedWorkplaceCharacteristics2024-nb-article">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Mettler</surname><given-names>Tobias</given-names></name>
      </person-group>
      <article-title>The connected workplace: Characteristics and social consequences of work surveillance in the age of datification, sensorization, and artificial intelligence</article-title>
      <source>Journal of Information Technology</source>
      <publisher-name>SAGE Publications Ltd</publisher-name>
      <year iso-8601-date="2024-09">2024</year><month>09</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2025-02-06">2025</year><month>02</month><day>06</day></date-in-citation>
      <volume>39</volume>
      <issue>3</issue>
      <issn>0268-3962</issn>
      <pub-id pub-id-type="doi">10.1177/02683962231202535</pub-id>
      <fpage>547</fpage>
      <lpage>567</lpage>
    </element-citation>
  </ref>
  <ref id="ref-meyerTodayWasGood2021-nb-article">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Meyer</surname><given-names>Andre N.</given-names></name>
        <name><surname>Barr</surname><given-names>Earl T.</given-names></name>
        <name><surname>Bird</surname><given-names>Christian</given-names></name>
        <name><surname>Zimmermann</surname><given-names>Thomas</given-names></name>
      </person-group>
      <article-title>Today Was a Good Day: The Daily Life of Software Developers</article-title>
      <source>IEEE Transactions on Software Engineering</source>
      <year iso-8601-date="2021-05">2021</year><month>05</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2024-10-17">2024</year><month>10</month><day>17</day></date-in-citation>
      <volume>47</volume>
      <issue>5</issue>
      <issn>0098-5589, 1939-3520, 2326-3881</issn>
      <pub-id pub-id-type="doi">10.1109/TSE.2019.2904957</pub-id>
      <fpage>863</fpage>
      <lpage>880</lpage>
    </element-citation>
  </ref>
  <ref id="ref-murphy-hillWhatPredictsSoftware2021-nb-article">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Murphy-Hill</surname><given-names>Emerson</given-names></name>
        <name><surname>Jaspan</surname><given-names>Ciera</given-names></name>
        <name><surname>Sadowski</surname><given-names>Caitlin</given-names></name>
        <name><surname>Shepherd</surname><given-names>David</given-names></name>
        <name><surname>Phillips</surname><given-names>Michael</given-names></name>
        <name><surname>Winter</surname><given-names>Collin</given-names></name>
        <name><surname>Knight</surname><given-names>Andrea</given-names></name>
        <name><surname>Smith</surname><given-names>Edward</given-names></name>
        <name><surname>Jorde</surname><given-names>Matthew</given-names></name>
      </person-group>
      <article-title>What Predicts Software Developers’ Productivity?</article-title>
      <source>IEEE Transactions on Software Engineering</source>
      <year iso-8601-date="2021-03">2021</year><month>03</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2024-10-02">2024</year><month>10</month><day>02</day></date-in-citation>
      <volume>47</volume>
      <issue>3</issue>
      <issn>0098-5589, 1939-3520, 2326-3881</issn>
      <pub-id pub-id-type="doi">10.1109/TSE.2019.2900308</pub-id>
      <fpage>582</fpage>
      <lpage>594</lpage>
    </element-citation>
  </ref>
  <ref id="ref-nanImpactBudgetSchedule2009-nb-article">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Nan</surname><given-names>Ning</given-names></name>
        <name><surname>Harter</surname><given-names>Donald E.</given-names></name>
      </person-group>
      <article-title>Impact of Budget and Schedule Pressure on Software Development Cycle Time and Effort</article-title>
      <source>IEEE Transactions on Software Engineering</source>
      <year iso-8601-date="2009-09">2009</year><month>09</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2025-02-07">2025</year><month>02</month><day>07</day></date-in-citation>
      <volume>35</volume>
      <issue>5</issue>
      <issn>1939-3520</issn>
      <pub-id pub-id-type="doi">10.1109/TSE.2009.18</pub-id>
      <fpage>624</fpage>
      <lpage>637</lpage>
    </element-citation>
  </ref>
  <ref id="ref-nelsonAppliedLifeData1982-nb-article">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Nelson</surname><given-names>Wayne</given-names></name>
      </person-group>
      <source>Applied life data analysis</source>
      <publisher-name>Wiley</publisher-name>
      <publisher-loc>New York</publisher-loc>
      <year iso-8601-date="1982">1982</year>
      <isbn>978-0-471-09458-6</isbn>
    </element-citation>
  </ref>
  <ref id="ref-nicholsEndMythIndividual2019-nb-article">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Nichols</surname><given-names>William R.</given-names></name>
      </person-group>
      <article-title>The End to the Myth of Individual Programmer Productivity</article-title>
      <source>IEEE Software</source>
      <year iso-8601-date="2019-09">2019</year><month>09</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2024-10-02">2024</year><month>10</month><day>02</day></date-in-citation>
      <volume>36</volume>
      <issue>5</issue>
      <issn>1937-4194</issn>
      <pub-id pub-id-type="doi">10.1109/MS.2019.2908576</pub-id>
      <fpage>71</fpage>
      <lpage>75</lpage>
    </element-citation>
  </ref>
  <ref id="ref-nisocreditworkinggroupANSINISOZ3910420222022-nb-article">
    <element-citation>
      <person-group person-group-type="author">
        <string-name>NISO CRediT Working Group</string-name>
      </person-group>
      <article-title>ANSI/NISO Z39.104-2022, CRediT, Contributor Roles Taxonomy</article-title>
      <publisher-name>NISO</publisher-name>
      <publisher-loc>3600 Clipper Mill Road Suite 302 Baltimore, MD 21211</publisher-loc>
      <year iso-8601-date="2022-01">2022</year><month>01</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2025-01-08">2025</year><month>01</month><day>08</day></date-in-citation>
      <pub-id pub-id-type="doi">10.3789/ansi.niso.z39.104-2022</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-obstbaumOngoingResearchSoftware-nb-article">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Obstbaum</surname><given-names>Simon</given-names></name>
        <name><surname>Denisov-Blanch</surname><given-names>Yegor</given-names></name>
      </person-group>
      <article-title>Ongoing Research on Software Engineering Productivity</article-title>
    </element-citation>
  </ref>
  <ref id="ref-oroszMeasuringDeveloperProductivity2024-nb-article">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Orosz</surname><given-names>Gergely</given-names></name>
      </person-group>
      <article-title>Measuring developer productivity? A response to McKinsey</article-title>
      <publisher-name>https://newsletter.pragmaticengineer.com/p/measuring-developer-productivity</publisher-name>
      <year iso-8601-date="2024-01">2024</year><month>01</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2025-01-08">2025</year><month>01</month><day>08</day></date-in-citation>
    </element-citation>
  </ref>
  <ref id="ref-oroszMeasuringDeveloperProductivity2024a-nb-article">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Orosz</surname><given-names>Gergely</given-names></name>
      </person-group>
      <article-title>Measuring developer productivity? A response to McKinsey, Part 2</article-title>
      <publisher-name>https://newsletter.pragmaticengineer.com/p/measuring-developer-productivity-part-2</publisher-name>
      <year iso-8601-date="2024-10">2024</year><month>10</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2025-02-06">2025</year><month>02</month><day>06</day></date-in-citation>
    </element-citation>
  </ref>
  <ref id="ref-paudelMeasuringImpactTechnical2024-nb-article">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Paudel</surname><given-names>Bhuwan</given-names></name>
        <name><surname>Gonzalez-Huerta</surname><given-names>Javier</given-names></name>
        <name><surname>Zabardast</surname><given-names>Ehsan</given-names></name>
        <name><surname>Klotins</surname><given-names>Eriks</given-names></name>
      </person-group>
      <article-title>Towards Measuring the Impact of Technical Debt on Lead Time: An Industrial Case Study</article-title>
      <publisher-name>arXiv</publisher-name>
      <year iso-8601-date="2024-06">2024</year><month>06</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2025-02-07">2025</year><month>02</month><day>07</day></date-in-citation>
      <uri>https://arxiv.org/abs/2406.01578</uri>
      <pub-id pub-id-type="doi">10.48550/arXiv.2406.01578</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-pedersenPatchworkComposerPlots2024-nb-article">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Pedersen</surname><given-names>Thomas Lin</given-names></name>
      </person-group>
      <source>Patchwork: The composer of plots</source>
      <year iso-8601-date="2024">2024</year>
    </element-citation>
  </ref>
  <ref id="ref-pedersenScicoColourPalettes2025-nb-article">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Pedersen</surname><given-names>Thomas Lin</given-names></name>
        <name><surname>Crameri</surname><given-names>Fabio</given-names></name>
      </person-group>
      <source>Scico: Colour palettes based on the scientific colour-maps</source>
      <year iso-8601-date="2025">2025</year>
    </element-citation>
  </ref>
  <ref id="ref-qiuShowtextUsingFonts2024-nb-article">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Qiu</surname><given-names>Yixuan</given-names></name>
        <name><surname>details.</surname><given-names>authors/contributors of the included software. See file AUTHORS for</given-names></name>
      </person-group>
      <source>Showtext: Using fonts more easily in R graphs</source>
      <year iso-8601-date="2024">2024</year>
    </element-citation>
  </ref>
  <ref id="ref-quadlinMarkWomansRecord2018-nb-article">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Quadlin</surname><given-names>Natasha</given-names></name>
      </person-group>
      <article-title>The Mark of a Woman’s Record: Gender and Academic Performance in Hiring</article-title>
      <source>American Sociological Review</source>
      <publisher-name>SAGE Publications Inc</publisher-name>
      <year iso-8601-date="2018-04">2018</year><month>04</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2025-02-15">2025</year><month>02</month><day>15</day></date-in-citation>
      <volume>83</volume>
      <issue>2</issue>
      <issn>0003-1224</issn>
      <pub-id pub-id-type="doi">10.1177/0003122418762291</pub-id>
      <fpage>331</fpage>
      <lpage>360</lpage>
    </element-citation>
  </ref>
  <ref id="ref-ramirezMeasuringKnowledgeWorker2004-nb-article">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Ramírez</surname><given-names>Yuri W.</given-names></name>
        <name><surname>Nembhard</surname><given-names>David A.</given-names></name>
      </person-group>
      <article-title>Measuring knowledge worker productivity</article-title>
      <source>Journal of Intellectual Capital</source>
      <publisher-name>Emerald Group Publishing Limited</publisher-name>
      <year iso-8601-date="2004-01">2004</year><month>01</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2024-10-02">2024</year><month>10</month><day>02</day></date-in-citation>
      <volume>5</volume>
      <issue>4</issue>
      <issn>1469-1930</issn>
      <pub-id pub-id-type="doi">10.1108/14691930410567040</pub-id>
      <fpage>602</fpage>
      <lpage>628</lpage>
    </element-citation>
  </ref>
  <ref id="ref-rcoreteamLanguageEnvironmentStatistical2023-nb-article">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <string-name>R Core Team</string-name>
      </person-group>
      <source>R: A language and environment for statistical computing</source>
      <publisher-name>R Foundation for Statistical Computing</publisher-name>
      <publisher-loc>Vienna, Austria</publisher-loc>
      <year iso-8601-date="2023">2023</year>
    </element-citation>
  </ref>
  <ref id="ref-rigginsWhatMcKinseyGot2023-nb-article">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Riggins</surname><given-names>Jennifer</given-names></name>
      </person-group>
      <article-title>What McKinsey got wrong about developer productivity</article-title>
      <source>LeadDev</source>
      <publisher-name>https://leaddev.com/career-development/what-mckinsey-got-wrong-about-developer-productivity</publisher-name>
      <year iso-8601-date="2023-10">2023</year><month>10</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2024-12-17">2024</year><month>12</month><day>17</day></date-in-citation>
    </element-citation>
  </ref>
  <ref id="ref-riosaWrittenUnwrittenGuide2019-nb-article">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Riosa</surname><given-names>Blake</given-names></name>
      </person-group>
      <article-title>The (written) unwritten guide to pull requests</article-title>
      <source>Work Life by Atlassian</source>
      <publisher-name>https://www.atlassian.com/blog/git/written-unwritten-guide-pull-requests</publisher-name>
      <year iso-8601-date="2019-07">2019</year><month>07</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2025-02-07">2025</year><month>02</month><day>07</day></date-in-citation>
    </element-citation>
  </ref>
  <ref id="ref-rosserSystemsPerspectiveTechnical2021-nb-article">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Rosser</surname><given-names>Larri Ann</given-names></name>
        <name><surname>Norton</surname><given-names>John H</given-names></name>
      </person-group>
      <article-title>A Systems Perspective on Technical Debt</article-title>
      <source>2021 IEEE Aerospace Conference (50100)</source>
      <year iso-8601-date="2021-03">2021</year><month>03</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2025-02-07">2025</year><month>02</month><day>07</day></date-in-citation>
      <issn>1095-323X</issn>
      <pub-id pub-id-type="doi">10.1109/AERO50100.2021.9438359</pub-id>
      <fpage>1</fpage>
      <lpage>10</lpage>
    </element-citation>
  </ref>
  <ref id="ref-rummelAverageWeibullAnalysis2017-nb-article">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Rummel</surname><given-names>Bernard</given-names></name>
      </person-group>
      <article-title>Beyond Average: Weibull Analysis of Task Completion Times</article-title>
      <year iso-8601-date="2017">2017</year>
      <volume>12</volume>
      <issue>2</issue>
    </element-citation>
  </ref>
  <ref id="ref-ruvimovaExploratoryStudyProductivity2022-nb-article">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Ruvimova</surname><given-names>Anastasia</given-names></name>
        <name><surname>Lill</surname><given-names>Alexander</given-names></name>
        <name><surname>Gugler</surname><given-names>Jan</given-names></name>
        <name><surname>Howe</surname><given-names>Lauren</given-names></name>
        <name><surname>Huang</surname><given-names>Elaine</given-names></name>
        <name><surname>Murphy</surname><given-names>Gail</given-names></name>
        <name><surname>Fritz</surname><given-names>Thomas</given-names></name>
      </person-group>
      <article-title>An exploratory study of productivity perceptions in software teams</article-title>
      <source>Proceedings of the 44th International Conference on Software Engineering</source>
      <publisher-name>ACM</publisher-name>
      <publisher-loc>Pittsburgh Pennsylvania</publisher-loc>
      <year iso-8601-date="2022-05">2022</year><month>05</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2022-11-12">2022</year><month>11</month><day>12</day></date-in-citation>
      <isbn>978-1-4503-9221-1</isbn>
      <pub-id pub-id-type="doi">10.1145/3510003.3510081</pub-id>
      <fpage>99</fpage>
      <lpage>111</lpage>
    </element-citation>
  </ref>
  <ref id="ref-sackmanExploratoryExperimentalStudies1968-nb-article">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Sackman</surname><given-names>H.</given-names></name>
        <name><surname>Erikson</surname><given-names>W. J.</given-names></name>
        <name><surname>Grant</surname><given-names>E. E.</given-names></name>
      </person-group>
      <article-title>Exploratory experimental studies comparing online and offline programming performance</article-title>
      <source>Communications of the ACM</source>
      <year iso-8601-date="1968-01">1968</year><month>01</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2024-10-02">2024</year><month>10</month><day>02</day></date-in-citation>
      <volume>11</volume>
      <issue>1</issue>
      <issn>0001-0782, 1557-7317</issn>
      <pub-id pub-id-type="doi">10.1145/362851.362858</pub-id>
      <fpage>3</fpage>
      <lpage>11</lpage>
    </element-citation>
  </ref>
  <ref id="ref-sadowskiRethinkingProductivitySoftware2019-nb-article">
    <element-citation publication-type="book">
      <source>Rethinking Productivity in Software Engineering</source>
      <person-group person-group-type="editor">
        <name><surname>Sadowski</surname><given-names>Caitlin</given-names></name>
        <name><surname>Zimmermann</surname><given-names>Thomas</given-names></name>
      </person-group>
      <publisher-name>Springer Nature</publisher-name>
      <year iso-8601-date="2019">2019</year>
      <date-in-citation content-type="access-date"><year iso-8601-date="2025-02-07">2025</year><month>02</month><day>07</day></date-in-citation>
      <pub-id pub-id-type="doi">10.1007/978-1-4842-4221-6</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-sadowskiSoftwareDevelopmentProductivity2019-nb-article">
    <element-citation publication-type="chapter">
      <person-group person-group-type="author">
        <name><surname>Sadowski</surname><given-names>Caitlin</given-names></name>
        <name><surname>Storey</surname><given-names>Margaret-Anne</given-names></name>
        <name><surname>Feldt</surname><given-names>Robert</given-names></name>
      </person-group>
      <article-title>A Software Development Productivity Framework</article-title>
      <source>Rethinking Productivity in Software Engineering</source>
      <person-group person-group-type="editor">
        <name><surname>Sadowski</surname><given-names>Caitlin</given-names></name>
        <name><surname>Zimmermann</surname><given-names>Thomas</given-names></name>
      </person-group>
      <publisher-name>Apress</publisher-name>
      <publisher-loc>Berkeley, CA</publisher-loc>
      <year iso-8601-date="2019">2019</year>
      <date-in-citation content-type="access-date"><year iso-8601-date="2024-10-02">2024</year><month>10</month><day>02</day></date-in-citation>
      <isbn>978-1-4842-4220-9 978-1-4842-4221-6</isbn>
      <pub-id pub-id-type="doi">10.1007/978-1-4842-4221-6_5</pub-id>
      <fpage>39</fpage>
      <lpage>47</lpage>
    </element-citation>
  </ref>
  <ref id="ref-SciPyProceedings_11-nb-article">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Hagberg</surname><given-names>Aric A.</given-names></name>
        <name><surname>Schult</surname><given-names>Daniel A.</given-names></name>
        <name><surname>Swart</surname><given-names>Pieter J.</given-names></name>
      </person-group>
      <article-title>Exploring network structure, dynamics, and function using NetworkX</article-title>
      <source>Proceedings of the 7th python in science conference</source>
      <person-group person-group-type="editor">
        <name><surname>Varoquaux</surname><given-names>Gaël</given-names></name>
        <name><surname>Vaught</surname><given-names>Travis</given-names></name>
        <name><surname>Millman</surname><given-names>Jarrod</given-names></name>
      </person-group>
      <publisher-loc>Pasadena, CA USA</publisher-loc>
      <year iso-8601-date="2008">2008</year>
      <fpage>11</fpage>
      <lpage>15</lpage>
    </element-citation>
  </ref>
  <ref id="ref-shrikanthAssessingPractitionerBeliefs2021-nb-article">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Shrikanth</surname><given-names>N. C.</given-names></name>
        <name><surname>Nichols</surname><given-names>William</given-names></name>
        <name><surname>Fahid</surname><given-names>Fahmid Morshed</given-names></name>
        <name><surname>Menzies</surname><given-names>Tim</given-names></name>
      </person-group>
      <article-title>Assessing practitioner beliefs about software engineering</article-title>
      <source>Empirical Software Engineering</source>
      <year iso-8601-date="2021-05">2021</year><month>05</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2024-10-02">2024</year><month>10</month><day>02</day></date-in-citation>
      <volume>26</volume>
      <issue>4</issue>
      <issn>1573-7616</issn>
      <pub-id pub-id-type="doi">10.1007/s10664-021-09957-5</pub-id>
      <fpage>73</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-sjobergFutureEmpiricalMethods2007-nb-article">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Sjoberg</surname><given-names>Dag I. K.</given-names></name>
        <name><surname>Dyba</surname><given-names>Tore</given-names></name>
        <name><surname>Jorgensen</surname><given-names>Magne</given-names></name>
      </person-group>
      <article-title>The Future of Empirical Methods in Software Engineering Research</article-title>
      <source>Future of Software Engineering (FOSE ’07)</source>
      <year iso-8601-date="2007-05">2007</year><month>05</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2025-02-28">2025</year><month>02</month><day>28</day></date-in-citation>
      <pub-id pub-id-type="doi">10.1109/FOSE.2007.30</pub-id>
      <fpage>358</fpage>
      <lpage>378</lpage>
    </element-citation>
  </ref>
  <ref id="ref-standevelopmentteamStanHeadersHeadersInterface2020-nb-article">
    <element-citation>
      <person-group person-group-type="author">
        <string-name>Stan Development Team</string-name>
      </person-group>
      <article-title>StanHeaders: Headers for the R interface to Stan</article-title>
      <year iso-8601-date="2020">2020</year>
    </element-citation>
  </ref>
  <ref id="ref-storeyHowDevelopersManagers2022-nb-article">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Storey</surname><given-names>Margaret-Anne</given-names></name>
        <name><surname>Houck</surname><given-names>Brian</given-names></name>
        <name><surname>Zimmermann</surname><given-names>Thomas</given-names></name>
      </person-group>
      <article-title>How Developers and Managers Define and Trade Productivity for Quality</article-title>
      <year iso-8601-date="2022-04">2022</year><month>04</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2022-07-18">2022</year><month>07</month><day>18</day></date-in-citation>
      <uri>https://arxiv.org/abs/2111.04302</uri>
      <pub-id pub-id-type="doi">10.1145/3528579.3529177</pub-id>
    </element-citation>
  </ref>
  <ref id="ref-storeyHowDevelopersManagers2022b-nb-article">
    <element-citation publication-type="paper-conference">
      <person-group person-group-type="author">
        <name><surname>Storey</surname><given-names>Margaret-Anne</given-names></name>
        <name><surname>Houck</surname><given-names>Brian</given-names></name>
        <name><surname>Zimmermann</surname><given-names>Thomas</given-names></name>
      </person-group>
      <article-title>How Developers and Managers Define and Trade Productivity for Quality</article-title>
      <source>Proceedings of the 15th International Conference on Cooperative and Human Aspects of Software Engineering</source>
      <year iso-8601-date="2022-05">2022</year><month>05</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2024-12-17">2024</year><month>12</month><day>17</day></date-in-citation>
      <uri>https://arxiv.org/abs/2111.04302</uri>
      <pub-id pub-id-type="doi">10.1145/3528579.3529177</pub-id>
      <fpage>26</fpage>
      <lpage>35</lpage>
    </element-citation>
  </ref>
  <ref id="ref-storeyTheorySoftwareDeveloper2021-nb-article">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Storey</surname><given-names>Margaret-Anne</given-names></name>
        <name><surname>Zimmermann</surname><given-names>Thomas</given-names></name>
        <name><surname>Bird</surname><given-names>Christian</given-names></name>
        <name><surname>Czerwonka</surname><given-names>Jacek</given-names></name>
        <name><surname>Murphy</surname><given-names>Brendan</given-names></name>
        <name><surname>Kalliamvakou</surname><given-names>Eirini</given-names></name>
      </person-group>
      <article-title>Towards a Theory of Software Developer Job Satisfaction and Perceived Productivity</article-title>
      <source>IEEE Transactions on Software Engineering</source>
      <year iso-8601-date="2021-10">2021</year><month>10</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2022-07-18">2022</year><month>07</month><day>18</day></date-in-citation>
      <volume>47</volume>
      <issue>10</issue>
      <issn>0098-5589, 1939-3520, 2326-3881</issn>
      <pub-id pub-id-type="doi">10.1109/TSE.2019.2944354</pub-id>
      <fpage>2125</fpage>
      <lpage>2142</lpage>
    </element-citation>
  </ref>
  <ref id="ref-terhorst-northMcKinseyDeveloperProductivity2023-nb-article">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Terhorst-North</surname><given-names>Daniel</given-names></name>
      </person-group>
      <article-title>McKinsey Developer Productivity Review</article-title>
      <source>Dan North &amp; Associates Limited</source>
      <publisher-name>https://dannorth.net/mckinsey-review/</publisher-name>
      <year iso-8601-date="2023-10">2023</year><month>10</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2025-02-06">2025</year><month>02</month><day>06</day></date-in-citation>
    </element-citation>
  </ref>
  <ref id="ref-terhorst-northWorstProgrammerKnow2023-nb-article">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Terhorst-North</surname><given-names>Daniel</given-names></name>
      </person-group>
      <article-title>The Worst Programmer I Know</article-title>
      <source>Dan North &amp; Associates Limited</source>
      <publisher-name>https://dannorth.net/the-worst-programmer/</publisher-name>
      <year iso-8601-date="2023-09">2023</year><month>09</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2025-02-06">2025</year><month>02</month><day>06</day></date-in-citation>
    </element-citation>
  </ref>
  <ref id="ref-toxboeCycleTime2023-nb-article">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Toxboe</surname><given-names>Anders</given-names></name>
      </person-group>
      <article-title>Cycle Time</article-title>
      <source>Learning Loop</source>
      <publisher-name>https://learningloop.io/glossary/cycle-time</publisher-name>
      <year iso-8601-date="2023-02">2023</year><month>02</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2025-02-07">2025</year><month>02</month><day>07</day></date-in-citation>
    </element-citation>
  </ref>
  <ref id="ref-trendowiczChapter6Factors2009-nb-article">
    <element-citation publication-type="chapter">
      <person-group person-group-type="author">
        <name><surname>Trendowicz</surname><given-names>Adam</given-names></name>
        <name><surname>Münch</surname><given-names>Jürgen</given-names></name>
      </person-group>
      <article-title>Chapter 6 Factors Influencing Software Development Productivity—State-of-the-Art and Industrial Experiences</article-title>
      <source>Advances in Computers</source>
      <publisher-name>Elsevier</publisher-name>
      <year iso-8601-date="2009-01">2009</year><month>01</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2025-02-07">2025</year><month>02</month><day>07</day></date-in-citation>
      <volume>77</volume>
      <pub-id pub-id-type="doi">10.1016/S0065-2458(09)01206-6</pub-id>
      <fpage>185</fpage>
      <lpage>241</lpage>
    </element-citation>
  </ref>
  <ref id="ref-vehtariRanknormalizationFoldingLocalization2021-nb-article">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Vehtari</surname><given-names>Aki</given-names></name>
        <name><surname>Gelman</surname><given-names>Andrew</given-names></name>
        <name><surname>Simpson</surname><given-names>Daniel</given-names></name>
        <name><surname>Carpenter</surname><given-names>Bob</given-names></name>
        <name><surname>Bürkner</surname><given-names>Paul-Christian</given-names></name>
      </person-group>
      <article-title>Rank-normalization, folding, and localization: An improved Rhat for assessing convergence of MCMC (with discussion)</article-title>
      <source>Bayesian Analysis</source>
      <year iso-8601-date="2021">2021</year>
    </element-citation>
  </ref>
  <ref id="ref-vonhippelFreeRevealingPrivatecollective2006-nb-article">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Von Hippel</surname><given-names>Eric</given-names></name>
        <name><surname>Von Krogh</surname><given-names>Georg</given-names></name>
      </person-group>
      <article-title>Free revealing and the private-collective model for innovation incentives</article-title>
      <source>R and D Management</source>
      <year iso-8601-date="2006-06">2006</year><month>06</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2025-02-05">2025</year><month>02</month><day>05</day></date-in-citation>
      <volume>36</volume>
      <issue>3</issue>
      <issn>0033-6807, 1467-9310</issn>
      <pub-id pub-id-type="doi">10.1111/j.1467-9310.2006.00435.x</pub-id>
      <fpage>295</fpage>
      <lpage>306</lpage>
    </element-citation>
  </ref>
  <ref id="ref-walkerConsUsingSPACE2023-nb-article">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Walker</surname><given-names>James</given-names></name>
      </person-group>
      <article-title>Cons of Using SPACE to Measure Productivity  Aviator</article-title>
      <year iso-8601-date="2023-02">2023</year><month>02</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2025-02-06">2025</year><month>02</month><day>06</day></date-in-citation>
    </element-citation>
  </ref>
  <ref id="ref-walkerEverythingWrongDORA2023-nb-article">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Walker</surname><given-names>James</given-names></name>
      </person-group>
      <article-title>Everything Wrong with DORA Metrics  Aviator</article-title>
      <year iso-8601-date="2023-01">2023</year><month>01</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2025-02-06">2025</year><month>02</month><day>06</day></date-in-citation>
    </element-citation>
  </ref>
  <ref id="ref-wattsNewScienceNetworks2004-nb-article">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Watts</surname><given-names>Duncan J.</given-names></name>
      </person-group>
      <article-title>The “New” Science of Networks</article-title>
      <source>Annual Review of Sociology</source>
      <publisher-name>Annual Reviews</publisher-name>
      <year iso-8601-date="2004-08">2004</year><month>08</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2025-02-28">2025</year><month>02</month><day>28</day></date-in-citation>
      <volume>30</volume>
      <issue>Volume 30, 2004</issue>
      <issn>0360-0572, 1545-2115</issn>
      <pub-id pub-id-type="doi">10.1146/annurev.soc.30.020404.104342</pub-id>
      <fpage>243</fpage>
      <lpage>270</lpage>
    </element-citation>
  </ref>
  <ref id="ref-waydevCycleTimeFormula2021-nb-article">
    <element-citation>
      <person-group person-group-type="author">
        <name><surname>Waydev</surname></name>
      </person-group>
      <article-title>Cycle Time Formula: How to Optimize the Key Metric to Accelerate Software Delivery</article-title>
      <year iso-8601-date="2021-07">2021</year><month>07</month>
    </element-citation>
  </ref>
  <ref id="ref-wickhamGgplot2ElegantGraphics2016-nb-article">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Wickham</surname><given-names>Hadley</given-names></name>
      </person-group>
      <source>Ggplot2: Elegant graphics for data analysis</source>
      <publisher-name>Springer-Verlag New York</publisher-name>
      <year iso-8601-date="2016">2016</year>
      <isbn>978-3-319-24277-4</isbn>
    </element-citation>
  </ref>
  <ref id="ref-wickhamScalesScaleFunctions2023-nb-article">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Wickham</surname><given-names>Hadley</given-names></name>
        <name><surname>Pedersen</surname><given-names>Thomas Lin</given-names></name>
        <name><surname>Seidel</surname><given-names>Dana</given-names></name>
      </person-group>
      <source>Scales: Scale functions for visualization</source>
      <year iso-8601-date="2023">2023</year>
    </element-citation>
  </ref>
  <ref id="ref-woodFastStableRestricted2011-nb-article">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Wood</surname><given-names>Simon N.</given-names></name>
      </person-group>
      <article-title>Fast stable restricted maximum likelihood and marginal likelihood estimation of semiparametric generalized linear models</article-title>
      <source>Journal of the Royal Statistical Society (B)</source>
      <year iso-8601-date="2011">2011</year>
      <volume>73</volume>
      <issue>1</issue>
      <fpage>3</fpage>
      <lpage>36</lpage>
    </element-citation>
  </ref>
  <ref id="ref-woodGeneralizedAdditiveModels2017-nb-article">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Wood</surname><given-names>Simon N.</given-names></name>
      </person-group>
      <source>Generalized Additive Models: An Introduction with R, Second Edition</source>
      <publisher-name>CRC Press</publisher-name>
      <year iso-8601-date="2017-05">2017</year><month>05</month>
      <isbn>978-1-4987-2834-8</isbn>
    </element-citation>
  </ref>
  <ref id="ref-woodSmoothingParameterModel2016-nb-article">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Wood</surname><given-names>Simon N.</given-names></name>
        <name><surname>Pya</surname><given-names>N.</given-names></name>
        <name><surname>Saefken</surname><given-names>B.</given-names></name>
      </person-group>
      <article-title>Smoothing parameter and model selection for general smooth models (with discussion)</article-title>
      <source>Journal of the American Statistical Association</source>
      <year iso-8601-date="2016">2016</year>
      <volume>111</volume>
      <fpage>1548</fpage>
      <lpage>1575</lpage>
    </element-citation>
  </ref>
  <ref id="ref-woodStableEfficientMultiple2004-nb-article">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Wood</surname><given-names>Simon N.</given-names></name>
      </person-group>
      <article-title>Stable and efficient multiple smoothing parameter estimation for generalized additive models</article-title>
      <source>Journal of the American Statistical Association</source>
      <year iso-8601-date="2004">2004</year>
      <volume>99</volume>
      <issue>467</issue>
      <fpage>673</fpage>
      <lpage>686</lpage>
    </element-citation>
  </ref>
  <ref id="ref-woodThinplateRegressionSplines2003-nb-article">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Wood</surname><given-names>Simon N.</given-names></name>
      </person-group>
      <article-title>Thin-plate regression splines</article-title>
      <source>Journal of the Royal Statistical Society (B)</source>
      <year iso-8601-date="2003">2003</year>
      <volume>65</volume>
      <issue>1</issue>
      <fpage>95</fpage>
      <lpage>114</lpage>
    </element-citation>
  </ref>
  <ref id="ref-xieDynamicDocumentsKnitr2015-nb-article">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Xie</surname><given-names>Yihui</given-names></name>
      </person-group>
      <source>Dynamic documents with R and knitr</source>
      <publisher-name>Chapman and Hall/CRC</publisher-name>
      <publisher-loc>Boca Raton, Florida</publisher-loc>
      <year iso-8601-date="2015">2015</year>
      <edition>2</edition>
    </element-citation>
  </ref>
  <ref id="ref-xieKnitrComprehensiveTool2014-nb-article">
    <element-citation publication-type="chapter">
      <person-group person-group-type="author">
        <name><surname>Xie</surname><given-names>Yihui</given-names></name>
      </person-group>
      <article-title>Knitr: A comprehensive tool for reproducible research in R</article-title>
      <source>Implementing reproducible computational research</source>
      <person-group person-group-type="editor">
        <name><surname>Stodden</surname><given-names>Victoria</given-names></name>
        <name><surname>Leisch</surname><given-names>Friedrich</given-names></name>
        <name><surname>Peng</surname><given-names>Roger D.</given-names></name>
      </person-group>
      <publisher-name>Chapman and Hall/CRC</publisher-name>
      <year iso-8601-date="2014">2014</year>
    </element-citation>
  </ref>
  <ref id="ref-xieKnitrGeneralpurposePackage2024-nb-article">
    <element-citation publication-type="book">
      <person-group person-group-type="author">
        <name><surname>Xie</surname><given-names>Yihui</given-names></name>
      </person-group>
      <source>Knitr: A general-purpose package for dynamic report generation in R</source>
      <year iso-8601-date="2024">2024</year>
    </element-citation>
  </ref>
  <ref id="ref-zhangPullRequestLatency2022-nb-article">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Zhang</surname><given-names>Xunhui</given-names></name>
        <name><surname>Yu</surname><given-names>Yue</given-names></name>
        <name><surname>Wang</surname><given-names>Tao</given-names></name>
        <name><surname>Rastogi</surname><given-names>Ayushi</given-names></name>
        <name><surname>Wang</surname><given-names>Huaimin</given-names></name>
      </person-group>
      <article-title>Pull request latency explained: An empirical overview</article-title>
      <source>Empirical Software Engineering</source>
      <year iso-8601-date="2022-11">2022</year><month>11</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2025-02-11">2025</year><month>02</month><day>11</day></date-in-citation>
      <volume>27</volume>
      <issue>6</issue>
      <issn>1382-3256, 1573-7616</issn>
      <pub-id pub-id-type="doi">10.1007/s10664-022-10143-4</pub-id>
      <fpage>126</fpage>
      <lpage></lpage>
    </element-citation>
  </ref>
  <ref id="ref-meyerEnablingGoodWork2021-nb-article">
    <element-citation publication-type="article-journal">
      <person-group person-group-type="author">
        <name><surname>Meyer</surname><given-names>André N.</given-names></name>
        <name><surname>Murphy</surname><given-names>Gail C.</given-names></name>
        <name><surname>Zimmermann</surname><given-names>Thomas</given-names></name>
        <name><surname>Fritz</surname><given-names>Thomas</given-names></name>
      </person-group>
      <article-title>Enabling Good Work Habits in Software Developers through Reflective Goal-Setting</article-title>
      <source>IEEE Transactions on Software Engineering</source>
      <year iso-8601-date="2021-09">2021</year><month>09</month>
      <date-in-citation content-type="access-date"><year iso-8601-date="2025-03-04">2025</year><month>03</month><day>04</day></date-in-citation>
      <volume>47</volume>
      <issue>9</issue>
      <issn>1939-3520</issn>
      <uri>https://ieeexplore.ieee.org/document/8823032/?arnumber=8823032</uri>
      <pub-id pub-id-type="doi">10.1109/TSE.2019.2938525</pub-id>
      <fpage>1872</fpage>
      <lpage>1885</lpage>
    </element-citation>
  </ref>
</ref-list>
<fn-group>
  <fn id="fn1-nb-article">
    <label>1</label><p>For example, see this
    <ext-link ext-link-type="uri" xlink:href="https://news.ycombinator.com/item?id=22349531">ycombinator
    thread</ext-link>
    (<ext-link ext-link-type="uri" xlink:href="http://web.archive.org/web/20240917164935/https://stackoverflow.blog/2024/06/19/the-real-10x-developer-makes-their-whole-team-better/">internet
    archive</ext-link>), and this
    <ext-link ext-link-type="uri" xlink:href="https://stackoverflow.blog/2024/06/19/the-real-10x-developer-makes-their-whole-team-better">StackOverflow
    blog post</ext-link>
    (<ext-link ext-link-type="uri" xlink:href="http://web.archive.org/web/20231209171051/https://news.ycombinator.com/item?id=22349531">internet
    archive</ext-link>)</p>
  </fn>
  <fn id="fn2-nb-article">
    <label>2</label><p>in fact, the original paper perhaps even
    emphasizes the “low performers” more than the “exceptional” stating,
    “the ‘horrid’ portion of the performance frequency distribution is
    the long tail at the high end, the positively skewed part which
    shows that one poor performer can consume as much time or cost as 5,
    10, or 20 good ones.”
    (<xref alt="Sackman, Erikson, and Grant 1968, 6" rid="ref-sackmanExploratoryExperimentalStudies1968-nb-article" ref-type="bibr">Sackman,
    Erikson, and Grant 1968, 6</xref>)</p>
  </fn>
  <fn id="fn3-nb-article">
    <label>3</label><p>Formerly Pluralsight Flow, now Flow at Appfire.
    All authors were research scientists or data scientists employed at
    Pluralsight at the time that this data was collected and
    analyzed.</p>
  </fn>
  <fn id="fn4-nb-article">
    <label>4</label><p>”When we suggest that an innovator—be it an
    individual or a firm—‘freely reveals’ proprietary information, we
    mean that all intellectual property rights to that information are
    voluntarily given up by that innovator and all parties are given
    equal access to it—the information becomes a public good (Harhoff et
    al., 2003).”
    (<xref alt="Von Hippel and Von Krogh 2006, 295" rid="ref-vonhippelFreeRevealingPrivatecollective2006-nb-article" ref-type="bibr">Von
    Hippel and Von Krogh 2006, 295</xref>)</p>
  </fn>
</fn-group>
</back>


</sub-article>
<!-- (F2ED4C6E)[nb-1]:/home/rstudio/code/uttvas-manuscript/analyses.qmd -->

</article>